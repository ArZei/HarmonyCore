
import System
import System.Collections.Generic
import System.Text
import System.Collections.Concurrent
import System.Runtime.CompilerServices
import System.Linq

namespace Harmony.Core

	public abstract class DataObjectMetadataBase

		public static MetadataLookup, @ConcurrentDictionary<Type, DataObjectMetadataBase>, new ConcurrentDictionary<Type, DataObjectMetadataBase>()

		public static method LookupType, @DataObjectMetadataBase
			targetType, @Type
		proc
			data result, @DataObjectMetadataBase
			if(!MetadataLookup.TryGetValue(targetType, result))
			begin
				;;the metadata type wasnt registered
				;;ensure the static constructor for the DataObject has been run
				RuntimeHelpers.RunClassConstructor(targetType.TypeHandle)
				if(!MetadataLookup.TryGetValue(targetType, result))
					throw new NotImplementedException("static constructor for data object type didnt register metadatatype")
			end
			mreturn result
		endmethod

		private RecordBuffers, @ConcurrentBag<int>, new ConcurrentBag<int>()
		public RPSStructureName	,String
		public RPSStructureSize	,Int32

		public method GetBuffer, int
		proc
			data result, int
			if(!RecordBuffers.TryTake(result))
				result = mem_proc(DM_ALLOC | DM_STATIC, RPSStructureSize)

			mreturn result
		endmethod

		public method ReturnBuffer, void
			handle, int
		proc
			RecordBuffers.Add(handle)
		endmethod

		;;backing field to store the objects field names
		protected mFieldNames	,@List<String>, new List<String>()
		protected mFields, @List<FieldDataDefinition>, new List<FieldDataDefinition>()
		
		public method GetFieldByName, @FieldDataDefinition
			in required fldName,	string
		proc
			mreturn mFields[mfieldDictionary[fldName]]
		endmethod
		
		public abstract method FormatKeyLiteral, a
			keyNumber, int
			parts, @Dictionary<string, Object>
		proc
		endmethod

		protected method KeyValueHelper, int
			inout destination, a
			partName, @string
			parts, @Dictionary<string, Object>
		proc
			data valueObject, @object
			if(parts.TryGetValue(partName, valueObject)) then
			begin
				data valueObjectString = valueObject.ToString()
				destination = valueObjectString
				mreturn valueObjectString.Length
			end
			else
				mreturn 0
		endmethod

		protected method KeyValueHelper, int
			inout destination, d
			partName, @string
			parts, @Dictionary<string, Object>
		proc
			data valueObject, @object
			if(parts.TryGetValue(partName, valueObject)) then
			begin
				destination = %implied(valueObject.ToString())
				mreturn ^size(destination)
			end
			else
				mreturn 0
		endmethod


		protected method KeyValueHelper, int
			inout destination, i
			partName, @string
			parts, @Dictionary<string, Object>
		proc
			data valueObject, @object
			if(parts.TryGetValue(partName, valueObject)) then
			begin
				if(valueObject .is. @i) then
					destination = (@i)valueObject
				else if(valueObject .is. int) then
					destination = (int)valueObject
				else
					destination = %integer(valueObject.ToString())
				mreturn ^size(destination)
			end
			else
				mreturn 0
		endmethod

		protected method KeyValueHelper, int
			inout destination, id
			partName, @string
			parts, @Dictionary<string, Object>
		proc
			data valueObject, @object
			if(parts.TryGetValue(partName, valueObject)) then
			begin
				destination = %implied(valueObject.ToString())
				mreturn ^size(destination)
			end
			else
				mreturn 0
		endmethod

		;;this returns null if there is no key, fully satsified by the supplied set of key names
		public method GetKeyNumberByFieldNames, short?
			in required fldNames, [#]string
		proc
			data inKeys, @List<int>, ^null 
			data fieldName, @string
			foreach fieldName in fldNames
			begin
				data fieldInKeys, @List<int>
				if(!mFieldsInKeys.TryGetValue(fieldName, fieldInKeys))
					mreturn ^null

				if(inKeys == ^null) then
					inKeys = new List<int>(fieldInKeys)
				else
				begin
					inKeys.RemoveAll(lambda(keyNum) { !fieldInKeys.Contains(keyNum) })
				end

				if(inKeys.Count < 0)
					mreturn ^null
			end

			if(inKeys == ^null || inKeys.Count < 0) then
				mreturn ^null
			else
				mreturn (short)inKeys.First()

		endmethod


		;;; <summary>
		;;;  Readonly property that returns the names of the fields defined within the $$Symphony Data Object$$.
		;;; </summary>
		public property FieldNames, @List<String>
			method get
			proc
				mreturn mFieldNames
			endmethod
		endproperty
		
		;;backing field to store the objects field headings for report/excel export, etc
		protected mFieldHeadings	,@List<String>, new List<String>()
		
		;;; <summary>
		;;;  Readonly property that returns the report headings of the fields defined within the $$Symphony Data Object$$.
		;;; </summary>
		public property FieldHeadings, @List<String>
			method get
			proc
				mreturn mFieldHeadings
			endmethod
		endproperty
		
		;;this logic allows a generated data oject to store off a copy of the field details
		;;and prevent itself from re-creating them
		
		protected mfieldDictionary	,@Dictionary<string, int>, new Dictionary<string, int>()
		protected mFieldsInKeys, @Dictionary<string, List<int>>, new Dictionary<string, List<int>>()
		protected mKeyDictionary, @Dictionary<int, List<Tuple<string, KeyType>>>, new Dictionary<int, List<Tuple<string, KeyType>>>()

		public method GetKeyFields, @List<string>
			keyNumber, int
			targetKeyType, KeyType
		proc
			mreturn mKeyDictionary[keyNumber].Where(lambda(kvp) { ((int)(kvp.Item2 .band. targetKeyType)) != 0 }).Select(lambda(kvp) { kvp.Item1 }).ToList()
		endmethod


		;;this can be called multiple times with the same key number to create a composite key
		protected method AddKeyInfo, void
			keyNumber, int
			fieldName, @string
		proc
			data keyInfo = keyNumber == 0 ? KeyType.KeyFactorySupplied : KeyType.UserSupplied
			data memberOfKeys, @List<int>
			if(!mFieldsInKeys.TryGetValue(fieldName, memberOfKeys))
			begin
				memberOfKeys = new List<int>()
				mFieldsInKeys.Add(fieldName, memberOfKeys)
			end
			memberOfKeys.Add(keyNumber)

			data keyParts, @List<Tuple<string, KeyType>>
			if(!mKeyDictionary.TryGetValue(keyNumber, keyParts))
			begin
				keyParts = new List<Tuple<string, KeyType>>()
				mKeyDictionary.Add(keyNumber,keyParts)
			end
			keyParts.Add( Tuple.Create(fieldName, keyInfo))
		endmethod


		protected method AddFieldInfo, void
			languageName, String
			dataType, string
			elementSize, int
			structurePosition, int
			decimalPrecision ,int
			clearField, boolean
			default formatter, @Harmony.Core.Converters.ILiteralFormatter, ^null
			default tagValue, @string, ^null
			endparams
		proc
			data fieldInfo = new FieldDataDefinition() { LanguageName = languageName, ElementSize = elementSize, StructurePosition = structurePosition, DecimalPrecision = decimalPrecision, ClearField = clearField, TagValue = tagValue, LiteralFormatter = formatter }

			using dataType select
			("ALPHA"),
			begin
				fieldInfo.DataType = FieldDataType.AlphaField
			end
			("BINARY"),
			begin
				fieldInfo.DataType = FieldDataType.AlphaField
			end
			("DATE"),
			begin
				fieldInfo.DataType = FieldDataType.DecimalField
			end
			("DECIMAL"),
			begin
				fieldInfo.DataType = FieldDataType.DecimalField
			end
			("IMPLIED"),
			begin
				fieldInfo.DataType = FieldDataType.ImpliedDecimal
			end
			("INTEGER"),
			begin
				fieldInfo.DataType = FieldDataType.IntegerField
			end
			("JULIAN"),
			begin
				fieldInfo.DataType = FieldDataType.DecimalField
			end
			("TIME"),
			begin
				fieldInfo.DataType = FieldDataType.DecimalField
			end
			("USER ALPHA"),
			begin
				fieldInfo.DataType = FieldDataType.AlphaField
			end
			("USER DATE"),
			begin
				fieldInfo.DataType = FieldDataType.AlphaField
			end
			("USER NUMERIC"),
			begin
				fieldInfo.DataType = FieldDataType.AlphaField
			end
			("TAG_LITERAL"),
			begin
				fieldInfo.DataType = FieldDataType.TagLiteral
			end
			("DATAOBJECT"),
			begin
				fieldInfo.DataType = FieldDataType.DataObjectField
			end
			("COLLECTION"),
			begin
				fieldInfo.DataType = FieldDataType.DataObjectCollectionField
			end
			endusing

			mFields.Add(fieldInfo)
			mfieldDictionary.Add(languageName, mFields.Count - 1)
		endmethod

		;;; <summary>
		;;;  Return the field index based on the passed field name.
		;;; </summary>
		;;; <param name="fldName">Name of the field.</param>
		public method GetFieldFromStringIndex, int
			in required fldName			,String
			endparams
		proc
			mreturn mfieldDictionary[fldName]
		endmethod
		
		;;; <summary>
		;;; Expose the underlying structure size.
		;;; </summary>
		public virtual property StructureSize, Int32
			method get
			proc
				mreturn RPSStructureSize
			endmethod
		endproperty

		;;generated metadata type can just call new and create the data object base
		public abstract method MakeNew, @DataObjectBase
			dataArea, a
			grfa, a
		proc
		endmethod

		;;generated metadata type can just call new and create the data object base
		public abstract method MakeNew, @DataObjectBase
			dataArea, a
			grfa, a
			joinedObjects, [#]KeyValuePair<string, object>
		proc
		endmethod

		public SynergyMemberInfo, @List<System.Reflection.MemberInfo>

	endclass

endnamespace
