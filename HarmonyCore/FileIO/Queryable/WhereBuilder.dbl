import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Enumerations
import Synergex.SynergyDE.Select
import System.Linq.Expressions
import Harmony.Core.Utility
import Remotion.Linq.Clauses
import System.Linq

namespace Harmony.Core.FileIO.Queryable

	internal class WhereExpressionBuilder extends ExpressionVisitor
		;;this might need to be a stack to handle nesting fully
		private mWhereStack, @Stack<object>
		private mOnStack, @Stack<object>
		private mDataObjects, @Dictionary<IQuerySource, DataObjectMetadataBase>
		private mCaseSensitive, boolean
		private mQuerySources, @List<IQuerySource>
		public method WhereExpressionBuilder
			caseSensitive, boolean
			querySources, @List<IQuerySource>
		proc
			mDataObjects = new Dictionary<IQuerySource, DataObjectMetadataBase>()
			mWhereStack = new Stack<object>()
			mOnStack = new Stack<object>()
			mQuerySources = querySources
			data querySource, @IQuerySource
			foreach querySource in mQuerySources
			begin
				if(^typeof(DataObjectBase).IsAssignableFrom(querySource.ItemType))
				begin
					data metadataObject = DataObjectMetadataBase.LookupType(querySource.ItemType)
					mDataObjects.Add(querySource, metadataObject)
				end
			end
		endmethod

		public method VisitForWhere, void
			expr, @Expression
			whereParts, @List<Object>
			onParts, @List<object>
		proc
			mWhereStack = new Stack<object>()
			mOnStack = new Stack<object>()
			Visit(expr)
			if(mWhereStack.Count > 0)
				whereParts.Add(mWhereStack.Peek())

			if(mOnStack.Count > 0)
				onParts.Add(mOnStack.Peek())
		endmethod

		public method VisitForOn, @object
			expr, @Expression
		proc
			mWhereStack = new Stack<object>()
			mOnStack = new Stack<object>()
			Visit(expr)
			if(mOnStack.Count == 1) then
				mreturn mOnStack.Peek()
			else if(mOnStack.Count > 1) then
			begin
				data resultObj = mOnStack.Pop()
				while(mOnStack.Count > 0)
				begin
					resultObj = new ConnectorPart() { Op = WhereClauseConnector.AndOperator, Left = resultObj, Right = mOnStack.Pop() }
				end
				mreturn resultObj
			end
			else 
				mreturn ^null
		endmethod

		public method VisitForOrderBy, @Tuple<FieldDataDefinition, Boolean>
			expr, @Expression
		proc
			Visit(expr)
			mreturn ^null
		endmethod

		private static method OpKindFromExpression, void
			required in node, @Expression
			required inout op, WhereClauseOperator?
			required inout glue, WhereClauseConnector?
		proc
			op = ^null
			glue = ^null
			if(node.NodeType == ExpressionType.AndAlso || node.NodeType == ExpressionType.And) then
			begin
				glue = WhereClauseConnector.AndOperator
			end
			else if(node.NodeType == ExpressionType.OrElse)  then
			begin
				glue = WhereClauseConnector.OrOperator
			end
			else if(node.NodeType == ExpressionType.Equal) then
			begin
				op = WhereClauseOperator.EqualTo
			end
			else if(node.NodeType == ExpressionType.LessThan) then
			begin
				op = WhereClauseOperator.LessThan
			end
			else if(node.NodeType == ExpressionType.LessThanOrEqual) then
			begin
				op = WhereClauseOperator.LessThanOrEqualTo
			end
			else if(node.NodeType == ExpressionType.GreaterThan) then
			begin
				op = WhereClauseOperator.GreaterThan
			end
			else if(node.NodeType == ExpressionType.GreaterThanOrEqual) then
			begin
				op = WhereClauseOperator.GreaterThanOrEqualTo
			end
			else if(node.NodeType == ExpressionType.NotEqual) then
			begin
				op = WhereClauseOperator.NotEqualTo
			end
			else
				throw new NotImplementedException()
		endmethod

		private method FindTargetField, @object
			node, @Expression
			node2, @Expression
		proc
			if(node .is. MemberExpression) then
			begin
				;;TODO this assumes we're only dealing with our target data object
				data dObj = mDataObjects.First()
				mreturn new FieldReference() { FieldDef = dObj.Value.GetFieldByName(((@MemberExpression)node).Member.Name), QuerySourceKey =0 }
			end
			else if(node .is. MethodCallExpression) then
			begin
				data callNode = (@MethodCallExpression)node
				if(callNode.Method.Name == "Property")
				begin
					;;this is where we can do a metadata object lookup for join
					data memberTargetParameter = (@Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)callNode.Arguments[0]
					data memberNameConstant = (@ConstantExpression)callNode.Arguments[1]
					data memberTargetType, @DataObjectMetadataBase, mDataObjects[memberTargetParameter.ReferencedQuerySource]

					;;if we're looking at a tag literal (fake) field just drop out here
					data targetField = memberTargetType.GetFieldByName(memberNameConstant.Value.ToString())
					if(((int)targetField.DataType & (int)FieldDataType.TagLiteral) != 0) then
					begin
						mreturn targetField.TagValue
					end
					else
						mreturn new FieldReference() { FieldDef = targetField, QuerySourceKey = mQuerySources.IndexOf(memberTargetParameter.ReferencedQuerySource) }
				end
			end
			else if(node .is. UnaryExpression && node.NodeType == ExpressionType.Convert)
			begin
				data convertNode = (@UnaryExpression)node
				mreturn FindTargetField(convertNode.Operand, node2)
			end

			mreturn ^null
		endmethod

		private method FindConstantValue, @object
			node, @Expression
		proc
			if(node .is. ConstantExpression) then
			begin
				data constNode = (@ConstantExpression)node
				mreturn constNode.Value.ToString()
			end
			else if(node .is. ParameterExpression) then
			begin
				data paramNode = (@ParameterExpression)node
				mreturn new ParameterReference() { Name = paramNode.Name }
			end
			else if(node .is. MethodCallExpression) then
			begin
				data callNode = (@MethodCallExpression)node
				if(callNode.Method.Name == "Property")
				begin
					;;this is where we can do a metadata object lookup for join
					data memberTargetParameter = (@Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)callNode.Arguments[0]
					data memberNameConstant, @ConstantExpression, (@ConstantExpression)callNode.Arguments[1]
					data memberTargetType, @DataObjectMetadataBase, mDataObjects[memberTargetParameter.ReferencedQuerySource]
					data targetField = memberTargetType.GetFieldByName(memberNameConstant.Value.ToString())
					if(((int)targetField.DataType & (int)FieldDataType.TagLiteral) != 0)
					begin
						mreturn targetField.TagValue
					end
				end
			end
			else if(node .is. UnaryExpression && node.NodeType == ExpressionType.Convert)
			begin
				data convertNode = (@UnaryExpression)node
				mreturn FindConstantValue(convertNode.Operand)
			end
			throw new NotImplementedException()
		endmethod

		protected override method VisitExtension, @Expression
			node, @System.Linq.Expressions.Expression 
			endparams
		proc
			if(node.GetType().Name == "NullSafeEqualExpression")
			begin
				data equalExpr = node.GetType().GetProperty("EqualExpression").GetValue(node)
				Visit((@BinaryExpression)equalExpr)
			end
			mreturn node
		endmethod

		private method ProcessWhereClause, void
			left, @Expression
			right, @Expression
			op, WhereClauseOperator
			structure tmpStructure
				fld,a1
			endstructure
		proc
			;;TODO this doesnt deal with 'between'
			data leftTarget = FindTargetField(left, right)
			data rightTarget = FindTargetField(right, left)

			if(leftTarget != ^null && rightTarget != ^null) then
			begin
				if(leftTarget == rightTarget) then
				begin
					mWhereStack.Push(MakePart(leftTarget, rightTarget,op, ^null))
				end
				else
				begin
					;;this is a surprise join
					mOnStack.Push(MakePart(leftTarget, rightTarget,op, ^null))
				end
			end
			else if(leftTarget != ^null) then
			begin

				mWhereStack.Push(MakePart(leftTarget, FindConstantValue(right), op, ^null))
			end
			else if(rightTarget != ^null) then
			begin
				mWhereStack.Push(MakePart(FindConstantValue(left), rightTarget, op, ^null))
			end
			else
				throw new NotImplementedException("where expression must contain at least one field or property expression")
		endmethod


		protected override method VisitBinary, @Expression
			node, @BinaryExpression
		proc
			data op, WhereClauseOperator?, ^null
			data glue, WhereClauseConnector?, ^null
			OpKindFromExpression(node, op, glue)
			if(op != ^null) then
			begin
				;;this should be a composite key match them up by order
				if(node.Left .is. NewExpression && node.Right .is. NewExpression) then
				begin
					data newLeft = (@NewExpression)node.Left
					data newRight = (@NewExpression)node.Right
					data leftArgument = (@NewArrayExpression)newLeft.Arguments.First()
					data rightArgument = (@NewArrayExpression)newRight.Arguments.First()
					data i, int, 0
					for i from 0 thru leftArgument.Expressions.Count - 1 by 1
					begin
						ProcessWhereClause(leftArgument.Expressions[i], rightArgument.Expressions[i], op.Value)
					end

					
				end
				else
					ProcessWhereClause(node.Left, node.Right, op.Value)
			end
			else
			begin
				if(mOnStack.Count > 0) then
				begin
					Visit(node.Left)
					data leftOn = mOnStack.Pop()
					Visit(node.Right)
					if(mOnStack.Count > 0) then
					begin
						data rightOn = mOnStack.Pop()
						mOnStack.Push(MakePart(leftOn, rightOn, op, glue))
					end
					else
					begin
						data rightWhere = mWhereStack.Pop()
						mWhereStack.Push(MakePart(leftOn, rightWhere, op, glue))
					end
				end
				else
				begin
					Visit(node.Left)
					data leftWhere = mWhereStack.Pop()
					Visit(node.Right)
					data rightWhere = mWhereStack.Pop()
					mWhereStack.Push(MakePart(leftWhere, rightWhere, op, glue))
				end

			end

			mreturn node
		endmethod

		private method MakePart, @Object
			left, @Object
			right, @Object
			op, WhereClauseOperator?
			glue, WhereClauseConnector?
		proc
			if(glue != ^null) then
			begin
				mreturn new ConnectorPart() { Left = left, Right = right, Op = glue.Value }
			end
			else if(op != ^null) then
			begin
				mreturn new ExprPart() { Left = left, Right = right, Op = op.Value }
			end
			else
			begin
				throw new NotImplementedException("where clause needs at least one operator")
			end

		endmethod

	endclass

endnamespace
