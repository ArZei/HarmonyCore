import System
import System.Collections.Generic
import System.Collections
import System.Text
import System.Linq
import System.Linq.Expressions
import Synergex.SynergyDE.Select

namespace Harmony.Core.FileIO.Queryable
	;;;  <summary>
	;;;  A default implementation of IQueryable for use with QueryProvider
	;;;  </summary>
	public class Query<T> implements IQueryable<T>, IQueryable, IEnumerable<T>, IOrderedQueryable<T>, IOrderedQueryable
    
		provider, @IQueryProvider
		expression, @Expression
    
		public method Query
			provider, @IQueryProvider 
			endparams
			this(provider, ^null)
		proc
    
		endmethod
    
		public method Query
			provider, @IQueryProvider 
			staticType, @Type 
			endparams
		proc
			if (provider == ^null)
			begin
				throw new ArgumentNullException("Provider")
			end
			this.provider = provider
			this.expression = staticType != ^null ? System.Linq.Expressions.Expression.Constant(this, staticType) : System.Linq.Expressions.Expression.Constant(this)
		endmethod
    
		public method Query
			provider, @QueryProvider 
			expression, @Expression 
			endparams
		proc
			if (provider == ^null)
			begin
				throw new ArgumentNullException("Provider")
			end
			if (expression == ^null)
			begin
				throw new ArgumentNullException("expression")
			end
			;;if (!^typeof(IQueryable<T>).IsAssignableFrom(expression.Type))
			;;begin
			;;	throw new ArgumentOutOfRangeException("expression")
			;;end
			this.provider = provider
			this.expression = expression
		endmethod
    
		public property Expression, @System.Linq.Expressions.Expression
			method get
			proc
				mreturn this.expression
			endmethod
		endproperty
    
		public property ElementType, @Type
			method get
			proc
				mreturn ^typeof(T)
			endmethod
		endproperty
    
		public property Provider, @IQueryProvider
			method get
			proc
				mreturn this.provider
			endmethod
		endproperty
    
		public method GetEnumerator, @IEnumerator<T>
			endparams
		proc
			data enumerable = ((@IEnumerable)this.provider.Execute(this.expression))
			mreturn (enumerable.OfType<T>()).GetEnumerator()
		endmethod
    
		public method IEnumerable.GetEnumerator, @IEnumerator
			endparams
		proc
			mreturn ((@IEnumerable)this.provider.Execute(this.expression)).GetEnumerator()
		endmethod
    
		public override method ToString, string
			endparams
		proc
			if ((this.expression.NodeType == ExpressionType.Constant) && (((@ConstantExpression)this.expression).Value == this)) then
			begin
				mreturn "Query(" + ^typeof(T).ToString() + ")"
			end
			else
			begin
				mreturn this.expression.ToString()
			end
		endmethod
	endclass
endnamespace
