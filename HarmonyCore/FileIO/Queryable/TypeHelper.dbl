import System
import System.Collections.Generic
import System.Text
import System.Linq.Expressions
import System.Reflection


namespace Harmony.Core.FileIO.Queryable

	
;;;  <summary>
;;;  Type related helper methods
;;;  </summary>
	public static class TypeHelper
    
		public static method FindIEnumerable, @Type
			seqType, @Type 
			endparams
		proc
			if ((seqType == ^null) || (seqType == ^typeof(string)))
				mreturn ^null
			if (seqType.IsArray)
				mreturn System.Type.GetType("System.Collections.Generic.IEnumerable`1").MakeGenericType(seqType.GetElementType())
			if (seqType.IsGenericType)
			begin
				begin
					data arg, @Type
					foreach arg in seqType.GetGenericArguments()
					begin
						data ienum, @Type, System.Type.GetType("System.Collections.Generic.IEnumerable`1").MakeGenericType(arg)
						if (ienum.IsAssignableFrom(seqType))
						begin
							mreturn ienum
						end
					end
				end
			end
			data ifaces, [#]@Type, seqType.GetInterfaces()
			if ((ifaces != ^null) && (ifaces.Length > 0))
			begin
				begin
					data iface, @Type
					foreach iface in ifaces
					begin
						data ienum, @Type, FindIEnumerable(iface)
						if (ienum != ^null)
							mreturn ienum
					end
				end
			end
			if ((seqType.BaseType != ^null) && (seqType.BaseType != ^typeof(object)))
			begin
				mreturn FindIEnumerable(seqType.BaseType)
			end
			mreturn ^null
		endmethod
    
		public static method GetSequenceType, @Type
			elementType, @Type 
			endparams
		proc
			;;TODO use typeof instead 
			mreturn System.Type.GetType("System.Collections.Generic.IEnumerable`1").MakeGenericType(elementType)
		endmethod
    
		public static method GetElementType, @Type
			seqType, @Type 
			endparams
		proc
			data ienum, @Type, FindIEnumerable(seqType)
			if (ienum == ^null)
				mreturn seqType
			mreturn ienum.GetGenericArguments()[1]
		endmethod
    
		public static method IsNullableType, boolean
			type, @Type 
			endparams
		proc
			mreturn ((type != ^null) && type.IsGenericType) && (type.GetGenericTypeDefinition() == System.Type.GetType("System.Nullable`1"))
		endmethod
    
		public static method IsNullAssignable, boolean
			type, @Type 
			endparams
		proc
			mreturn !type.IsValueType || IsNullableType(type)
		endmethod
    
		public static method GetNonNullableType, @Type
			type, @Type 
			endparams
		proc
			if (IsNullableType(type))
			begin
				mreturn type.GetGenericArguments()[1]
			end
			mreturn type
		endmethod
    
		public static method GetNullAssignableType, @Type
			type, @Type 
			endparams
		proc
			if (!IsNullAssignable(type))
			begin
				mreturn System.Type.GetType("System.Nullable`1").MakeGenericType(type)
			end
			mreturn type
		endmethod
    
		public static method GetNullConstant, @ConstantExpression
			type, @Type 
			endparams
		proc
			mreturn Expression.Constant(^null, GetNullAssignableType(type))
		endmethod
    
		public static method GetMemberType, @Type
			mi, @MemberInfo 
			endparams
		proc
			data fi, @FieldInfo, ^as(mi, FieldInfo)
			if (fi != ^null)
				mreturn fi.FieldType
			data pi, @PropertyInfo, ^as(mi, PropertyInfo)
			if (pi != ^null)
				mreturn pi.PropertyType
			data ei, @EventInfo, ^as(mi, EventInfo)
			if (ei != ^null)
				mreturn ei.EventHandlerType
			data meth, @MethodInfo, ^as(mi, MethodInfo)
			;;  property getters really
			if (meth != ^null)
				mreturn meth.ReturnType
			mreturn ^null
		endmethod
    
		public static method GetDefault, @Object
			type, @Type 
			endparams
		proc
			data isNullable, boolean, !type.IsValueType || TypeHelper.IsNullableType(type)
			if (!isNullable)
				mreturn Activator.CreateInstance(type)
			mreturn ^null
		endmethod
    
		public static method IsReadOnly, boolean
			member, @MemberInfo 
			endparams
		proc
			using (member.MemberType) select
			(MemberTypes.Field),
			begin
				mreturn (((@FieldInfo)member).Attributes & FieldAttributes.InitOnly) != (FieldAttributes)0
			end
			(MemberTypes.Property),
			begin
				data pi, @PropertyInfo, (@PropertyInfo)member
				mreturn !pi.CanWrite || (pi.GetSetMethod() == ^null)
			end
			(),
			begin
				mreturn true
			end
			endusing
		endmethod
    
		public static method IsInteger, boolean
			type, @Type 
			endparams
		proc
			data nnType, @Type, GetNonNullableType(type)
			using (System.Type.GetTypeCode(nnType)) select
			(TypeCode.SByte, TypeCode.Int16, TypeCode.Int32, TypeCode.Int64, TypeCode.Byte, TypeCode.UInt16, TypeCode.UInt32, TypeCode.UInt64),
			begin
				mreturn true
			end
			(),
			begin
				mreturn false
			end
			endusing
			mreturn false
		endmethod
	endclass



endnamespace
