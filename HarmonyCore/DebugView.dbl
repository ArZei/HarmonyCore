;;;**********************************************************************
;;;
;;; Title:       DebugView.dbl
;;;
;;; Type:        Class
;;;
;;; Description: Allow debug logging from within Symphony
;;;
;;; Author:      Richard C. Morris, Synergex Technology Evangelist
;;;
;;; Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;;;
;;; Redistribution and use in source and binary forms, with or without
;;; modification, are permitted provided that the following conditions are met:
;;;
;;; * Redistributions of source code must retain the above copyright notice,
;;;   this list of conditions and the following disclaimer.
;;;
;;; * Redistributions in binary form must reproduce the above copyright notice,
;;;   this list of conditions and the following disclaimer in the documentation
;;;   and/or other materials provided with the distribution.
;;;
;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;; POSSIBILITY OF SUCH DAMAGE.
;;;
;;;*****************************************************************************
;
;import System
;import System.Collections.Generic
;import System.Linq
;import System.Text
;import System.Diagnostics
;
;import Harmony.Core.Interface
;
;namespace Harmony.Core
;	
;	;;; <summary>
;	;;;  Symphony Core provides access to the Symphony Debug View output log.
;	;;; </summary>
;	;;; <remarks>
;	;;;  The methods within this class allow you to write to the Symphony Debug View output log which can be viewed by any standard windows output viewer.
;	;;; </remarks>
;	public class DebugView
;		
;		private static mShowDebugInfo, Boolean	,false
;		private static mDebugSwitchChecked, Boolean	,false
;		
;		;;; <summary>
;		;;;  Write a line of debug information to the debug output window.
;		;;; </summary>
;		;;; <param name="debugString">Pass the string to display to the debug output window.</param>
;		;;; <remarks>
;		;;; Writes out the passed string to the standard debug output window. The information is
;		;;; only written to the debug output window if the envirnment variable SYMPHONY_DEBUG_VIEW
;		;;; is set to a value of "1".
;		;;; </remarks>
;		public static method Write	,void
;			in req debugString		,string 
;			endparams
;		proc
;			if (mDebugSwitchChecked == false)
;			begin
;				if (mDebugInstance != ^null)
;				begin
;					mShowDebugInfo = mDebugInstance.IsLoggingEnabled()
;				end
;				mDebugSwitchChecked = true
;			end
;			if (mDebugInstance != ^null && mShowDebugInfo == true)
;			begin
;				mDebugInstance.LogMessage(debugString)
;			end
;		endmethod
;		
;		;;; <summary>
;		;;;  Write a line of debug information to the debug output window.
;		;;; </summary>
;		;;; <param name="debugString">Pass the string to display to the debug output window.</param>
;		;;; <param name="doAlways">If true debug output will be performed regardless of the setting of SYMPHONY_DEBUG_DEBUG_VIEW.</param>
;		;;; <remarks>
;		;;; Writes out the passed string to the standard debug output window.  This method ignores the SYMPHONY_DEBUG_DEBUG_VIEW
;		;;; setting.
;		;;; </remarks>
;		public static method Write	,void
;			in req debugString		,string 
;			in req doAlways			,boolean
;			endparams
;		proc
;			if (mDebugSwitchChecked == false)
;			begin
;				if (mDebugInstance != ^null)
;				begin
;					mShowDebugInfo = mDebugInstance.IsLoggingEnabled()
;				end
;				mDebugSwitchChecked = true
;			end
;			if (mDebugInstance != ^null && (mShowDebugInfo == true || (mShowDebugInfo == false && doAlways == true)))
;			begin
;				mDebugInstance.LogMessage(debugString)
;			end
;		endmethod
;		
;		;;; <summary>
;		;;; Send exception details and trace to output window and the Windows event log.
;		;;; </summary>
;		;;; <param name="exp">Pass the exception object to display to the debug output window.</param>
;		;;; <remarks>
;		;;; Writes all the inforamtion about the passed exception object to the standard debug output window. The information is
;		;;; only written to the debug output window if the environment variable SYMPHONY_DEBUG_VIEW
;		;;; is set to a value of "1".  This routine also sends the excepton information to the Windows Event Log regardless of the
;		;;; setting of SYMPHONY_DEBUG_VIEW.
;		;;; </remarks>
;		public static method WriteException	,void
;			in req exp						,@Exception 
;			endparams
;		proc
;			if (mDebugInstance != ^null)
;			begin
;				mDebugInstance.LogException(exp)
;			end
;		endmethod
;		
;		;;; <summary>
;		;;; Send the passed string array details to the output window and the Windows event log.
;		;;; </summary>
;		;;; <param name="outputString">Pass the string array object to write to the event log.</param>
;		;;; <remarks>
;		;;; Writes all passed string array Windows Event Log.
;		;;; </remarks>
;		public static method WriteToEventLog	,void
;			in req outputString					,[#]String
;			endparams
;		proc
;			if (mDebugInstance != ^null)
;			begin
;				mDebugInstance.WriteToEventLog(outputString)
;			end
;		endmethod
;		
;.region "Inject the ability to log messages"
;		
;		private static mDebugInstance				,@IDebugLogging
;
;		;;; <summary>
;		;;; Provide the ability to register your custom debug class which implementes the IDebugLogging interface.
;		;;; </summary>
;		;;; <param name="debugInstance">Class implementing the IDebugLoggin interface.</param>
;		;;; <returns></returns>
;		public static method RegisterDebugLogging	,void
;			in req debugInstance					,@IDebugLogging
;			endparams
;		proc
;			mDebugInstance= debugInstance
;		endmethod
;
;.endregion
;
;	endclass
;	
;endnamespace