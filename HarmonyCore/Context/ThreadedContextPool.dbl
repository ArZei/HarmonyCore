import System
import System.Collections.Generic
import System.Text
import System.Collections.Concurrent
import Harmony.Core
import Microsoft.CodeAnalysis.PooledObjects
import System.Threading.Tasks
import Microsoft.Extensions.DependencyInjection
namespace Harmony.Core.Context

	public class ThreadedContextPool<T(IContextBase, class)> extends ContextFactory<T>
		private mContextPool, @ObjectPool<T>
		protected mXfServerThreadInit, boolean
		public readwrite property ServiceProviderFactory, @IRequestServiceProviderFactory
		public method ThreadedContextPool
			min, int
			xfServerThreadInit, boolean
			serviceProviderFactory, @IRequestServiceProviderFactory
		proc
			this.ServiceProviderFactory = serviceProviderFactory
			mXfServerThreadInit = xfServerThreadInit
			data contextFactory, @Func<IServiceProvider, T>
			contextFactory = lambda(provider) { MakeContextSlow(provider) }
			mContextPool = new ObjectPool<T>(contextFactory, min)
		endmethod
		
		public override method MakeContextAsync, @Task<T>
			sessionId, @string 
			services, @IServiceProvider
			endparams
		proc
			mreturn Task.FromResult(MakeContext(sessionId, services))
		endmethod
		
		public override method MakeContext, T
			sessionId, @string
			services, @IServiceProvider
			endparams
		proc
			mreturn mContextPool.Allocate(services)
		endmethod

		protected virtual method MakeContextSlow, T
			provider, @IServiceProvider
			endparams
		proc
			mreturn ActivatorUtilities.CreateInstance<T>(serviceProviderFactory.MakeScopedProvider(provider), new BackgroundDispatcher(mXfServerThreadInit))
		endmethod

		public override method ReturnContext, void
			context, T 
			endparams
		proc
			mContextPool.Free(context)
		endmethod
	endclass


;	public class ThreadedSessionContextPool<T(IContextBase, class)> extends ContextFactory<T>
;		private sessionLookup, @ConcurrentDictionary<string, T>
;		private contextPool, @ObjectPool<Tuple<T, BackgroundDispatcher>>
;		private dispatchPool, @ObjectPool<BackgroundDispatcher>
;		public method ThreadedSessionContextPool
;			min, int
;			xfServerThreadInit, boolean
;		proc
;			
;		endmethod
;		
;		public override method MakeContextAsync, @Task<T>
;			sessionId, @string 
;			endparams
;		proc
;			throw new System.NotImplementedException()
;		endmethod
;		
;		public override method MakeContext, T
;			sessionId, @string
;			endparams
;		proc
;			throw new System.NotImplementedException()
;		endmethod
;
;		public override method ReturnContext, void
;			context, T 
;			endparams
;		proc
;			throw new System.NotImplementedException()
;		endmethod
;	endclass
endnamespace
