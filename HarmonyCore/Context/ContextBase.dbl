import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Nito.AsyncEx
import System.Threading
import System.Threading.Tasks
import Microsoft.VisualStudio.Threading

namespace Harmony.Core.Context

	public interface IContextBase
		readonly property IsolationLevel, ContextIsolationLevel
    endinterface

    public interface IPooledContextBase
        method InitServices, void
            sp, @IServiceProvider
		endmethod

		method EnsureReady, @Task
		endmethod

		method Recycle, @Task
		endmethod

    endinterface


	public class ThreadedContextBase implements IContextBase, IThreadStickyContext
		protected mDispatcher, @BackgroundDispatcher
		public setprotected property IsolationLevel, ContextIsolationLevel	
		public method ThreadedContextBase
			dispatcher, @BackgroundDispatcher
		proc
			mDispatcher = dispatcher
			IsolationLevel = ContextIsolationLevel.SingleThreaded
		endmethod


		public async method TransitionThread, @Task
		proc
			await mDispatcher.BackgroundThread.Context.Scheduler
		endmethod

		protected method EnsureThread, void
		proc
			if(AsyncContext.Current != mDispatcher.BackgroundThread.Context)
				throw new AccessViolationException("Access from an incorrect thread")
		endmethod
	endclass

	public abstract class PooledContextBase implements IContextBase, IPooledContextBase, IDisposable

		public virtual method Dispose, void
			endparams
		proc
		endmethod

		public setprotected property IsolationLevel, ContextIsolationLevel	

		public virtual method InitServices, void
			sp, @IServiceProvider
		proc
		endmethod

		public virtual method EnsureReady, @Task
		proc
			mreturn Task.FromResult(true)
		endmethod

		public virtual method Recycle, @Task
		proc
			mreturn Task.FromResult(true)
		endmethod
	endclass


	public enum ContextIsolationLevel
		ThreadSafe,
		FreeThreaded,
		SingleThreaded,
		Isolated,
		Process
	endenum

endnamespace
