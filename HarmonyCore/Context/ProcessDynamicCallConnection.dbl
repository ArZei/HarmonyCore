import System
import System.Collections.Generic
import System.Text
import System.Diagnostics
import Newtonsoft.Json
import Newtonsoft.Json.Linq
import System.Threading.Tasks
import StreamJsonRpc
import System.IO
import System.Threading
import System.Linq

namespace Harmony.Core.Context

	public class ProcessDynamicCallConnection implements IDynamicCallConnection
		private static NewLineBytes, [#]Byte, new byte[#] { 10, 13 }
		private mTargetProcess, @Process
		private mMakeReadyTask, @Lazy<Task<JsonRpc>>
		public method ProcessDynamicCallConnection
			startInfo, @ProcessStartInfo
		proc
			mTargetProcess = new Process()
			mTargetProcess.StartInfo = startInfo
			mMakeReadyTask = new Lazy<Task<JsonRpc>>(MakeReadyInternal)
		endmethod

		public virtual method Recycle, @Task
			endparams
		proc
			mreturn Task.FromResult(true)
		endmethod
				
		public virtual method Disconnect, void
			endparams
		proc
			mTargetProcess.Kill()
		endmethod
		
		class ProtocolMessage
			public readwrite property ProtocolSupported, boolean
		endclass

		public virtual async method Call, @Task<[#]@ReturnParameterDefintion>
			name, @string
			args, [#]@ArgumentDataDefinition
		proc
			data jsonRpcConnection = await mMakeReadyTask.Value
			mreturn await jsonRpcConnection.InvokeAsync<[#]@ReturnParameterDefintion>(name, args.OfType<Object>().ToArray())
		endmethod

		private async method MakeReadyInternal, @Task<JsonRpc>
			endparams
		proc
			data readLine, @string
			mTargetProcess.Start()
			mTargetProcess.StartInfo.StandardOutputEncoding = ASCIIEncoding.ASCII
			readLine = await mTargetProcess.StandardOutput.ReadLineAsync()
			Trace.WriteLine(readLine)
			while(!mTargetProcess.HasExited && readLine != "READY")
			begin
				readLine = await mTargetProcess.StandardOutput.ReadLineAsync()
				Trace.WriteLine(readLine)
			end

			if(mTargetProcess.HasExited)
				throw new Exception("process exited during initialization")
			
			data result = JsonRpc.Attach(new StreamWrapper(mTargetProcess.StandardOutput, mTargetProcess.StandardInput), ^null) 
			result.TraceSource = new TraceSource("Client", SourceLevels.All)
			mreturn result
		endmethod
	
		public virtual method MakeReady, @Task
		proc
			mreturn mMakeReadyTask.Value
		endmethod

		private class StreamWrapper extends Stream

			public override method Read, int
				buffer, [#]byte 
				offset, int 
				count, int 
				endparams
			proc
				mreturn mReader.BaseStream.Read(buffer, offset, count)
			endmethod


			private mReader, @StreamReader
			private mWriter, @StreamWriter
			;private mEvent, @AutoResetEvent
			public method StreamWrapper
				reader, @StreamReader
				writer, @StreamWriter
			proc
				mReader = reader
				mWriter = writer
				;mEvent = new AutoResetEvent(false)
			endmethod


			public override property CanRead, Boolean
				method get
				proc
					mreturn mReader.BaseStream.CanRead
				endmethod
			endproperty



			public override method Flush, void
				endparams
			proc
				mWriter.BaseStream.Flush()
			endmethod

			public override method ReadAsync, @Task<int> 
				buffer, [#]byte 
				offset, int 
				count, int 
				token, CancellationToken
				endparams
			proc
				mreturn mReader.BaseStream.ReadAsync(buffer, offset, count, token)
			endmethod

			public override property CanTimeout, boolean
				method get
				proc
					mreturn true
				endmethod
			endproperty


			public override property CanSeek, Boolean
				method get
				proc
					mreturn false
				endmethod
			endproperty



			public override property Position, long
				method get
				proc
					mreturn mReader.BaseStream.Position
				endmethod
				method set
				proc
					mReader.BaseStream.Position = value
				endmethod
			endproperty



			public override property Length, long
				method get
				proc
					mreturn mReader.BaseStream.Length
				endmethod
			endproperty



			public override method Seek, long
				offset, long 
				origin, SeekOrigin 
				endparams
			proc
				throw new NotImplementedException()
			endmethod



			public override property CanWrite, Boolean
				method get
				proc
					mreturn true
				endmethod
			endproperty



			public override method Write, void
				buffer, [#]byte 
				offset, int 
				count, int 
				endparams
			proc
				mWriter.BaseStream.Write(buffer, offset, count)
				mWriter.BaseStream.Flush()
			endmethod



			public override method SetLength, void
				value, long 
				endparams
			proc
				throw new NotImplementedException()
			endmethod
		endclass
	endclass

endnamespace
