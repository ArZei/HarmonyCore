import System.Collections.Concurrent
import System
import System.Collections.Generic
import System.Text
import Microsoft.CodeAnalysis.PooledObjects
import System.Threading.Tasks
import Microsoft.Extensions.DependencyInjection

namespace Harmony.Core.Context

	public class FreeThreadedContextPool<T(IContextBase, class)> extends ContextFactory<T>
		private mSessionLookup, @ConcurrentDictionary<string, T>
		private mContextPool, @ObjectPool<T>
		public method FreeThreadedContextPool
			min, int
		proc
			mSessionLookup = new ConcurrentDictionary<string, T>()
			mContextPool = new ObjectPool<T>(lambda(provider) { SlowMakeContext(provider) }, min)
		endmethod

		public override method MakeContextAsync, @Task<T>
			sessionId, @string 
			provider, @IServiceProvider
			endparams
		proc
			mreturn Task.FromResult(MakeContext(sessionId, provider))
		endmethod
		
		public override method MakeContext, T
			sessionId, @string
			provider, @IServiceProvider
			endparams
		proc
			mreturn mContextPool.Allocate(provider)
		endmethod

		protected virtual method SlowMakeContext, T
			provider, @IServiceProvider
		proc
			mreturn ActivatorUtilities.CreateInstance<T>(provider)
		endmethod

		public override method ReturnContext, void
			context, T
		proc
			mContextPool.Free(context)
		endmethod
	endclass

endnamespace
