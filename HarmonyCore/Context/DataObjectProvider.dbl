import System
import System.Collections.Generic
import System.Text
import Harmony.Core.FileIO
import Harmony.Core.FileIO.Queryable
import System.Linq
import System.Collections.Concurrent
import System.Reflection


namespace Harmony.Core.Context

	public class DataObjectProvider implements IDataObjectProvider
		private typeMapping, @Dictionary<Type, DataObjectMapping>
		private channelManager, @IFileChannelManager
		private queryableMapping, @ConcurrentDictionary<Type, IQueryable>
		private fileIOMapping, @ConcurrentDictionary<Type, IDataObjectIO>
		private static makeFileIOMethod, @MethodInfo
		public method DataObjectProvider
			chanManager, @IFileChannelManager
		proc
			typeMapping = new Dictionary<Type, DataObjectMapping>()
			fileIOMapping = new ConcurrentDictionary<Type, IDataObjectIO>()
			channelManager = chanManager
			data doMapType = ^typeof(DataObjectMapping)
			makeFileIOMethod = doMapType.GetMethod("MakeFileIO")
		endmethod

		public property ChannelManager, @IFileChannelManager
			method get
			proc
				mreturn channelManager
			endmethod
		endproperty

		public method GetFileIO<T(DataObjectBase)>, @IDataObjectIO<T>
		proc
			mreturn (@IDataObjectIO<T>)fileIOMapping.GetOrAdd(^typeof(T), lambda(keyValue) { (@IDataObjectIO)(typeMapping[keyValue].MakeFileIO<T>(channelManager)) })
		endmethod

		public method GetFileInfo<T(DataObjectBase)>, @Tuple<string, FileOpenMode>
		proc
			data typeMap = typeMapping[^typeof(T)]
			mreturn Tuple.Create(typeMap.Filename, typeMap.OpenMode)
		endmethod

		public method AddDataObjectMapping<T(DataObjectBase)>, void
			req in fileName, @string
			req in openMode, FileOpenMode
		proc
			typeMapping.Add(^typeof(T), new DataObjectMapping() { Filename = fileName, OpenMode = openMode })
		endmethod

		public method AddDataObjectMapping<T(DataObjectBase)>, void
			req in mapping, @DataObjectMapping
		proc
			typeMapping.Add(^typeof(T), mapping)
		endmethod

		public method GetFileInfo, @Tuple<string, FileOpenMode>
			entityType, @Type
		proc
			data typeMap = typeMapping[entityType]
			mreturn Tuple.Create(typeMap.Filename, typeMap.OpenMode)
		endmethod

		public method GetFileIO, @IDataObjectIO
			entityType, @Type
		proc
			mreturn fileIOMapping.GetOrAdd(entityType, lambda(keyValue) { (@IDataObjectIO)(makeFileIOMethod.MakeGenericMethod(new Type[#] { entityType }).Invoke(typeMapping[keyValue], new Object[#] { channelManager })) })
		endmethod
	endclass

	;;inherit from this to replace the kind of queryable or fileio that gets used
	public class DataObjectMapping
		public Filename, @string
		public OpenMode, FileOpenMode

		public virtual method MakeFileIO<T(DataObjectBase)>, @IDataObjectIO<T>
			channelManager, @IFileChannelManager
		proc
			mreturn new IsamDataObjectIO<T>(channelManager, Filename, OpenMode)
		endmethod
	endclass
endnamespace
