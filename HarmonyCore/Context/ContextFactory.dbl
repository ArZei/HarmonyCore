import System
import System.Collections.Generic
import System.Text
import System.Threading.Tasks
import Microsoft.Extensions.DependencyInjection


namespace Harmony.Core.Context

	public abstract class ContextFactory<T(IContextBase, class)> implements IContextFactory<T>
		public setprotected property IsSessionSticky, boolean
		
		;;this should always be called with ConfigureAwait(false) to ensure we end up on the right thread after the task is awaited	
		public method MakeContext, T
			services, @IServiceProvider
		proc
			mreturn MakeContext(^null, services)
		endmethod
		
		public abstract method MakeContext, T
			sessionId, @string
			services, @IServiceProvider
		proc
		endmethod
		
		public method MakeContextAsync, @Task<T>
			services, @IServiceProvider
		proc
			mreturn MakeContextAsync(^null, services)
		endmethod
		
		public abstract method MakeContextAsync, @Task<T>
			sessionId, @string
			services, @IServiceProvider
		proc
		endmethod
		
		public abstract method ReturnContext, void
			context, T
		proc
			
		endmethod
	endclass

	public interface IRequestServiceProviderFactory
		method MakeScopedProvider, @IServiceProvider
			baseProvider, @IServiceProvider
		endmethod
	endinterface

	public class SimpleRequestServiceProviderFactory implements IRequestServiceProviderFactory
		public readwrite property Services, @IServiceCollection

		class NestedServiceProvider implements IServiceProvider, IDisposable
			public InnerProvider, @IServiceProvider
			public MainProvider, @IServiceProvider
			public virtual method GetService, @object
				serviceType, @Type 
				endparams
			proc
				data mainResult = MainProvider.GetService(serviceType)
				if(mainResult == ^null) then
					mreturn InnerProvider.GetService(serviceType)
				else
					mreturn mainResult
			endmethod
			
			public virtual method Dispose, void
				endparams
			proc
				if(InnerProvider .is. IDisposable)
					((@IDisposable)InnerProvider).Dispose()
				if(MainProvider .is. IDisposable)
					((@IDisposable)MainProvider).Dispose()
			endmethod
		endclass

		public method SimpleRequestServiceProviderFactory
		proc
			Services = new ServiceCollection()
		endmethod

		public method MakeScopedProvider, @IServiceProvider
			baseProvider, @IServiceProvider 
			endparams
		proc
			data serviceProvider = new NestedServiceProvider() { InnerProvider = baseProvider, MainProvider = (@IServiceProvider)Services.BuildServiceProvider() }
			mreturn (@IServiceProvider)serviceProvider
		endmethod
	endclass

endnamespace
