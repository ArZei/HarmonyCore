import System
import System.Collections.Generic
import System.Text
import Renci.SshNet
import Renci.SshNet.Common
import System.IO
import Newtonsoft.Json
import System.Diagnostics
import System.Threading.Tasks
import StreamJsonRpc

namespace Harmony.Core.Context

	public class SSHDynamicCallConnection implements IDynamicCallConnection
		private static NewLineBytes, [#]Byte, new byte[#] { 10, 13 }
		private mTargetConnection, @SshClient
		private mTargetShell, @ShellStream
        private mLaunchCommand, @string
		private mMakeReadyTask, @Lazy<Task<JsonRpc>>
		private mTargetOS, RemoteTargetOS
		public method SSHDynamicCallConnection
			targetOS, RemoteTargetOS
			startInfo, @ConnectionInfo
			command, @string
		proc
			mTargetOS = targetOS
			mLaunchCommand = command
            mTargetConnection = new SshClient(startInfo)
            mMakeReadyTask = new Lazy<Task<JsonRpc>>(MakeReadyInternal)
		endmethod
		
		public virtual method Recycle, @Task
			endparams
		proc
			mreturn Task.FromResult(true)
		endmethod
				
		public virtual method Disconnect, void
			endparams
		proc
			mTargetConnection.Disconnect()
		endmethod

		public virtual async method Call, @Task<[#]@ReturnParameterDefintion>
			name, @string
			args, [#]@ArgumentDataDefinition
		proc
			data jsonRpcConnection = await mMakeReadyTask.Value
			mreturn await jsonRpcConnection.InvokeAsync<[#]@ReturnParameterDefintion>(name, args)
		endmethod

		public async virtual method MakeReadyInternal, @Task<JsonRpc>
			endparams
		proc
			mTargetConnection.Connect()
			mTargetShell = mTargetConnection.CreateShellStream("vt220", 0, 0,0,0, 1024 * 64)
			data reader = new StreamReader(mTargetShell) 
			data writer = new StreamWriter(mTargetShell)
			data guidString = Guid.NewGuid().ToString()
			
			if(mTargetOS == RemoteTargetOS.VMS) then
			begin
				await reader.ReadLineAsync()
				await writer.WriteAsync('WRITE SYS$OUTPUT "' + guidString +  '"' + %char(13) + %char(10))
			end
			else
			begin
				await reader.ReadLineAsync()
				await writer.WriteAsync('echo "' + guidString +  '"' + %char(13) + %char(10))
			end

			data readLine = await reader.ReadLineAsync()
			while(readLine != ^null && !readLine.Contains(guidString))
			begin
				readLine = await reader.ReadLineAsync()
			end
			
			await writer.WriteLineAsync(mLaunchCommand)
			
			while(readLine != ^null && readLine.Trim() != "READY")
			begin
				readLine = await reader.ReadLineAsync()
			end
			
			mreturn JsonRpc.Attach(mTargetShell, ^null) 
		endmethod
	
	
        public virtual method MakeReady, @Task
        proc
            mreturn mMakeReadyTask.Value
        endmethod

	endclass

endnamespace
