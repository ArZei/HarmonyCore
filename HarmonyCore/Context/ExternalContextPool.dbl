import System
import System.Collections.Generic
import System.Text

import Microsoft.Extensions.DependencyInjection

namespace Harmony.Core.Context

	public class ExternalContextPool<T(IContextBase, class)> extends FreeThreadedContextPool<T>
		private mStartInfo, @System.Diagnostics.ProcessStartInfo
		
		public method ExternalContextPool
			targetExe, @string
			targetArguments, @string
			targetDirectory, @string
			environmentVariables, @IEnumerable<KeyValuePair<string, string>>
			min, int
			endparams
			parent(min)
		proc
			mStartInfo = new System.Diagnostics.ProcessStartInfo()
			mStartInfo.FileName = targetExe
			mStartInfo.WorkingDirectory = targetDirectory
			mStartInfo.CreateNoWindow = true
			mStartInfo.UseShellExecute = false
			if(environmentVariables != ^null)
			begin
				data envVar, KeyValuePair<string, string>
				foreach envVar in environmentVariables
					mStartInfo.EnvironmentVariables.Add(envVar.Key, envVar.Value)
			end

			mStartInfo.Arguments = targetArguments
			mStartInfo.RedirectStandardOutput = true
			mStartInfo.RedirectStandardInput = true
		endmethod
		
		protected override method SlowMakeContext, T
			provider, @IServiceProvider
		proc
			data callConection = new ProcessDynamicCallConnection(mStartInfo)
			callConection.Connect()
			mreturn ActivatorUtilities.CreateInstance<T>(provider, callConection)
		endmethod
	endclass

endnamespace
