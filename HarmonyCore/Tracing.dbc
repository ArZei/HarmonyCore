
import System
import System.Collections.Generic
import System.Text

namespace Harmony.Core
	
	;;; <summary>
	;;;  Class to "trace" the calls througout the server execution process.  This class should be created new for each call that is made.
	;;;  A call to GetCrashTrace() will return a collection of StringResponse_Data tracelines for the last call made.
	;;; </summary>
	public class Tracing
		
		private static mTraceInstance	,@Tracing
		
		public static property TraceInstance, @Tracing
			method get
			proc
				if (mTraceInstance == ^null)
					mTraceInstance = new Tracing()
				mreturn mTraceInstance
			endmethod
		endproperty
		
		private mClientID	,String
		
		internal property ClientID, String
			method get
			proc
				mreturn mClientID
			endmethod
			method set
			proc
				mClientID = value
			endmethod
		endproperty
		
		public method Tracing
			endparams
		proc
			mTraceList = new List<string>()
		endmethod
		
		private mTraceList	,@List<string>
		
		public property TraceList, @List<string>
			method get
			proc
				mreturn mTraceList
			endmethod
			method set
			proc
				mTraceList = value
			endmethod
		endproperty
		
		public method Write	,void
			in req message	,String
			endparams
		proc
			;;store the passed message
			ConfigureTraceLine(mTraceList, message)
			Harmony.Core.DebugView.Write(message)
		endmethod
		
		public method Write	,void
			in req message	,String
			in req doAlways	,boolean
			endparams
		proc
			;;store the passed message
			ConfigureTraceLine(mTraceList, message)
			Harmony.Core.DebugView.Write(message, doAlways)
		endmethod
		
		public method WriteException	,void
			in req ex					,@Exception
			endparams
		proc
			if (ex != ^null)
			begin
				;;pass exception on to the core logger
				Harmony.Core.DebugView.WriteException(ex)
			
				;;add exception details to the trace
				if (ex.StackTrace != ^null)
				begin
					data tmpString	,string	,ex.StackTrace.ToString().Replace("&", " ")
					ConfigureTraceLine(mTraceList, tmpString)
				end
			end
			
		endmethod
		
		
		;;format just the date and time
		public static property FormatDateTimeNoID	,string
			method get
				record synDateTime
					synYear		,d4
					synMonth	,d2
					synDay		,d2
					synHour		,d2
					synMinute	,d2
					synSecond	,d2
					synPortion	,d6
				endrecord
			proc
				synDateTime = %datetime
.ifdef D_PORTABLE
				mreturn string.Format('Date="{0}/{1}/{2}" Time="{3}:{4}:{5}" Split="{6}"', synDay, synMonth, synYear, synHour, synMinute, synSecond, synPortion)
.else
				mreturn string.Format('ThreadID="{0}" Date="{1}/{2}/{3}" Time="{4}:{5}:{6}" Split="{7}"', System.Threading.Thread.CurrentThread.ManagedThreadId, synDay, synMonth, synYear, synHour, synMinute, synSecond, synPortion)
.endc
			endmethod
		endproperty

		public method ConfigureTraceLine	,void
			in req traceCollection				,@List<string>
			in req message						,string
			endparams
		proc
			traceCollection.Add(Tracing.FormatDateTimeNoID + ' Message="' + message + '"')
			mTraceList = traceCollection
			mreturn
		endmethod


.region "MyRegion"
		
.ifndef D_PORTABLE

		;;
		;;this static method is a to enable the trace class to write out to the "service" log file and
		;;the individual "server" logs.  this log is always written to the file as it happens.
		;;

		public static method WriteToServerLog, void
			in req message						,string
			endparams
		proc

			data chan	,i4	,0
			data times	,i4	,0
			repeat
			begin
				try
				begin
					data length		,i4
					data tmpFolder	,a1000
					getlog("SYMPHONY_BRIDGE_LOGGING_FOLDER", tmpFolder, length)

					open(chan = 0, a, %atrim(tmpFolder) + "\MasterServerLog.log")

					writes(chan, Tracing.FormatDateTimeNoID + ' Message="' + message + '"')

					exitloop

				end
				catch (e, @Exception)
				begin
					if (times > 10)
						exitloop	;not much we can do
					sleep 0.1
					incr times
				end
				finally
				begin
					if (chan)
						if chopen(chan)
							close(chan)
					clear chan
				end
				endtry
			end
		endmethod

.endc


.endregion
	endclass
	
endnamespace
