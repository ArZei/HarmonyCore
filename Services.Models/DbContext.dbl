;;*****************************************************************************
;;
;; Title:       DbContext.dbl
;;
;; Description: OData DbContext class
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Microsoft.EntityFrameworkCore
import System.Linq.Expressions
import Services.Models

namespace Services.Models

    ;;; <summary>
    ;;;
    ;;; </summary>
    public class DbContext extends Microsoft.EntityFrameworkCore.DbContext

        ;;; <summary>
        ;;; Construct a new DbContext.
        ;;; </summary>
        public method DbContext
            options, @DbContextOptions<DbContext>
            endparams
            parent(options)
        proc

        endmethod

        ;;; <summary>
        ;;; Exposes Customer data.
        ;;; </summary>
        public readwrite property Customers, @DbSet<Customer>

        ;;; <summary>
        ;;; Exposes Item data.
        ;;; </summary>
        public readwrite property Items, @DbSet<Item>

        ;;; <summary>
        ;;; Exposes Order data.
        ;;; </summary>
        public readwrite property Orders, @DbSet<Order>

        ;;; <summary>
        ;;; Exposes OrderItem data.
        ;;; </summary>
        public readwrite property OrderItems, @DbSet<OrderItem>

        ;;; <summary>
        ;;; Exposes Vendor data.
        ;;; </summary>
        public readwrite property Vendors, @DbSet<Vendor>

        ;;; <summary>
        ;;;
        ;;; </summary>
        protected override method OnModelCreating, void
            parm, @ModelBuilder
        proc
            parm.Ignore(^typeof(AlphaDesc))
            parm.Ignore(^typeof(DataObjectMetadataBase))

.region "Composite key definitions"

            ;;Entities with a single primary key segment have the key declared to EF via a
            ;;{Key} attribute on the appropriate property in the data model, but only one {key}
            ;;attribute can be used in a class, so keys with multiple segments are defined
            ;;using the "Fluent API" here.

            parm.Entity<OrderItem>().HasKey("OrderNumber","ItemNumber")

.endregion

.region "Tag filtering"

            ;;This will currently only work for single field==value tags.

.endregion

.region "Entity Relationships"

            data existingRelations = new System.Collections.Generic.HashSet<string>()

            ;;--------------------------------------
            ;; Relationships from CUSTOMER

            if(!(existingRelations.Contains("Customer.REL_Order") || existingRelations.Contains("Order.REL_Customer")))
            begin
                ;; CUSTOMER.CUSTOMER_NUMBER (one) --> (many) --> (one) ORDER.CUSTOMER_NUMBER
                ;;    Type          : D
                ;;    From segments : CUSTOMER_NUMBER(D6) 
                ;;    To segments   : CUSTOMER_NUMBER(D6) 

                parm.Entity(^typeof(Customer))
                &    .HasMany(^typeof(Order),"REL_Orders")
                &    .WithOne("REL_Customer")
                &    .HasForeignKey("KEY_CUSTOMER_NUMBER")
                &    .HasPrincipalKey("KEY_CUSTOMER_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("Customer.REL_Order"))
                    existingRelations.Add("Customer.REL_Order")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("Order.REL_Customer"))
                    existingRelations.Add("Order.REL_Customer")
            end

            if(!(existingRelations.Contains("Customer.REL_Item") || existingRelations.Contains("Item.REL_Customer")))
            begin
                ;; CUSTOMER.FAVORITE_ITEM (one) --> (one) ITEM.ITEM_NUMBER
                ;;    Type          : C
                ;;    From segments : FAVORITE_ITEM(D6) 
                ;;    To segments   : ITEM_NUMBER(D6) 

                parm.Entity(^typeof(Customer))
                &    .HasOne(^typeof(Item),"REL_Item")
                &    .WithOne(^null)
                &    .HasForeignKey(^typeof(Customer),"KEY_FAVORITE_ITEM")
                &    .HasPrincipalKey(^typeof(Item),"KEY_ITEM_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("Customer.REL_Item"))
                    existingRelations.Add("Customer.REL_Item")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("Item.REL_Customer"))
                    existingRelations.Add("Item.REL_Customer")
            end

            ;;--------------------------------------
            ;; Relationships from ITEM

            if(!(existingRelations.Contains("Item.REL_Vendor") || existingRelations.Contains("Vendor.REL_Item")))
            begin
                ;; ITEM.VENDOR_NUMBER (many) --> (one) --> (many) VENDOR.VENDOR_NUMBER
                ;;    Type          : A
                ;;    From segments : VENDOR_NUMBER(D6) 
                ;;    To segments   : VENDOR_NUMBER(D6) 

                parm.Entity(^typeof(Item))
                &    .HasOne(^typeof(Vendor),"REL_Vendor")
                &    .WithMany("REL_Items")
                &    .HasForeignKey("KEY_VENDOR_NUMBER")
                &    .HasPrincipalKey("KEY_VENDOR_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("Item.REL_Vendor"))
                    existingRelations.Add("Item.REL_Vendor")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("Vendor.REL_Item"))
                    existingRelations.Add("Vendor.REL_Item")
            end

            if(!(existingRelations.Contains("Item.REL_OrderItem") || existingRelations.Contains("OrderItem.REL_Item")))
            begin
                ;; ITEM.ITEM_NUMBER (one) --> (many) --> (one) ORDER_ITEM.ITEM_ORDERED
                ;;    Type          : D
                ;;    From segments : ITEM_NUMBER(D6) 
                ;;    To segments   : ITEM_ORDERED(D6) 

                parm.Entity(^typeof(Item))
                &    .HasMany(^typeof(OrderItem),"REL_OrderItems")
                &    .WithOne("REL_Item")
                &    .HasForeignKey("KEY_ITEM_ORDERED")
                &    .HasPrincipalKey("KEY_ITEM_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("Item.REL_OrderItem"))
                    existingRelations.Add("Item.REL_OrderItem")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("OrderItem.REL_Item"))
                    existingRelations.Add("OrderItem.REL_Item")
            end

            ;;--------------------------------------
            ;; Relationships from ORDER

            if(!(existingRelations.Contains("Order.REL_OrderItem") || existingRelations.Contains("OrderItem.REL_Order")))
            begin
                ;; ORDER.ORDER_NUMBER (one) --> (many) --> (one) ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM
                ;;    Type          : D
                ;;    From segments : ORDER_NUMBER(D6) 
                ;;    To segments   : ORDER_NUMBER(D6) 

                parm.Entity(^typeof(Order))
                &    .HasMany(^typeof(OrderItem),"REL_OrderItems")
                &    .WithOne("REL_Order")
                &    .HasForeignKey("KEY_ORDER_NUMBER_AND_LINE_ITEM")
                &    .HasPrincipalKey("KEY_ORDER_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("Order.REL_OrderItem"))
                    existingRelations.Add("Order.REL_OrderItem")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("OrderItem.REL_Order"))
                    existingRelations.Add("OrderItem.REL_Order")
            end

            if(!(existingRelations.Contains("Order.REL_Customer") || existingRelations.Contains("Customer.REL_Order")))
            begin
                ;; ORDER.CUSTOMER_NUMBER (many) --> (one) --> (many) CUSTOMER.CUSTOMER_NUMBER
                ;;    Type          : A
                ;;    From segments : CUSTOMER_NUMBER(D6) 
                ;;    To segments   : CUSTOMER_NUMBER(D6) 

                parm.Entity(^typeof(Order))
                &    .HasOne(^typeof(Customer),"REL_Customer")
                &    .WithMany("REL_Orders")
                &    .HasForeignKey("KEY_CUSTOMER_NUMBER")
                &    .HasPrincipalKey("KEY_CUSTOMER_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("Order.REL_Customer"))
                    existingRelations.Add("Order.REL_Customer")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("Customer.REL_Order"))
                    existingRelations.Add("Customer.REL_Order")
            end

            ;;--------------------------------------
            ;; Relationships from ORDER_ITEM

            if(!(existingRelations.Contains("OrderItem.REL_Order") || existingRelations.Contains("Order.REL_OrderItem")))
            begin
                ;; ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM (many) --> (one) --> (many) ORDER.ORDER_NUMBER
                ;;    Type          : A
                ;;    From segments : ORDER_NUMBER(D6) 
                ;;    To segments   : ORDER_NUMBER(D6) 

                parm.Entity(^typeof(OrderItem))
                &    .HasOne(^typeof(Order),"REL_Order")
                &    .WithMany("REL_OrderItems")
                &    .HasForeignKey("KEY_ORDER_NUMBER_AND_LINE_ITEM")
                &    .HasPrincipalKey("KEY_ORDER_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("OrderItem.REL_Order"))
                    existingRelations.Add("OrderItem.REL_Order")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("Order.REL_OrderItem"))
                    existingRelations.Add("Order.REL_OrderItem")
            end

            if(!(existingRelations.Contains("OrderItem.REL_Item") || existingRelations.Contains("Item.REL_OrderItem")))
            begin
                ;; ORDER_ITEM.ITEM_ORDERED (many) --> (one) --> (many) ITEM.ITEM_NUMBER
                ;;    Type          : A
                ;;    From segments : ITEM_ORDERED(D6) 
                ;;    To segments   : ITEM_NUMBER(D6) 

                parm.Entity(^typeof(OrderItem))
                &    .HasOne(^typeof(Item),"REL_Item")
                &    .WithMany("REL_OrderItems")
                &    .HasForeignKey("KEY_ITEM_ORDERED")
                &    .HasPrincipalKey("KEY_ITEM_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("OrderItem.REL_Item"))
                    existingRelations.Add("OrderItem.REL_Item")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("Item.REL_OrderItem"))
                    existingRelations.Add("Item.REL_OrderItem")
            end

            ;;--------------------------------------
            ;; Relationships from VENDOR

            if(!(existingRelations.Contains("Vendor.REL_Item") || existingRelations.Contains("Item.REL_Vendor")))
            begin
                ;; VENDOR.VENDOR_NUMBER (one) --> (many) --> (one) ITEM.VENDOR_NUMBER
                ;;    Type          : D
                ;;    From segments : VENDOR_NUMBER(D6) 
                ;;    To segments   : VENDOR_NUMBER(D6) 

                parm.Entity(^typeof(Vendor))
                &    .HasMany(^typeof(Item),"REL_Items")
                &    .WithOne("REL_Vendor")
                &    .HasForeignKey("KEY_VENDOR_NUMBER")
                &    .HasPrincipalKey("KEY_VENDOR_NUMBER")

                ;;Declare the outbound relationship
                if(!existingRelations.Contains("Vendor.REL_Item"))
                    existingRelations.Add("Vendor.REL_Item")

                ;;Declare the reciprocal inbound relationship
                if(!existingRelations.Contains("Item.REL_Vendor"))
                    existingRelations.Add("Item.REL_Vendor")
            end

.endregion

            parent.OnModelCreating(parm)

        endmethod

    endclass

endnamespace