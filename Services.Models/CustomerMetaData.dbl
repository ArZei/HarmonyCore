;;*****************************************************************************
;;
;; Title:       CustomerMetaData.dbl
;;
;; Description: Defines meta data associated with a Customer model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    .include "CUSTOMERS" repository, public structure="strCustomer", end

    ;;; <summary>
    ;;; Exposes metadata relating to the Customer model class.
    ;;; </summary>
    public partial class CustomerMetadata extends DataObjectMetadataBase

        ;;; <summary>
        ;;; Constructs an new CustomerMetadata object.
        ;;; </summary>
        public method CustomerMetadata
        proc
            RPSStructureName = "CUSTOMERS"
            RPSStructureSize = ^size(strCustomer)

            AddFieldInfo("CustomerNumber", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("Name", "ALPHA", 30, 7, 0, false)
            AddFieldInfo("Street", "ALPHA", 25, 37, 0, false)
            AddFieldInfo("City", "ALPHA", 20, 62, 0, false)
            AddFieldInfo("State", "ALPHA", 2, 82, 0, false)
            AddFieldInfo("ZipCode", "DECIMAL", 9, 84, 0, false)
            AddFieldInfo("Contact", "ALPHA", 25, 93, 0, false)
            AddFieldInfo("Phone", "DECIMAL", 10, 118, 0, false, new SynergyDecimalConverter.LiteralFormatter("(XXX) XXX-XXXX"))
            AddFieldInfo("Fax", "DECIMAL", 10, 128, 0, false, new SynergyDecimalConverter.LiteralFormatter("(XXX) XXX-XXXX"))
            AddFieldInfo("FavoriteItem", "DECIMAL", 6, 138, 0, false)
            AddFieldInfo("PaymentTermsCode", "ALPHA", 2, 144, 0, false)
            AddFieldInfo("TaxId", "DECIMAL", 9, 146, 0, false)
            AddFieldInfo("CreditLimit", "IMPLIED", 7, 155, 02, false)
            AddFieldInfo("REL_Orders", "COLLECTION", 0, 0, 0, false)
            AddFieldInfo("REL_Item", "DATAOBJECT", 0, 0, 0, false)

            AddKeyInfo(0, "CustomerNumber")
            AddKeyInfo(1, "State")
            AddKeyInfo(2, "ZipCode")
            AddKeyInfo(3, "PaymentTermsCode")

            data CustomerNumber_KeyParts = new FieldDataDefinition[1]
            CustomerNumber_KeyParts[1] = GetFieldByName("CustomerNumber")
            AddFieldInfo("KEY_CUSTOMER_NUMBER", "COMPOSITE", 0, 0, 0, false, ^null, ^null, CustomerNumber_KeyParts)

            data State_KeyParts = new FieldDataDefinition[1]
            State_KeyParts[1] = GetFieldByName("State")
            AddFieldInfo("KEY_STATE", "COMPOSITE", 0, 0, 0, false, ^null, ^null, State_KeyParts)

            data Zip_KeyParts = new FieldDataDefinition[1]
            Zip_KeyParts[1] = GetFieldByName("ZipCode")
            AddFieldInfo("KEY_ZIP", "COMPOSITE", 0, 0, 0, false, ^null, ^null, Zip_KeyParts)

            data PaymentTerms_KeyParts = new FieldDataDefinition[1]
            PaymentTerms_KeyParts[1] = GetFieldByName("PaymentTermsCode")
            AddFieldInfo("KEY_PAYMENT_TERMS", "COMPOSITE", 0, 0, 0, false, ^null, ^null, PaymentTerms_KeyParts)

        endmethod

        ;;; <summary>
        ;;; Returns a new Customer object containing data from a record and a GRFA.
        ;;; The related data properties (REL_Orders and REL_Item) will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Customer object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new Customer((strCustomer)dataArea) { GlobalRFA = grfa }
        endmethod

        ;;; <summary>
        ;;; Returns a new Customer object containing data from a record and a GRFA.
        ;;; The related data properties (REL_Orders and REL_Item) will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Customer object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties (REL_Orders and REL_Item) to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newCustomer = new Customer((strCustomer)dataArea) { GlobalRFA = grfa }
            data joinedObject, KeyValuePair<String, Object>
            foreach joinedObject in joinedObjects
            begin
                using joinedObject.Key select
                ("REL_Orders"),
                    newCustomer.REL_Orders = (@ICollection<Order>)joinedObject.Value
                ("REL_Item"),
                    newCustomer.REL_Item = (@Item)joinedObject.Value
                endusing
            end

            mreturn newCustomer

        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                CustomerNumber, D6
            endrecord
            stack record key1
                State, A2
            endrecord
            stack record key2
                ZipCode, D9
            endrecord
            stack record key3
                PaymentTermsCode, A2
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.CustomerNumber, "CustomerNumber", parts))<6)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            (1),
            begin
                if((segValueLength=KeyValueHelper(key1.State, "State", parts))<2)
                    mreturn key1(1:startPos+segValueLength)
                mreturn key1
            end
            (2),
            begin
                if((segValueLength=KeyValueHelper(key2.ZipCode, "ZipCode", parts))<9)
                    mreturn key2(1:startPos+segValueLength)
                mreturn key2
            end
            (3),
            begin
                if((segValueLength=KeyValueHelper(key3.PaymentTermsCode, "PaymentTermsCode", parts))<2)
                    mreturn key3(1:startPos+segValueLength)
                mreturn key3
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in CustomerMetadata.FormatKeyLiteral",keyNumber))

        endmethod

    endclass

endnamespace
