;;*****************************************************************************
;;
;; Title:       OrderMetaData.dbl
;;
;; Description: Defines meta data associated with a Order model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    .include "ORDERS" repository, public structure="strOrder", end

    ;;; <summary>
    ;;; Exposes metadata relating to the Order model class.
    ;;; </summary>
    public partial class OrderMetadata extends DataObjectMetadataBase
        
        ;;; <summary>
        ;;; Constructs an new OrderMetadata object.
        ;;; </summary>
        public method OrderMetadata
        proc
            RPSStructureName = "ORDERS"
            RPSStructureSize = ^size(strOrder)

            AddFieldInfo("OrderNumber", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("CustomerNumber", "DECIMAL", 6, 7, 0, false)
            AddFieldInfo("PlacedBy", "ALPHA", 25, 13, 0, false)
            AddFieldInfo("CustomerReference", "ALPHA", 25, 38, 0, false)
            AddFieldInfo("PaymentTermsCode", "ALPHA", 2, 63, 0, false)
            AddFieldInfo("DateOrdered", "DATE", 8, 65, 0, false, new SynergyDecimalDateConverter.LiteralFormatter("FORMAT:YYYYMMDD"))
            AddFieldInfo("DateCompleted", "DATE", 8, 73, 0, false, new SynergyDecimalDateConverter.LiteralFormatter("FORMAT:YYYYMMDD"))
            AddFieldInfo("REL_OrderItems", "COLLECTION", 0, 0, 0, false)
            AddFieldInfo("REL_CustomerNumber", "DATAOBJECT", 0, 0, 0, false)
            AddFieldInfo("REL_OrderItemsOverlays", "COLLECTION", 0, 0, 0, false)

            AddKeyInfo(0, "OrderNumber")
            AddKeyInfo(1, "CustomerNumber")
            AddKeyInfo(2, "DateOrdered")
            AddKeyInfo(3, "DateCompleted")

        endmethod
    
        ;;; <summary>
        ;;; Returns a new Order object containing data from a record and a GRFA.
        ;;; The related data properties (REL_OrderItems, REL_CustomerNumber and REL_OrderItemsOverlays) will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Order object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new Order((strOrder)dataArea) { GlobalRFA = grfa }
        endmethod

        ;;; <summary>
        ;;; Returns a new Order object containing data from a record and a GRFA.
        ;;; The related data properties (REL_OrderItems, REL_CustomerNumber and REL_OrderItemsOverlays) will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Order object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties (REL_OrderItems, REL_CustomerNumber and REL_OrderItemsOverlays) to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newOrder = new Order((strOrder)dataArea) { GlobalRFA = grfa }
            data joinedObject, KeyValuePair<String, Object>
            foreach joinedObject in joinedObjects
            begin
                using joinedObject.Key select
                ("REL_OrderItems"), 
                    newOrder.REL_OrderItems = (@ICollection<OrderItem>)joinedObject.Value
                ("REL_CustomerNumber"), 
                    newOrder.REL_CustomerNumber = (@Customer)joinedObject.Value
                ("REL_OrderItemsOverlays"), 
                    newOrder.REL_OrderItemsOverlays = (@ICollection<OrderItemsOverlay>)joinedObject.Value
                endusing
            end

            mreturn newOrder

        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                OrderNumber, D6
            endrecord
            stack record key1
                CustomerNumber, D6
            endrecord
            stack record key2
                DateOrdered, D8
            endrecord
            stack record key3
                DateCompleted, D8
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.OrderNumber, "OrderNumber", parts))<6)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            (1),
            begin
                if((segValueLength=KeyValueHelper(key1.CustomerNumber, "CustomerNumber", parts))<6)
                    mreturn key1(1:startPos+segValueLength)
                mreturn key1
            end
            (2),
            begin
                if((segValueLength=KeyValueHelper(key2.DateOrdered, "DateOrdered", parts))<8)
                    mreturn key2(1:startPos+segValueLength)
                mreturn key2
            end
            (3),
            begin
                if((segValueLength=KeyValueHelper(key3.DateCompleted, "DateCompleted", parts))<8)
                    mreturn key3(1:startPos+segValueLength)
                mreturn key3
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in OrderMetadata.FormatKeyLiteral",keyNumber))

        endmethod

    endclass

endnamespace
