;;*****************************************************************************
;;
;; Title:       Test.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure TEST and from the data file DAT:test.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace Services.Models

    public partial class Test extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strTest
        private mOriginalSynergyData, strTest

        private static sMetadata, @TestMetadata

.region "Constructors"

        static method Test
        proc
            sMetadata = new TestMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Test), sMetadata)
        endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Test
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Test
            required in inData, strTest
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; ID
        ;;; </summary>
        {Key}
        public property Id, long
            method get
            proc
                mreturn (long)mSynergyData.id
            endmethod
            method set
            proc
                mSynergyData.id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alpha Y/N field (boolean)
        ;;; </summary>
        {Required(ErrorMessage="Alpha Y/N field (boolean) is required. ")}
        {StringLength(1, ErrorMessage="Alpha Y/N field (boolean) cannot exceed 1 characters. ")}
        public property YesNo, boolean
            method get
            proc
                mreturn (boolean)SynergyAlphaYnBooleanConverter.Convert(mSynergyData.yes_no, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.yes_no = (A)SynergyAlphaYnBooleanConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod

        ;;; <summary>
        ;;;
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[2]
        endmethod

.endregion

.region "Properties to represent keys"

        ;;Access keys

        private _KEY_ID, string, ""
        public readonly property KEY_ID, string, ""


.endregion

    endclass

endnamespace
