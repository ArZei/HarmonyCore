import System
import System.Runtime.Loader
import System.Collections.Generic
import System.Reflection
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.Utility
import System.ComponentModel
import System.IO
import Microsoft.Extensions.DependencyInjection
import System.Diagnostics
namespace Harmony.Core

	public class AssemblyLoadContextPool<T(IContextBase, class), TIMPL> extends IsolatedContextPool<T>
		private AssemblyLoadContexts, @List<AssemblyLoadContext>, new List<AssemblyLoadContext>()
		
		public method AssemblyLoadContextPool
			min, int
			endparams
			parent(min)
		proc
		endmethod
		
		protected override method SlowMakeContext, T
			provider, @IServiceProvider
		proc
			data TType = ^typeof(TIMPL)
			data logging = provider.GetService<IDebugLogging>() ?? DebugLogSession.Logging
			data domainName = TType.FullName + Guid.NewGuid().ToString()

			logging.LogInfo("Creating AppDomain {0} as a container for an instance of {1}", domainName, TType.FullName)

			data newLoadContext = new LoadContext()
			newLoadContext.LoadPaths.Add(Path.GetDirectoryName(TType.Assembly.Location))
			AssemblyLoadContexts.Add(newLoadContext)

            data loadedAssembly = newLoadContext.LoadFromAssemblyPath(TType.Assembly.Location)
            data targetType = loadedAssembly.GetType(TType.FullName)
            
            data resultObject = ActivatorUtilities.CreateInstance(provider, targetType)
            mreturn (T)resultObject
		endmethod

		private class LoadContext extends AssemblyLoadContext
		    public LoadPaths, @List<string>, new List<string>()

			protected override method Load, @Assembly
				assemblyName, @AssemblyName
			proc
				mreturn ^null
			endmethod

		endclass

	endclass

endnamespace