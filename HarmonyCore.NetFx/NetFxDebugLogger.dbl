import System
import System.Collections.Generic
import System.Text
import System.Collections.Concurrent
import Harmony.Core.Interface
import Harmony.Core.Utility
import System.Threading
import System.Diagnostics
import Newtonsoft.Json
import System.Threading.Tasks

namespace Harmony.Core.NetFx

	public class DebugLogBase extends MarshalByRefObject implements IDebugLogging, IDisposable
		public method DebugLogBase
			eventLogName, @string
			fileName, @string
			synchFlush, boolean
		proc
			mEventLogName = eventLogName

			if(!String.IsNullOrWhiteSpace(fileName))
				mLogFile = System.IO.File.OpenWrite(fileName)

			SynchronousFlush = synchFlush
			if(!SynchronousFlush) then
			begin
				mLogThreadRunning = true
				mLogQueue = new ConcurrentQueue<LogItem>()
				mLogThread = new Thread(RunLoggingQueue)
				mLogThread.Start()
				AppDomain.CurrentDomain.UnhandledException += UnhandledException
				AppDomain.CurrentDomain.DomainUnload += DomainUnload
			end
			else
			begin
				mLogThreadRunning = false
			end
		endmethod

		public virtual method Dispose, void
			endparams
		proc
			Dispose(true)
		endmethod

		protected virtual method Dispose, void
			disposing, boolean
			endparams
		proc
			ShutdownQueue(!disposing)

			if(disposing)
				GC.SuppressFinalize(this)
		endmethod

		method ~DebugLogBase
		proc
			Dispose(false)
		endmethod

		protected mLogQueue, @ConcurrentQueue<LogItem>
		protected mLogThread, @Thread
		protected mLogThreadRunning, @boolean
		private mEventLogName, @string
		private mLogFile, @System.IO.FileStream

		public readwrite property SynchronousFlush, boolean
		public readwrite property Level, LogLevel
		;;; <summary>
		;;;  Process the inbound string value.
		;;; </summary>
		;;; <remarks>
		;;; Log the passed string to your custom logging environment.
		;;; </remarks>
		public method LogMessage	,void
			in req level, LogLevel
			in req logKind, LogType
			in req message	,String
			endparams
		proc
			if((int)Level >= (int)level)
			begin
				data logEntry = new LogItem() { Level = level, LogKind = logKind, LogSession = DebugLogSession.CurrentSessionId, LogTime = DateTime.UtcNow }
				if(SynchronousFlush) then
				begin
					ProcessLogItem(logEntry)
				end
				else
				begin
					mLogQueue.Enqueue(logEntry)
				end

			end
		endmethod

		;;; <summary>
		;;;  Process the inbound string value as a format string
		;;; </summary>
		;;; <remarks>
		;;; Log the passed string to your custom logging environment.
		;;; </remarks>
		public method LogMessage	,void
			in req level, LogLevel
			in req logKind, LogType
			in req formatString	,String
			{ParamArray}
			in req args, [#]@Object
			endparams
		proc
			if((int)Level >= (int)level)
				LogMessage(level, logKind, String.Format(formatString, args))

		endmethod

		private async method RunLoggingQueue, void
			unused, @object
		proc
			try
			begin
				while(mLogThreadRunning)
				begin
					data logElement, @LogItem
					if(mLogQueue.TryDequeue(logElement)) then
						ProcessLogItem(logElement)
					else
						await Task.Delay(50)
				end
			end
			catch(ex, @Exception)
			begin
			end
			endtry
		endmethod

		private method UnhandledException, void
			sender, @Object
			args, @EventArgs
		proc
			ShutdownQueue(true)
		endmethod

		private method DomainUnload, void
			sender, @Object
			args, @EventArgs
		proc
			ShutdownQueue(true)
		endmethod

		private method DetachEvents, void
		proc
			AppDomain.CurrentDomain.UnhandledException -= UnhandledException
			AppDomain.CurrentDomain.DomainUnload -= DomainUnload
		endmethod

		private method ShutdownQueue, void
			urgent, boolean
			record
				item, @LogItem
		proc
			DetachEvents()
			mLogThreadRunning = false
			data shutdownStartTime = DateTime.Now
			mLogFile.Flush() ;;if we run into trouble at least some of the data will be flushed to disk
			;;try to drain the queue as much as possible if we run out of time, log that we ran out of time
			while(mLogQueue.TryDequeue(item))
			begin
				if(urgent)
				begin
					data timeDiff = DateTime.Now - shutdownStartTime
					if(timeDiff.TotalMilliseconds > 1000)
					begin
						data exitEarlyLogItem, @LogItem
						exitEarlyLogItem.Level = LogLevel.FatalError
						exitEarlyLogItem.LogKind = LogType.File | LogType.Console | LogType.EventLog
						exitEarlyLogItem.LogString = "Timeout while attempting to finish writing debug log items during shutdown"
						exitEarlyLogItem.LogTime = DateTime.UtcNow
						ProcessLogItem(exitEarlyLogItem)
						exitloop
					end
				end

				ProcessLogItem(item)
				mLogFile.Flush()
				mLogFile.Close()
			end

		endmethod

		private method ProcessLogItem, void
			req in byref item, @LogItem
		proc
			if((item.LogKind .band. LogType.Console) == LogType.Console)
				Console.WriteLine("{0} : Log Session Id {1} : Log Level {2} : Log Message {3}", item.LogTime, item.LogSession, item.Level, item.LogString)

			if((item.LogKind .band. LogType.DebugView) == LogType.DebugView)
				Debug.WriteLine("{0} : Log Session Id {1} : Log Level {2} : Log Message {3}", item.LogTime, item.LogSession, item.Level, item.LogString)

			if(mLogFile != ^null && (item.LogKind .band. LogType.File) == LogType.File)
			begin
				;;log files are in a legth prefixed streaming json format this is still easily human readable but can also be quickly processed by tools
				;;for example we can pull all of the log items out for a given session to make it easy to follow in multi threaded scenarios
				data logBytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(item))
				data lengthBytes = Encoding.UTF8.GetBytes(logBytes.Length.ToString().PadLeft(10, '0'))
				mLogFile.Write(lengthBytes, 0, lengthBytes.Length)
				mLogFile.Write(logBytes, 0, logBytes.Length)
				if(SynchronousFlush)
					mLogFile.Flush()
			end

			;;TODO EventLog
		endmethod

		class LogItem
			public Level, LogLevel
			public LogKind, LogType
			public LogString, @string
			public LogSession, @string
			public LogTime, DateTime
		endclass
	endclass

endnamespace
