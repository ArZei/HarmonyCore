import System
import System.Collections.Generic
import System.Text
import Microsoft.Extensions.DependencyInjection
import Harmony.Core.Context
import Harmony.Core.Interface
import Harmony.Core.Utility

namespace Harmony.Core.NetFx

	public class AppDomainContextPool<T(IContextBase, class), SP(IServiceProvider)> extends IsolatedContextPool<T>
		public method AppDomainContextPool
			min, int
			endparams
			parent(min)
		proc
		endmethod
		
		protected override method SlowMakeContext, T
			provider, @IServiceProvider
		proc
			data TType = ^typeof(T)
			data logging = provider.GetService<IDebugLogging>() ?? DebugLogSession.Logging
			data domainName = TType.FullName + Guid.NewGuid().ToString()

			logging.LogInfo("Creating AppDomain {0} as a container for an instance of {1}", domainName, ^typeof(T).FullName)

			data newAppDomain = AppDomain.CreateDomain(domainName) 
			data activatorInstance = ^as(newAppDomain.CreateInstanceAndUnwrap(^typeof(AppDomainActivator).Assembly.FullName, ^typeof(AppDomainActivator).FullName), @AppDomainActivator)
			mreturn activatorInstance.MakeContext(provider, logging)
		endmethod

		private class AppDomainActivator extends MarshalByRefObject
			public method MakeContext, T
				provider, @IServiceProvider
				logging, @IDebugLogging
			proc
				logging.LogInfo("Created AppDomain {0}", AppDomain.CurrentDomain.FriendlyName)
				data isolatedProvider = ActivatorUtilities.CreateInstance<SP>(provider)
				data result = ActivatorUtilities.CreateInstance<T>(isolatedProvider)
				logging.LogInfo("Created Instance of {0} inside of AppDomain {1}", ^typeof(T).FullName, AppDomain.CurrentDomain.FriendlyName)
				mreturn result
			endmethod
		endclass

	endclass

endnamespace
