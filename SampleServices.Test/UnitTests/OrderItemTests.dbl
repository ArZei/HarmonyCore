;;*****************************************************************************
;;
;; Title:       OrderItemTests.dbl
;;
;; Type:        Class
;;
;; Description: Unit tests for the operations defined in OrderItemsController.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net.Http
import SampleServices
import SampleServices.Test.Models

namespace SampleServices.Test.UnitTests

	{TestClass}
	public partial class OrderItemTests

		;;------------------------------------------------------------
		;;Get all OrderItems

		{TestMethod}
		{TestCategory("OrderItem Tests - Read All")}
		public method GetOrderItems, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/OrderItems").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItems, @ODataOrderItems, JsonConvert.DeserializeObject<ODataOrderItems>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all OrderItems and expand relation REL_OrderNumberAndLineItem

		{TestMethod}
		{TestCategory("OrderItem Tests - Read All")}
		public method GetOrderItems_Expand_REL_OrderNumberAndLineItem, void
		proc
			data uri = "/odata/OrderItems?$expand=REL_OrderNumberAndLineItem"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod

		;;------------------------------------------------------------
		;;Get all OrderItems and expand relation REL_ItemOrdered

		{TestMethod}
		{TestCategory("OrderItem Tests - Read All")}
		public method GetOrderItems_Expand_REL_ItemOrdered, void
		proc
			data uri = "/odata/OrderItems?$expand=REL_ItemOrdered"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod

		;;------------------------------------------------------------
		;;Get all OrderItems and expand all relations

		{TestMethod}
		{TestCategory("OrderItem Tests - Read All")}
		public method GetOrderItems_Expand_All, void
		proc
			data uri = "/odata/OrderItems?$expand=REL_OrderNumberAndLineItem,REL_ItemOrdered"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod
		
		;;------------------------------------------------------------
		;;Get a single OrderItem by primary key

		{TestMethod}
		{TestCategory("OrderItem Tests - Read by Primary Key")}
		public method GetOrderItem, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/OrderItems(OrderNumber={1},ItemNumber={2})","",TestConstants.GetOrderItem_OrderNumber,TestConstants.GetOrderItem_ItemNumber)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single OrderItem by primary key and expand relation REL_OrderNumberAndLineItem


		{TestMethod}
		{TestCategory("OrderItem Tests - Read by Primary Key")}
		public method GetOrderItem_Expand_REL_OrderNumberAndLineItem, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/OrderItems(OrderNumber={1},ItemNumber={2})?$expand=REL_OrderNumberAndLineItem","",TestConstants.GetOrderItem_Expand_REL_OrderNumberAndLineItem_OrderNumber,TestConstants.GetOrderItem_Expand_REL_OrderNumberAndLineItem_ItemNumber)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single OrderItem by primary key and expand relation REL_ItemOrdered


		{TestMethod}
		{TestCategory("OrderItem Tests - Read by Primary Key")}
		public method GetOrderItem_Expand_REL_ItemOrdered, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/OrderItems(OrderNumber={1},ItemNumber={2})?$expand=REL_ItemOrdered","",TestConstants.GetOrderItem_Expand_REL_ItemOrdered_OrderNumber,TestConstants.GetOrderItem_Expand_REL_ItemOrdered_ItemNumber)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single OrderItem by primary key and expand all relations

		{TestMethod}
		{TestCategory("OrderItem Tests - Read by Primary Key")}
		public method GetOrderItem_Expand_All, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/OrderItems(OrderNumber={1},ItemNumber={2})?$expand=REL_OrderNumberAndLineItem,REL_ItemOrdered","",TestConstants.GetOrderItem_Expand_All_OrderNumber,TestConstants.GetOrderItem_Expand_All_ItemNumber)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItem, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single OrderItem by alternate key 1 (ItemOrdered)

		{TestMethod}
		{TestCategory("OrderItem Tests - Read by Alternate Key")}
		public method GetOrderItem_ByAltKey_ItemOrdered, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/OrderItems(ItemOrdered={1})", "", TestConstants.GetOrderItem_ByAltKey_ItemOrdered_ItemOrdered)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItems, @ODataOrderItems,JsonConvert.DeserializeObject<ODataOrderItems>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single OrderItem by alternate key 2 (DateShipped)

		{TestMethod}
		{TestCategory("OrderItem Tests - Read by Alternate Key")}
		public method GetOrderItem_ByAltKey_DateShipped, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/OrderItems(DateShipped={1})", "", TestConstants.GetOrderItem_ByAltKey_DateShipped_DateShipped)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItems, @ODataOrderItems,JsonConvert.DeserializeObject<ODataOrderItems>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single OrderItem by alternate key 3 (InvoiceNumber)

		{TestMethod}
		{TestCategory("OrderItem Tests - Read by Alternate Key")}
		public method GetOrderItem_ByAltKey_InvoiceNumber, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/OrderItems(InvoiceNumber={1})", "", TestConstants.GetOrderItem_ByAltKey_InvoiceNumber_InvoiceNumber)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data orderItems, @ODataOrderItems,JsonConvert.DeserializeObject<ODataOrderItems>(result)
		endmethod

		;;------------------------------------------------------------
		;;Create new OrderItem (client specified key)

		{TestMethod}
		{TestCategory("OrderItem Tests - Create, Update & Delete")}
		public method UpdateOrderItem, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()

			;;Get one orderItem from the file
			data getRequest = String.Format("/odata/OrderItems(OrderNumber={1},ItemNumber={2})","",TestConstants.GetOrderItem_OrderNumber,TestConstants.GetOrderItem_ItemNumber)
			data getResponse = client.GetAsync(getRequest).Result
			data getResult = getResponse.Content.ReadAsStringAsync().Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Deserialize the JSON into a OrderItem object
			data doOrderItem, @OrderItem, JsonConvert.DeserializeObject<OrderItem>(getResult)

			doOrderItem.OrderNumber = TestConstants.UpdateOrderItem_OrderNumber
			doOrderItem.ItemNumber = TestConstants.UpdateOrderItem_ItemNumber

			;TODO: Also need to ensure any nodups alternate keys get unique values

			;;Create new item
			disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doOrderItem),System.Text.Encoding.UTF8, "application/json")
			data request = String.Format("/odata/OrderItems(OrderNumber={1},ItemNumber={2})","",TestConstants.UpdateOrderItem_OrderNumber,TestConstants.UpdateOrderItem_ItemNumber)
			disposable data response = client.PutAsync(request, requestBody).Result

			;;Check that we got a successful response from the web service
			response.EnsureSuccessStatusCode()

			;;Get the inserted record
			getResponse = client.GetAsync(request).Result
			getResult = getResponse.Content.ReadAsStringAsync().Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Deserialize the JSON into a OrderItem object
			doOrderItem = JsonConvert.DeserializeObject<OrderItem>(getResult)

			;;Change the first non key field to test full update
			doOrderItem.QuantityOrdered = 8

			;;Update full item
			requestBody = new StringContent(JsonConvert.SerializeObject(doOrderItem),System.Text.Encoding.UTF8, "application/json")
			request = String.Format("/odata/OrderItems(OrderNumber={1},ItemNumber={2})","",TestConstants.UpdateOrderItem_OrderNumber,TestConstants.UpdateOrderItem_ItemNumber)
			response = client.PutAsync(request, requestBody).Result

			;;Check that we got a successful response from the web service
			response.EnsureSuccessStatusCode()

			;;Get the inserted record
			getResponse = client.GetAsync(request).Result
			getResult = getResponse.Content.ReadAsStringAsync().Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Deserialize the JSON into a OrderItem object
			doOrderItem = JsonConvert.DeserializeObject<OrderItem>(getResult)

			Assert.AreEqual(doOrderItem.QuantityOrdered, 8)

			;;Update one property in the orderItem
			data patchDoc = new JsonPatchDocument()
			patchDoc.Replace("QuantityOrdered", "9")

			;;Serialize the patch to JSON
			data serializedPatch = JsonConvert.SerializeObject(patchDoc)

			;;Apply the patch
			disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
			disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

			;;Check that we got a successful response from the web service
			patchResponse.EnsureSuccessStatusCode()

			;;Get the updated orderItem record
			getResponse = client.GetAsync(request).Result
			getResult = getResponse.Content.ReadAsStringAsync().Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Deserialize the JSON into a OrderItem object
			doOrderItem = JsonConvert.DeserializeObject<OrderItem>(getResult)

			;;Verify that the property was changed
			Assert.AreEqual(doOrderItem.QuantityOrdered, 9)

			;;Delete It
			disposable data deleteResponse = client.DeleteAsync(request).Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Attempt to get the deleted record
			getResponse = client.GetAsync(request).Result

			;;Check we got a fail state from the web service
			Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

		endmethod

	endclass

endnamespace
