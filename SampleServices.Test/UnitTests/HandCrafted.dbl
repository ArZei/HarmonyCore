;;*****************************************************************************
;;
;; Title:       HandCrafted.dbl
;;
;; Type:        Class
;;
;; Description: Hand crafted unit tests.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net.Http
import SampleServices
import SampleServices.Test.Models

namespace SampleServices.Test.UnitTests

	{TestClass}
	public partial class HandCrafted

		;;------------------------------------------------------------
		;;Get all Customers, selected properties

		{TestMethod}
		public method GetCustomersSelectedFields, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$select=CustKey,CustName").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all Customers count

		{TestMethod}
		public method GetCustomersCount, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers/$count").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all Customers in California

		{TestMethod}
		public method GetCustomersInCalifornia, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$filter=CustState eq 'CA'").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all Customers NOT in California

		{TestMethod}
		public method GetCustomersNotInCalifornia, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$filter=not CustState eq 'CA'").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all Customers with credit limit over $5000

		{TestMethod}
		public method GetCustomersCreditOver5000, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$filter=CustLimit gt 5000").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all California Customers with credit limit over $5000

		{TestMethod}
		public method GetCaliforniaCustomersCreditOver5000, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$filter=CustState eq 'CA' and CustLimit gt 5000").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all Nevada customers, CustKey and CustName only

		{TestMethod}
		public method GetNevadaCustomersSelectedProperties, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$filter=CustState eq 'NV'&$select=CustKey,CustName").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;How many Nevada customers?

		{TestMethod}
		public method GetNevadaCustomerCount, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers/$count?$filter=CustState eq 'NV'").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;All OR and WA customers

		{TestMethod}
		public method GetOrWaCustomers, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$filter=CustState in ('OR', 'WA')").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;First 5 customers

		{TestMethod}
		public method GetFirstFiveCustomers, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$top=5").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;Next 5 customers

		{TestMethod}
		public method GetNextFiveCustomers, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers?$top=5&$skip=5").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;All plants latin name not end with 'costata'

		{TestMethod}
		public method GetCustomersLatinNotEndWith, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants?$filter=not endswith(InLatin,'costata')").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;Customer 1 (paren syntax)

		{TestMethod}
		public method GetCustomer1Parens, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers(1)").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
		endmethod

		;;------------------------------------------------------------
		;;Customer 1 (paren syntax) name only

		{TestMethod}
		public method GetCustomer1ParensName, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers(1)/CustName").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
		endmethod

		;;------------------------------------------------------------
		;;Customer 1 (paren syntax) name value only

		{TestMethod}
		public method GetCustomer1ParensNameValue, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers(1)/CustName/$value").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
		endmethod

		;;------------------------------------------------------------
		;;Customer 1 (path syntax)

		{TestMethod}
		public method GetCustomer1Path, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers/1").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
		endmethod

		;;------------------------------------------------------------
		;;Customer 1 (path syntax) name only

		{TestMethod}
		public method GetCustomer1PathName, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers/1/CustName").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
		endmethod

		;;------------------------------------------------------------
		;;Customer 1 (path syntax) name value only

		{TestMethod}
		public method GetCustomer1PathNameValue, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers/1/CustName/$value").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataCustomer, JsonConvert.DeserializeObject<ODataCustomer>(result)
		endmethod

		;;------------------------------------------------------------
		;;Plants from vendor 42

		{TestMethod}
		public method GetPlantsVendor42, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants(InSource=42)").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;How many plants from vendor 42

		{TestMethod}
		public method GetPlantsVendor42Count, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants(InSource=42)/$count").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;White plants

		{TestMethod}
		public method GetWhitePlants, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants(InColor='white')").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;Size 3 plants

		{TestMethod}
		public method GetSize3Plants, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants(InSize=3)").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;Size 3 purple bushes

		{TestMethod}
		public method GetSize3PurpleBushes, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants(InSize=3)?$filter=InShape eq 'bush' and InColor eq 'purple'").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;Size 3 purple bushes, InItemId and InName only

		{TestMethod}
		public method GetSize3PurpleBushesPartial, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants(InSize=3)?$filter=InShape eq 'bush' and InColor eq 'purple'&$select=InItemId,InName").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;Plants named 'Hedge Maple'

		{TestMethod}
		public method GetHedgeMaple, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants(InName='Hedge Maple')").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customer, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;Customer 1 with orders

		{TestMethod}
		public method GetCustomer1WithOrders, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers(1)?$expand=REL_Orders").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
			;Customer 1 has no orders
		endmethod

		;;------------------------------------------------------------
		;;Customer 8 with orders

		{TestMethod}
		public method GetCustomer8WithOrders, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers(8)?$expand=REL_Orders").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
			;Customer 8 has 3 orders
		endmethod

		;;------------------------------------------------------------
		;;Customer 8 with orders (path syntax)

		{TestMethod}
		public method GetCustomer8WithOrdersPath, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers/8/REL_Orders").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
			;Customer 8 has 3 orders
		endmethod

		;;------------------------------------------------------------
		;;Customer 8 with orders, expand OrderItems and Plants

		{TestMethod}
		public method GetCustomer8WithOrdersExpand, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Customers(8)?$expand=REL_Orders($expand=REL_OrderItems($expand=REL_OiItemOrdered))").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataCustomers, JsonConvert.DeserializeObject<ODataCustomers>(result)
		endmethod

		;;------------------------------------------------------------
		;;All OrderItems

		{TestMethod}
		public method GetOrderItems, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/OrderItems").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataOrderItems, JsonConvert.DeserializeObject<ODataOrderItems>(result)
		endmethod

		;;------------------------------------------------------------
		;; OrderItems for order 3

		{TestMethod}
		public method GetOrder3Items, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/OrderItems?$filter=OiNumber eq 3").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataOrderItems, JsonConvert.DeserializeObject<ODataOrderItems>(result)
		endmethod

		;;------------------------------------------------------------
		;; OrderItem for order 3 item 1

		{TestMethod}
		public method GetOrder3Item1, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/OrderItems(OiNumber=3,OiLineItem=1)").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
		endmethod

		;;------------------------------------------------------------
		;; OrderItem for order 3 item 1

		{TestMethod}
		public method GetOrder3Item1Path, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/OrderItems/3/1)").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data customers, @ODataOrderItem, JsonConvert.DeserializeObject<ODataOrderItem>(result)
		endmethod


	endclass

endnamespace
