;;*****************************************************************************
;;
;; Title:       VendorTests.dbl
;;
;; Type:        Class
;;
;; Description: Unit tests for the operations defined in VendorsController.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net.Http
import SampleServices
import SampleServices.Test.Models

namespace SampleServices.Test.UnitTests

	{TestClass}
	public partial class VendorTests

		;;------------------------------------------------------------
		;;Get all Vendors

		{TestMethod}
		{TestCategory("Vendor Tests - Read All")}
		public method GetVendors, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Vendors").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data vendors, @ODataVendors, JsonConvert.DeserializeObject<ODataVendors>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all Vendors and expand relation REL_Vendor

		{TestMethod}
		{TestCategory("Vendor Tests - Read All")}
		public method GetVendors_Expand_REL_Plants, void
		proc
			data uri = "/odata/Vendors?$expand=REL_Plants"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod

		;;------------------------------------------------------------
		;;Get all Vendors and expand all relations

		{TestMethod}
		{TestCategory("Vendor Tests - Read All")}
		public method GetVendors_Expand_All, void
		proc
			data uri = "/odata/Vendors?$expand=REL_Plants"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod
		
		;;------------------------------------------------------------
		;;Get a single Vendor by primary key

		{TestMethod}
		{TestCategory("Vendor Tests - Read by Primary Key")}
		public method GetVendor, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Vendors(VendKey={1})","",TestConstants.GetVendor_VendKey)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data vendor, @ODataVendor, JsonConvert.DeserializeObject<ODataVendor>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Vendor by primary key and expand relation REL_Plants

		{TestMethod}
		{TestCategory("Vendor Tests - Read by Primary Key")}
		public method GetVendor_Expand_REL_Plants, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Vendors(VendKey={1})?$expand=REL_Plants","",TestConstants.GetVendor_Expand_REL_Plants_VendKey)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data vendor, @ODataVendor, JsonConvert.DeserializeObject<ODataVendor>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Vendor by primary key and expand all relations

		{TestMethod}
		{TestCategory("Vendor Tests - Read by Primary Key")}
		public method GetVendor_Expand_All, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Vendors(VendKey={1})?$expand=REL_Plants","",TestConstants.GetVendor_Expand_All_VendKey)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data vendor, @ODataVendor, JsonConvert.DeserializeObject<ODataVendor>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Vendor by alternate key 1 (TagVendor)

		{TestMethod}
		{TestCategory("Vendor Tests - Read by Alternate Key")}
		public method GetVendor_ByAltKey_TagVendor, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Vendors(VendRtype={1},VendKey={2})", "", TestConstants.GetVendor_ByAltKey_TagVendor_VendRtype,TestConstants.GetVendor_ByAltKey_TagVendor_VendKey)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data vendor, @ODataVendor,JsonConvert.DeserializeObject<ODataVendor>(result)
		endmethod

		;;------------------------------------------------------------
		;;Create new Vendor (client specified key)

		{TestMethod}
		{TestCategory("Vendor Tests - Create, Update & Delete")}
		public method UpdateVendor, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()

			;;Get one vendor from the file
			data getRequest = String.Format("/odata/Vendors(VendKey={1})","",TestConstants.GetVendor_VendKey)
			data getResponse = client.GetAsync(getRequest).Result
			data getResult = getResponse.Content.ReadAsStringAsync().Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Deserialize the JSON into a Vendor object
			data doVendor, @Vendor, JsonConvert.DeserializeObject<Vendor>(getResult)

			doVendor.VendKey = TestConstants.UpdateVendor_VendKey

			;TODO: Also need to ensure any nodups alternate keys get unique values

			;;Update it
			disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doVendor),System.Text.Encoding.UTF8, "application/json")
			data request = String.Format("/odata/Vendors(VendKey={1})","",TestConstants.UpdateVendor_VendKey)
			disposable data response = client.PutAsync(request, requestBody).Result

			;;Check that we got a successful response from the web service
			response.EnsureSuccessStatusCode()

			;;Get the inserted record
			getResponse = client.GetAsync(request).Result
			getResult = getResponse.Content.ReadAsStringAsync().Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Deserialize the JSON into a Vendor object
			doVendor = JsonConvert.DeserializeObject<Vendor>(getResult)

			Assert.AreEqual(doVendor.VendKey, TestConstants.UpdateVendor_VendKey)

			;;Update one property in the vendor
			data patchDoc = new JsonPatchDocument()
			patchDoc.Replace("VendName", "Z")

			;;Serialize the patch to JSON
			data serializedPatch = JsonConvert.SerializeObject(patchDoc)

			;;Apply the patch
			disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
			disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

			;;Check that we got a successful response from the web service
			patchResponse.EnsureSuccessStatusCode()

			;;Get the updated vendor record
			getResponse = client.GetAsync(request).Result
			getResult = getResponse.Content.ReadAsStringAsync().Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Deserialize the JSON into a Vendor object
			doVendor = JsonConvert.DeserializeObject<Vendor>(getResult)

			;;Verify that the property was changed
			Assert.AreEqual(doVendor.VendName, "Z")

			;;Delete It
			disposable data deleteResponse = client.DeleteAsync(request).Result

			;;Check that we got a successful response from the web service
			getResponse.EnsureSuccessStatusCode()

			;;Attempt to get the deleted record
			getResponse = client.GetAsync(request).Result

			;;Check we got a fail state from the web service
			Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

		endmethod

	endclass

endnamespace
