;;*****************************************************************************
;;
;; Title:       TestEnvironment.dbl
;;
;; Type:        Class
;;
;; Description: Utilities for configuting a hosting environment.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic
import System.IO
import System.Text
import SampleServices.Models
import SampleServices.Test.DataGenerators

.array 0

namespace SampleServices.Test

	public static class TestEnvironment

		public static method Configure, void
		proc
			Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)
			setLogicals()
			deleteFiles()
			createFiles()
		endmethod

		public static method Cleanup, void
		proc
			deleteFiles()
		endmethod

		private static method setLogicals, void
		proc
			data sampleDataFolder = findRelativeFolderForAssembly("SampleData")
			data logicals = new List<string>()
			data logical = String.Empty
			data fileSpec = String.Empty

			fileSpec = "ICSTUT:customer.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[0].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			fileSpec = "ICSTUT:orders.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[0].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			fileSpec = "ICSTUT:order_items.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[0].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			fileSpec = "ICSTUT:plants.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[0].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			foreach logical in logicals
			begin
				data sts, int
				xcall setlog(logical,sampleDataFolder,sts)
			end

		endmethod

		private static method createFiles, void
		proc
			data chout, int
			data dataFile, string
			data xdlFile, string

			data customers = CustomerLoader.LoadFromFile()
			data orders = OrderLoader.LoadFromFile()
			data orderItems = OrderItemLoader.LoadFromFile()
			data plants = PlantLoader.LoadFromFile()

			;;Create and load the customers file

			dataFile = "ICSTUT:customer.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

			data customer, @Customer
			open(chout=0,o:i,dataFile,FDL:xdlFile)
			foreach customer in customers
				store(chout,customer.SynergyRecord)
			close chout

			;;Create and load the orders file

			dataFile = "ICSTUT:orders.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

			data order, @Order
			open(chout=0,o:i,dataFile,FDL:xdlFile)
			foreach order in orders
				store(chout,order.SynergyRecord)
			close chout

			;;Create and load the orderItems file

			dataFile = "ICSTUT:order_items.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

			data orderItem, @OrderItem
			open(chout=0,o:i,dataFile,FDL:xdlFile)
			foreach orderItem in orderItems
				store(chout,orderItem.SynergyRecord)
			close chout

			;;Create and load the plants file

			dataFile = "ICSTUT:plants.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")

			data plant, @Plant
			open(chout=0,o:i,dataFile,FDL:xdlFile)
			foreach plant in plants
				store(chout,plant.SynergyRecord)
			close chout

		endmethod

		private static method deleteFiles, void
		proc
			;;Delete the customers file
			try
			begin
				xcall delet("ICSTUT:customer.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

			;;Delete the orders file
			try
			begin
				xcall delet("ICSTUT:orders.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

			;;Delete the orderItems file
			try
			begin
				xcall delet("ICSTUT:order_items.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

			;;Delete the plants file
			try
			begin
				xcall delet("ICSTUT:plants.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

		endmethod

		private static method findRelativeFolderForAssembly, string
			folderName, string
		proc
			data assemblyLocation = ^typeof(TestEnvironment).Assembly.Location
			data currentFolder = Path.GetDirectoryName(assemblyLocation)
			data rootPath = Path.GetPathRoot(currentFolder)
			while(currentFolder != rootPath)
			begin
				if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
					mreturn Path.Combine(currentFolder, folderName)
				else
					currentFolder = Path.GetFullPath(currentFolder + "..\")
			end
			mreturn ^null
		endmethod

	endclass

endnamespace
