;;*****************************************************************************
;;
;; Title:       TestEnvironment.dbl
;;
;; Type:        Class
;;
;; Description: Configures an environment in which unit tests can operate
;;              with a known initial data state.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.TestHost
import Microsoft.VisualStudio.TestTools.UnitTesting
import System.Collections.Generic
import System.Text
import SampleServices

main TestEnvironment
proc
	;For debugging!

	TestEnvironment.AssemblyInitialize(^null)

	data tester = new CustomerTests()
	tester.GetAllCustomers()

	TestEnvironment.AssemblyCleanup()

endmain

namespace SampleServices.Test

	{TestClass}
	public class TestEnvironment

		public static Server, @TestServer 

		{AssemblyInitialize}
		public static method AssemblyInitialize, void
			required in context, @TestContext
		proc
			Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)

			;;Set the logical names that will be used to access the data files
			setLogicals()

			;;Make sure the files don't already exist
			deleteFiles()

			;;Create the data files
			createFiles()

			;;Create a TestServer to host the Web API services
			Server = new TestServer(new WebHostBuilder().UseStartup<Startup>())

		endmethod

		{AssemblyCleanup}
		public static method AssemblyCleanup, void
		proc
			;;Clean up the test host
			Server.Dispose()
			Server = ^null

			;;Delete the data files
			deleteFiles()

		endmethod

		private static method createFiles, void
			.include "CUSTOMERS" repository, stack record="customer", nofields, end
			.include "ORDERS" repository, stack record="order", nofields, end
			.include "PLANTS" repository, stack record="plant", nofields, end
		proc
			data chout, int
			data chin, int
			data dataFile, string
			data xdlFile, string
			data textFile, string

			;;Create and load the customers file

			dataFile = "ICSTUT:customer.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")
			textFile = dataFile.ToLower().Replace(".ism",".txt")

			open(chout=0,o:i,dataFile,FDL:xdlFile)
			open(chin,i,textFile)
			repeat
			begin
				reads(chin,customer,endcustomers)
				store(chout,customer)
			end
		endcustomers,
			close chin
			close chout

			;;Create and load the orders file

			dataFile = "ICSTUT:orders.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")
			textFile = dataFile.ToLower().Replace(".ism",".txt")

			open(chout=0,o:i,dataFile,FDL:xdlFile)
			open(chin,i,textFile)
			repeat
			begin
				reads(chin,order,endorders)
				store(chout,order)
			end
		endorders,
			close chin
			close chout

			;;Create and load the plants file

			dataFile = "ICSTUT:plants.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")
			textFile = dataFile.ToLower().Replace(".ism",".txt")

			open(chout=0,o:i,dataFile,FDL:xdlFile)
			open(chin,i,textFile)
			repeat
			begin
				reads(chin,plant,endplants)
				store(chout,plant)
			end
		endplants,
			close chin
			close chout

		endmethod

		private static method deleteFiles, void
		proc
			;;Delete the customers file
			try
			begin
				xcall delet("ICSTUT:customer.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

			;;Delete the orders file
			try
			begin
				xcall delet("ICSTUT:orders.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

			;;Delete the plants file
			try
			begin
				xcall delet("ICSTUT:plants.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

		endmethod

		private static method setLogicals, void
		proc
			data sampleDataFolder = EnvironmentRootBuilder.FindRelativeFolderForAssembly("SampleData")
			data logicals = new List<string>()
			data logical = String.Empty
			data fileSpec = String.Empty

			fileSpec = "ICSTUT:customer.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[0].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			fileSpec = "ICSTUT:orders.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[0].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			fileSpec = "ICSTUT:plants.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[0].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			foreach logical in logicals
			begin
				data sts, int
				xcall setlog(logical,sampleDataFolder,sts)
			end

		endmethod

	endclass

endnamespace
