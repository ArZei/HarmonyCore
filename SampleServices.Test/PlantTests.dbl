;;*****************************************************************************
;;
;; Title:       PlantTests.dbl
;;
;; Type:        Class
;;
;; Description: Unit tests for the operations defined in PlantsController.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net.Http
import SampleServices
import SampleServices.Test.Models

namespace SampleServices.Test

	{TestClass}
	public partial class PlantTests

		;;------------------------------------------------------------
		;;Get all Plants

		{TestMethod}
		{TestCategory("Plant Tests - Read All")}
		public method GetPlants, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync("/odata/Plants").Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plants, @ODataPlants, JsonConvert.DeserializeObject<ODataPlants>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get all Plants and expand relation REL_Vendor

		{TestMethod}
		{TestCategory("Plant Tests - Read All")}
		public method GetPlants_Expand_REL_Vendor, void
		proc
			data uri = "/odata/Plants?$expand=REL_Vendor"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod

		;;------------------------------------------------------------
		;;Get all Plants and expand relation REL_Item

		{TestMethod}
		{TestCategory("Plant Tests - Read All")}
		public method GetPlants_Expand_REL_OrderItems, void
		proc
			data uri = "/odata/Plants?$expand=REL_OrderItems"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod

		;;------------------------------------------------------------
		;;Get all Plants and expand all relations

		{TestMethod}
		{TestCategory("Plant Tests - Read All")}
		public method GetPlants_Expand_All, void
		proc
			data uri = "/odata/Plants?$expand=REL_Vendor,REL_OrderItems"
			disposable data client = UnitTestEnvironment.Server.CreateClient()
			disposable data response = client.GetAsync(uri).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
		endmethod
		
		;;------------------------------------------------------------
		;;Get a single Plant by primary key

		{TestMethod}
		{TestCategory("Plant Tests - Read by Primary Key")}
		public method GetPlant, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InItemid={1})","",TestContext.GetPlant_InItemid)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Plant by primary key and expand relation REL_Vendor

		{TestMethod}
		{TestCategory("Plant Tests - Read by Primary Key")}
		public method GetPlant_Expand_REL_Vendor, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InItemid={1})?$expand=REL_Vendor","",TestContext.GetPlant_Expand_REL_Vendor_InItemid)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Plant by primary key and expand relation REL_OrderItems

		{TestMethod}
		{TestCategory("Plant Tests - Read by Primary Key")}
		public method GetPlant_Expand_REL_OrderItems, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InItemid={1})?$expand=REL_OrderItems","",TestContext.GetPlant_Expand_REL_OrderItems_InItemid)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Plant by primary key and expand all relations

		{TestMethod}
		{TestCategory("Plant Tests - Read by Primary Key")}
		public method GetPlant_Expand_All, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InItemid={1})?$expand=REL_Vendor,REL_OrderItems","",TestContext.GetPlant_Expand_All_InItemid)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Plant by alternate key 1 (Vendor)

		{TestMethod}
		{TestCategory("Plant Tests - Read by Alternate Key")}
		public method GetPlant_ByAltKey_Vendor, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InSource={1})", "", TestContext.GetPlant_ByAltKey_Vendor_InSource)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Plant by alternate key 2 (Color)

		{TestMethod}
		{TestCategory("Plant Tests - Read by Alternate Key")}
		public method GetPlant_ByAltKey_Color, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InColor='{1}')", "", TestContext.GetPlant_ByAltKey_Color_InColor)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Plant by alternate key 3 (Size)

		{TestMethod}
		{TestCategory("Plant Tests - Read by Alternate Key")}
		public method GetPlant_ByAltKey_Size, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InSize={1})", "", TestContext.GetPlant_ByAltKey_Size_InSize)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Get a single Plant by alternate key 4 (Name)

		{TestMethod}
		{TestCategory("Plant Tests - Read by Alternate Key")}
		public method GetPlant_ByAltKey_Name, void
		proc
			data client = UnitTestEnvironment.Server.CreateClient()
			data request = String.Format("/odata/Plants(InName='{1}')", "", TestContext.GetPlant_ByAltKey_Name_InName)
			data response = client.GetAsync(request).Result
			data result = response.Content.ReadAsStringAsync().Result
			response.EnsureSuccessStatusCode()
			data plant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(result)
		endmethod

		;;------------------------------------------------------------
		;;Create new Plant (client specified key)

		{TestMethod}
		{TestCategory("Plant Tests - Create, Update & Delete")}
		public method UpdatePlant, void
		proc
			disposable data client = UnitTestEnvironment.Server.CreateClient()

			;;Get the first record from the file
			data getRequest = String.Format("/odata/Plants(InItemid={1})","",TestContext.GetPlant_InItemid)
			data getResponse = client.GetAsync(getRequest).Result
			data getResult = getResponse.Content.ReadAsStringAsync().Result
			getResponse.EnsureSuccessStatusCode()
			data doPlant, @ODataPlant, JsonConvert.DeserializeObject<ODataPlant>(getResult)

			doPlant.Value.InItemid = TestContext.UpdatePlant_InItemid

			;TODO: Also need to ensure any nodups alternate keys get unique values

			;;Update it
			disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doPlant.Value))
			data request = String.Format("/odata/Plants(InItemid={1})","",TestContext.UpdatePlant_InItemid)
			disposable data response = client.PutAsync(request, requestBody).Result
			response.EnsureSuccessStatusCode()

			;;Get the inserted record
			getResponse = client.GetAsync(request).Result
			getResult = getResponse.Content.ReadAsStringAsync().Result
			getResponse.EnsureSuccessStatusCode()
			doPlant = JsonConvert.DeserializeObject<ODataPlant>(getResult)

			Assert.AreEqual(doPlant.Value.InItemid, TestContext.UpdatePlant_InItemid)

		endmethod

	endclass

endnamespace
