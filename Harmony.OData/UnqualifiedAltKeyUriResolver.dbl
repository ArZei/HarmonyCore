import System
import System.Collections.Generic
import System.Text
import Microsoft.OData.UriParser
import Microsoft.OData.Edm
import System.Linq
import Microsoft.OData.Edm.Vocabularies
import System.Diagnostics
import Microsoft.OData
import System.Reflection


namespace Harmony.OData

    public class UnqualifiedAltKeyUriResolver extends ODataUriResolver

        private _unqualified, @UnqualifiedODataUriResolver
        private _altKeys, @AlternateKeysODataUriResolver
        private static _primativeMapper, @Func<IEdmPrimitiveType, Boolean, Type>


        static method UnqualifiedAltKeyUriResolver
        proc
            data libExtensionType = ^typeof(ODataAction).Assembly.GetType("Microsoft.OData.Metadata.EdmLibraryExtensions")
            data primativeClrTypeMethod, @MethodInfo, libExtensionType.GetMethod("GetPrimitiveClrType", BindingFlags.Static | BindingFlags.NonPublic, ^null, CallingConventions.Any, new Type[#] { ^typeof(IEdmPrimitiveType), ^typeof(Boolean) }, ^null)
            _primativeMapper = (@Func<IEdmPrimitiveType, Boolean, Type>)primativeClrTypeMethod.CreateDelegate(^typeof(Func<IEdmPrimitiveType, Boolean, Type>), ^null)
        endmethod


        public method UnqualifiedAltKeyUriResolver
            model, @IEdmModel
        proc
            _altKeys = new AlternateKeysODataUriResolver(model)
            _unqualified = new UnqualifiedODataUriResolver()
        endmethod


        public override property EnableCaseInsensitive, boolean
            method get
            proc
                mreturn _altKeys.EnableCaseInsensitive
            endmethod
            method set
            proc
                _altKeys.EnableCaseInsensitive = value
                _unqualified.EnableCaseInsensitive = value
            endmethod
        endproperty

        public override method ResolveOperationImports, @IEnumerable<IEdmOperationImport>
            model, @IEdmModel 
            identifier, @string 
        proc
            mreturn _unqualified.ResolveOperationImports(model, identifier)
        endmethod

        public override method ResolveUnboundOperations, @IEnumerable<IEdmOperation>
            model, @IEdmModel
            identifier, string
        proc
            mreturn _unqualified.ResolveUnboundOperations(model, identifier)
        endmethod

        public override method ResolveBoundOperations, @IEnumerable<IEdmOperation>
            model, @IEdmModel
            identifier, string
            bindingType, @IEdmType
        proc
            ;;TODO match bindingWRappers here find the right type and make the iEdmOperation list
            data result = _unqualified.ResolveBoundOperations(model, identifier, bindingType)?.ToList()

            if(result == ^null || result.Count == 0) then
            begin
                data operations = model.SchemaElements.OfType<IEdmOperation>().Where(lambda(op) { op.Name == identifier }).ToList()
                mreturn operations
            end
            else
                mreturn result
        endmethod

        public override method ResolveKeys, @IEnumerable<KeyValuePair<string, object>>
            type, @IEdmEntityType
            namedValues, @IDictionary<string, string>
            convertFunc, @Func<IEdmTypeReference, string, object>
        proc
            mreturn _altKeys.ResolveKeys(type, namedValues, convertFunc)
        endmethod

        public override method ResolveKeys, @IEnumerable<KeyValuePair<string, object>>
            type, @IEdmEntityType
            positionalValues, @IList<string>
            convertFunc, @Func<IEdmTypeReference, string, object>
        proc
            try
            begin
                mreturn _altKeys.ResolveKeys(type, positionalValues, convertFunc)
            end
            catch(ex, @ODataException)
            begin
                mreturn type.DeclaredKey.Select(lambda(keyPart) { new KeyValuePair<string, Object>(keyPart.Name, "{" + keyPart.Name + "}" )})
            end
            endtry
        endmethod

        private method MakeDefaultValue, @object
            typeRef, @IEdmTypeReference
        proc
            data primitiveType = typeRef.AsPrimitive()
            
            data primitiveClrType = _primativeMapper((@IEdmPrimitiveType)primitiveType.Definition, primitiveType.IsNullable)
            if (primitiveClrType?.IsValueType ?? false)
                mreturn Activator.CreateInstance(primitiveClrType)

            mreturn ^null
        endmethod



        public override method ResolveTerm, @IEdmTerm
        model, @IEdmModel
        termName, @string 
        proc
            mreturn parent.ResolveTerm(model, termName)
        endmethod

	endclass

endnamespace
