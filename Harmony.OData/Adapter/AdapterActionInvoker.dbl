import System
import System.Collections.Generic
import System.Diagnostics
import System.Runtime.ExceptionServices
import System.Threading.Tasks
import Microsoft.AspNetCore.Mvc.Abstractions
import Microsoft.AspNetCore.Mvc.Filters
import Microsoft.AspNetCore.Mvc.Infrastructure
import Microsoft.Extensions.Logging
import Microsoft.AspNetCore.Mvc.Internal
import Microsoft.AspNetCore.Mvc
import System.Linq.Expressions
import System.Collections.Concurrent
import System.Reflection
import Microsoft.Extensions.DependencyInjection
import System.IO
import Newtonsoft.Json
import Newtonsoft.Json.Linq
import Harmony.Core.Context
import System.Linq
import Microsoft.AspNetCore.Http.Features
import Microsoft.AspNet.OData.Query
import Microsoft.AspNet.OData
import Microsoft.OData.Edm
import Microsoft.OData.UriParser
import Microsoft.AspNet.OData.Routing.Conventions
import Microsoft.AspNet.OData.Routing
import Microsoft.AspNet.OData.Extensions
import Harmony.OData.ExpressionHelpers

namespace Harmony.OData.Adapter

	public class AdapterActionInvoker extends ResourceInvoker implements IActionInvoker
		private static ExpressionLookup, @ConcurrentDictionary<string, Func<ODataQueryOptions, Dictionary<string, List<AdapterOp>>,Func<IDictionary<object, object>, string, object, Task<IActionResult>>>>, new ConcurrentDictionary<string, Func<ODataQueryOptions, Dictionary<string, List<AdapterOp>>,Func<IDictionary<object, object>, string, object, Task<IActionResult>>>>()
		private readonly _controllerContext, @ControllerContext
		private _arguments, @Dictionary<string, object>
		private _actionExecutingContext, @ActionExecutingContext
		private _actionExecutedContext, @ActionExecutedContext
		private _serviceProvider, @IServiceProvider
		internal method AdapterActionInvoker
			logger, @ILogger 
			diagnosticSource, @DiagnosticSource 
			mapper, @IActionResultTypeMapper 
			controllerContext, @ControllerContext 
			filters, [#]@IFilterMetadata 
			serviceProvider, @IServiceProvider
			endparams
			parent(diagnosticSource, logger, mapper, controllerContext, filters, controllerContext.ValueProviderFactories)
		proc
			_controllerContext = controllerContext
			_serviceProvider = serviceProvider

			
		endmethod

		private method ExtractAdapterOp, void
			targetNode, @QueryNode
			filterLookup, @Dictionary<string, List<AdapterOp>>
			parentOpKind, BinaryOperatorKind?
		proc
			if(targetNode .is. BinaryOperatorNode) then
			begin
				data binaryOp = ^as(targetNode, @BinaryOperatorNode)
				if(binaryOp.Left .is. SingleValuePropertyAccessNode) then
				begin
					if(binaryOp.Right .is. ConstantNode)
					begin
						AddAdapterOp(ExtractPropertyOp(GetOpKind(binaryOp), (@SingleValuePropertyAccessNode)binaryOp.Left, (@ConstantNode)binaryOp.Right), filterLookup)
					end
				end
				else if(((binaryOp.OperatorKind == BinaryOperatorKind.Or || binaryOp.OperatorKind == BinaryOperatorKind.And)))
				begin
					ExtractAdapterOp(binaryOp.Left, filterLookup, binaryOp.OperatorKind)
					ExtractAdapterOp(binaryOp.Right, filterLookup, binaryOp.OperatorKind)
				end
			end
			else if(targetNode .is. UnaryOperatorNode)
			begin
				;;we dont support these currently
			end

		endmethod

		private method ExtractPropertyOp, @AdapterOp
			opKind, AdapterOpKind
			targetNode, @SingleValuePropertyAccessNode
			valueNode, @ConstantNode
		proc
			mreturn new AdapterOp() { Name = targetNode.Property.Name, OpKind = opKind, Value = valueNode.Value }
		endmethod

		private method AddAdapterOp, void
			op, @AdapterOp
			filterLookup, @Dictionary<string, List<AdapterOp>>
		proc
			data existing, @List<AdapterOp>
			if(!filterLookup.TryGetValue(op.Name, existing))
			begin
				existing = new List<AdapterOp>()
				filterLookup.Add(op.Name, existing)
			end

			existing.Add(op)
		endmethod


		private method GetOpKind, AdapterOpKind
			opNode, @BinaryOperatorNode
		proc
			if(opNode.OperatorKind == BinaryOperatorKind.Equal) then
				mreturn AdapterOpKind.Eq
			else if(opNode.OperatorKind == BinaryOperatorKind.NotEqual) then
				mreturn AdapterOpKind.Ne
			else if(opNode.OperatorKind == BinaryOperatorKind.LessThan) then
				mreturn AdapterOpKind.Lt
			else if(opNode.OperatorKind == BinaryOperatorKind.LessThanOrEqual) then
				mreturn AdapterOpKind.Le
			else if(opNode.OperatorKind == BinaryOperatorKind.GreaterThan) then
				mreturn AdapterOpKind.Gt
			else if(opNode.OperatorKind == BinaryOperatorKind.GreaterThanOrEqual)
				mreturn AdapterOpKind.Ge
		endmethod

		private method GetOpKind, AdapterOpKind
			opNode, @UnaryOperatorNode
		proc
			throw new NotImplementedException()
		endmethod

		private method BuildInvoker, @Func<IDictionary<object, object>, string, object, Task<IActionResult>>
		proc
			data feature = _controllerContext.HttpContext.ODataFeature()
			data odataPath = feature.Path
			data svc = feature.RequestContainer.GetService(^typeof(IEdmModel))
			data model = ^as(svc, @IEdmModel)
			data elementType = odataPath.EdmType .is. IEdmCollectionType ? ((@IEdmCollectionType)odataPath.EdmType).ElementType.Definition : odataPath.EdmType
			data odataQuery = new ODataQueryOptions(new ODataQueryContext(model, elementType, odataPath), _controllerContext.HttpContext.Request)
			data filterClause = odataQuery.Filter.FilterClause
			data filterLookup = new Dictionary<string, List<AdapterOp>>()
			ExtractAdapterOp(filterClause.Expression, filterLookup, ^null)
			;;get filter stucture
			;;build lookups for the result fields based on the target edm name
			;;
			data targetMethodParameters = _controllerContext.ActionDescriptor.MethodInfo.GetParameters()
			if(targetMethodParameters.Length != 1)
				throw new InvalidOperationException("Adapter invocation only works for methods with a single parameter defined")


			data uriParameters = Expression.Parameter(^typeof(Dictionary<object, object>))
			data bodyString = Expression.Parameter(^typeof(string))
			data instance = Expression.Parameter(^typeof(object))
			data targetParameterType = targetMethodParameters.First().ParameterType
			
			data odataQueryParameter = Expression.Parameter(^typeof(ODataQueryOptions))
			data filterLookupParam = Expression.Parameter(^typeof(Dictionary<string, List<AdapterOp>>))
			lambda expressionBuilder(methodName)
			begin
				data wrapResponseMethod = ^typeof(AdapterActionInvoker).GetMethod("WrapResponseForExceptions")
				data callExpression = InvokerHelpers.GenerateCallExpression(_controllerContext.ActionDescriptor.MethodInfo, _controllerContext.ActionDescriptor.ControllerTypeInfo, BakeFieldValueGetter(targetParameterType, filterLookupParam, uriParameters), instance, wrapResponseMethod)
				data innerAdapter = Expression.Lambda<Func<IDictionary<object, object>, string, object, Task<IActionResult>>>(callExpression, "innerAdapter", new ParameterExpression[#] { uriParameters, bodyString, instance })
				data result = Expression.Lambda<Func<ODataQueryOptions, Dictionary<string, List<AdapterOp>>, Func<IDictionary<object, object>, string, object, Task<IActionResult>>>>(
				&	innerAdapter, "outerAdapter", new ParameterExpression[#] { odataQueryParameter, filterLookupParam })
				mreturn result.Compile()
			end
			data paramBaker = ExpressionLookup.GetOrAdd(_controllerContext.ActionDescriptor.DisplayName, expressionBuilder)
			mreturn paramBaker(odataQuery, filterLookup)
		endmethod

		private static method GetValueForDestinationField, @object
			adapterType, @Type
			destinationFieldName, @string
			opLookup, @Dictionary<string, List<AdapterOp>>
			uriParameters, @Dictionary<object, object>
		proc
			data targetField = adapterType.GetField(destinationFieldName)
			data customAttributes = targetField.GetCustomAttributes(false)
			data attr, @object
			foreach attr in customAttributes
			begin
				if(attr .is. ParameterFieldAdapterAttribute) then
				begin
					data paramAttr = ^as(attr, @ParameterFieldAdapterAttribute)
					data paramValue, @object
					if(uriParameters.TryGetValue(paramAttr.EdmName, paramValue))
					begin
						mreturn paramValue
					end
				end
				else if(attr .is. MatchFieldAdapterAttribute) then
				begin
					data matchAttr = ^as(attr, @MatchFieldAdapterAttribute)
					data matchFieldOps, @List<AdapterOp>
					if(opLookup.TryGetValue(matchAttr.EdmName, matchFieldOps))
					begin
						data adapterOp = matchFieldOps.First()
						mreturn adapterOp.Value
					end
				end
				else if(attr .is. RangeFieldAdapterAttribute) then
				begin
					data rangeAttr = ^as(attr, @RangeFieldAdapterAttribute)
					data rangeFieldOps, @List<AdapterOp>
					if(opLookup.TryGetValue(rangeAttr.EdmName, rangeFieldOps))
					begin
						data rangeOp, @AdapterOp
						foreach rangeOp in rangeFieldOps
						begin
							if(rangeAttr.IsLowerBound) then
							begin
								if(rangeOp.OpKind == AdapterOpKind.Gt)
									mreturn rangeOp.Value
							end
							else if(rangeAttr.IsUpperBound) then
							begin
								if(rangeOp.OpKind == AdapterOpKind.Lt)
									mreturn rangeOp.Value
							end
							else
								throw new InvalidOperationException("invalid range attribute, must be either a Lower or Upper bound")
						end
					end
				end
				else if(attr .is. OrFieldAdapterAttribute)
				begin
					data orAttr = ^as(attr, @OrFieldAdapterAttribute)
					data orFieldOps, @List<AdapterOp>
					if(opLookup.TryGetValue(orAttr.EdmName, orFieldOps))
					begin
						if(orAttr.FillOrder < orFieldOps.Count)
							mreturn orFieldOps[orAttr.FillOrder].Value
					end
				end
			end

			mreturn ^null
		endmethod


		private static method BakeFieldValueGetter, @Func<string, Expression>
			adapterType, @Type
			filterLookup, @ParameterExpression
			uriParameters, @ParameterExpression
		proc
			lambda fieldValueGetter(name)
			begin
				data callMethod = ^typeof(AdapterActionInvoker).GetMethod("GetValueForDestinationField")
				mreturn Expression.Call(callMethod, Expression.Constant(adapterType), Expression.Constant(name), filterLookup, uriParameters)
			end
			mreturn fieldValueGetter
		endmethod

		protected override method ReleaseResources, void
			endparams
		proc
			if (_instance .is. IDisposable)
			begin
				((@IDisposable)_instance).Dispose()
			end
		endmethod
        
		private method Next, @Task
			byref inout next, State 
			byref inout scope, Scope 
			byref inout state, @object 
			byref inout isCompleted, boolean 
			endparams
		proc
			using next select
			(State.ActionBegin),
			begin
				begin
					data controllerContext = _controllerContext
					_cursor.Reset()
					_arguments = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase)
					data local_task = CreateInstance(_serviceProvider, _controllerContext.ActionDescriptor.ControllerTypeInfo)
					if (local_task.Status != TaskStatus.RanToCompletion)
					begin
						next = State.ActionNext
						mreturn local_task
					end
					goto StateActionNext
				end
			end
			(State.ActionNext),
			begin
			StateActionNext,
				begin
					data current = _cursor.GetNextFilter<IActionFilter, IAsyncActionFilter>()
					if (current.FilterAsync != ^null) then
					begin
						if (_actionExecutingContext == ^null)
						begin
							_actionExecutingContext = new ActionExecutingContext(_controllerContext, _filters, _arguments, _instance)
						end
						state = current.FilterAsync
						goto StateActionAsyncBegin
					end
					else if (current.Filter != ^null) then
					begin
						if (_actionExecutingContext == ^null)
						begin
							_actionExecutingContext = new ActionExecutingContext(_controllerContext, _filters, _arguments, _instance)
						end
						state = current.Filter
						goto StateActionSyncBegin
					end
					else
					begin
						goto StateActionInside
					end
				end
			end
			(State.ActionAsyncBegin),
			StateActionAsyncBegin,
			begin
				begin
					Debug.Assert(state != ^null)
					Debug.Assert(_actionExecutingContext != ^null)
					data filter = (@IAsyncActionFilter)state
					data actionExecutingContext = _actionExecutingContext
					_diagnosticSource.BeforeOnActionExecution(actionExecutingContext, filter)
					;_logger.BeforeExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecutionAsync", filter)
					data local_task = filter.OnActionExecutionAsync(actionExecutingContext, InvokeNextActionFilterAwaitedAsync)
					if (local_task.Status != TaskStatus.RanToCompletion)
					begin
						next = State.ActionAsyncEnd
						mreturn local_task
					end
					goto StateActionAsyncEnd
				end
			end
			(State.ActionAsyncEnd),
			StateActionAsyncEnd,
			begin
				begin
					Debug.Assert(state != ^null)
					Debug.Assert(_actionExecutingContext != ^null)
					data filter = (@IAsyncActionFilter)state
					if (_actionExecutedContext == ^null)
					begin
						;;  If we get here then the filter didn't call 'next' indicating a short circuit.
						;_logger.ActionFilterShortCircuited(filter)
						_actionExecutedContext = new ActionExecutedContext(_controllerContext, _filters, _instance) {Canceled = true, Result = _actionExecutingContext.Result}
					end
					_diagnosticSource.AfterOnActionExecution(_actionExecutedContext, filter)
					;_logger.AfterExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecutionAsync", filter)
					goto StateActionEnd
				end
			end
			(State.ActionSyncBegin),
			StateActionSyncBegin,
			begin
				begin
					Debug.Assert(state != ^null)
					Debug.Assert(_actionExecutingContext != ^null)
					data filter = (@IActionFilter)state
					data actionExecutingContext = _actionExecutingContext
					_diagnosticSource.BeforeOnActionExecuting(actionExecutingContext, filter)
					;_logger.BeforeExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuting", filter)
					filter.OnActionExecuting(actionExecutingContext)
					_diagnosticSource.AfterOnActionExecuting(actionExecutingContext, filter)
					;_logger.AfterExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuting", filter)
					if (actionExecutingContext.Result != ^null)
					begin
						;;  Short-circuited by setting a result.
						;_logger.ActionFilterShortCircuited(filter)
						_actionExecutedContext = new ActionExecutedContext(_actionExecutingContext, _filters, _instance) {Canceled = true, Result = _actionExecutingContext.Result}
						goto StateActionEnd
					end
					data local_task = InvokeNextActionFilterAsync()
					if (local_task.Status != TaskStatus.RanToCompletion)
					begin
						next = State.ActionSyncEnd
						mreturn local_task
					end
					goto StateActionSyncEnd
				end
			end
			(State.ActionSyncEnd),
			StateActionSyncEnd,
			begin
				begin
					Debug.Assert(state != ^null)
					Debug.Assert(_actionExecutingContext != ^null)
					Debug.Assert(_actionExecutedContext != ^null)
					data filter = (@IActionFilter)state
					data actionExecutedContext = _actionExecutedContext
					_diagnosticSource.BeforeOnActionExecuted(actionExecutedContext, filter)
					;_logger.BeforeExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuted", filter)
					filter.OnActionExecuted(actionExecutedContext)
					_diagnosticSource.AfterOnActionExecuted(actionExecutedContext, filter)
					;_logger.AfterExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuted", filter)
					goto StateActionEnd
				end
			end
			(State.ActionInside),
			StateActionInside,
			begin
				begin
					data local_task = InvokeActionMethodAsync()
					if (local_task.Status != TaskStatus.RanToCompletion)
					begin
						next = State.ActionEnd
						mreturn local_task
					end
					goto StateActionEnd
				end
			end
			(State.ActionEnd),
			StateActionEnd,
			begin
				begin
					if (scope == Scope.Action)
					begin
						if (_actionExecutedContext == ^null)
						begin
							_actionExecutedContext = new ActionExecutedContext(_controllerContext, _filters, _instance) { Result = _result }
						end
						isCompleted = true
						mreturn Task.CompletedTask
					end
					data actionExecutedContext = _actionExecutedContext
					Rethrow(actionExecutedContext)
					if (actionExecutedContext != ^null)
					begin
						_result = actionExecutedContext.Result
					end
					isCompleted = true
					mreturn Task.CompletedTask
				end
			end
			(),
			begin
				throw new InvalidOperationException()
			end
			endusing
		endmethod
        
		private async method InvokeNextActionFilterAsync, @Task
			endparams
		proc
			try
			begin
				data next = State.ActionNext
				data state = (@object)^null
				data local_scope = Scope.Action
				data isCompleted = false
				while (!isCompleted) do
				begin
					await Next(next, local_scope, state, isCompleted)
				end
			end
			catch (exception, @Exception)
			begin
				_actionExecutedContext = new ActionExecutedContext(_controllerContext, _filters, _instance) { ExceptionDispatchInfo = ExceptionDispatchInfo.Capture(exception) }
			end
			endtry
			Debug.Assert(_actionExecutedContext != ^null)
		endmethod
        
		private async method InvokeNextActionFilterAwaitedAsync, @Task<ActionExecutedContext>
			endparams
		proc
			Debug.Assert(_actionExecutingContext != ^null)
			if (_actionExecutingContext.Result != ^null)
			begin
				;;  If we get here, it means that an async filter set a result AND called next(). This is forbidden.
				;;data message = Resources.FormatAsyncActionFilter_InvalidShortCircuit(^typeof(IAsyncActionFilter).Name, "Result", ^typeof(ActionExecutingContext).Name, ^typeof(ActionExecutionDelegate).Name)
				throw new InvalidOperationException("invalid short circut")
			end
			await InvokeNextActionFilterAsync()
			Debug.Assert(_actionExecutedContext != ^null)
			mreturn _actionExecutedContext
		endmethod
        
		private async method InvokeActionMethodAsync, @Task
			endparams
		proc
			data controllerContext = _controllerContext
			data controller = _instance
			data arguments = _arguments
			data diagnosticSource = _diagnosticSource
			data logger = _logger
			data result, @IActionResult, ^null
			try
			begin
				;diagnosticSource.BeforeActionMethod(controllerContext, arguments, controller)
				;logger.ActionMethodExecuting(controllerContext, orderedArguments)
				;data stopwatch = ValueStopwatch.StartNew()

				data methodName = _controllerContext.ActionDescriptor.DisplayName
				data callableDelegate = BuildInvoker()
				disposable data requestBody = new StreamReader(_controllerContext.HttpContext.Request.Body)
				data body = requestBody.ReadToEnd()
				;;TODO: maybe this should return a task by default to support async methods
				result = await callableDelegate(_controllerContext.ActionDescriptor.Properties, body, controller)

;                data actionResultValueTask = actionMethodExecutor.Execute(_mapper, objectMethodExecutor, controller, orderedArguments)
;                if (actionResultValueTask.IsCompletedSuccessfully) then
;                begin
;                    result = actionResultValueTask.Result
;                end
;                else
;                begin
;                    result = await actionResultValueTask
;                end
				_result = result
				;logger.ActionMethodExecuted(controllerContext, result, stopwatch.GetElapsedTime())
			end
			finally
			begin
				;diagnosticSource.AfterActionMethod(controllerContext, arguments, controllerContext, result)
			end
			endtry
		endmethod
        
		;;;  <remarks><see cref="ResourceInvoker.InvokeFilterPipelineAsync"/> for details on what the
		;;;  variables in this method represent.</remarks>
		protected override async method InvokeInnerFilterAsync, @Task
			endparams
		proc
			data next = State.ActionBegin
			data local_scope = Scope.Invoker
			data state = (@object)^null
			data isCompleted = false
			while (!isCompleted) do
			begin
				await Next(next, local_scope, state, isCompleted)
			end
		endmethod
        
		private static method Rethrow, void
			context, @ActionExecutedContext 
			endparams
		proc
			if (context == ^null)
			begin
				mreturn
			end
			if (context.ExceptionHandled)
			begin
				mreturn
			end
			if (context.ExceptionDispatchInfo != ^null)
			begin
				context.ExceptionDispatchInfo.^id("Throw")()
			end
			if (context.Exception != ^null)
			begin
				throw context.Exception
			end
		endmethod
        
		private enum Scope
			Invoker
			Action
		endenum
        
		private enum State
			ActionBegin
			ActionNext
			ActionAsyncBegin
			ActionAsyncEnd
			ActionSyncBegin
			ActionSyncEnd
			ActionInside
			ActionEnd
		endenum

		public static async method WrapResponseForExceptions, @Task<IActionResult>
			callBody, @Func<Task<IActionResult>>
		proc
			;;TODO add request/error logging here
			try
			begin
				mreturn await callBody()
			end
			catch(ex, @Exception)
			begin
				mreturn new BadRequestResult()
			end
			endtry
		endmethod

		

	endclass

	enum AdapterOpKind
		Eq,
		Ne,
		Lt,
		Le,
		Gt,
		Ge,
		AndEq,
		OrEq
	endenum

	class AdapterOp
		public readwrite property Name, @string
		public readwrite property OpKind, AdapterOpKind
		public readwrite property Value, @object
	endclass
endnamespace
