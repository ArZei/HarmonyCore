import System
import System.Collections.Generic
import System.Text
import Microsoft.AspNet.OData.Routing.Conventions
import Microsoft.AspNet.OData.Routing
import Microsoft.AspNetCore.Routing
import Microsoft.AspNetCore.Mvc.Controllers
import Microsoft.AspNet.OData.Extensions
import Microsoft.OData.UriParser
import System.Linq
import System.Collections.Concurrent
import System.Reflection
import Microsoft.AspNetCore.Mvc.ModelBinding
import Microsoft.AspNetCore.Mvc.ApplicationModels
import Microsoft.AspNetCore.Mvc.Infrastructure
import Microsoft.AspNet.OData.Query
import Microsoft.AspNet.OData
import Microsoft.OData.Edm

namespace Harmony.OData

    public class HarmonySprocRoutingConvention implements IODataRoutingConvention
        private static SprocDispatcherLookup, @ConcurrentDictionary<string, Type>, new ConcurrentDictionary<String, Type>()

        public static method AddSprocDispatcher<T>, void
            singletonType, @string
        proc
            SprocDispatcherLookup[singletonType] = ^typeof(HarmonySprocDispatcher<T>)
        endmethod


        public virtual method SelectAction, @IEnumerable<ControllerActionDescriptor> 
            routeContext, @RouteContext 
            endparams
        proc
            if (routeContext == ^null)
                mreturn ^null
			data feature = routeContext.HttpContext.ODataFeature()
			data odataPath = feature.Path
            if (odataPath.PathTemplate == "~/unboundfunction" ||
            &    odataPath.PathTemplate == "~/unboundaction") then
                &    
            begin
                data segment, @OperationImportSegment, ^as(odataPath.Segments[odataPath.Segments.Count - 1], OperationImportSegment)
                
                if (segment != ^null)
                begin
                    ;segment
                end
            end
            else if(odataPath.PathTemplate == "~/singleton/action"||
            &    odataPath.PathTemplate == "~/singleton/function")
            begin
			data opSeg, @OperationSegment, ^as(odataPath.Segments[1], OperationSegment)
                data singletonSeg, @SingletonSegment, ^as(odataPath.Segments[0], SingletonSegment)
                if (opSeg != ^null && singletonSeg != ^null)
                begin
                    data dispatcherType, @Type
                    if(SprocDispatcherLookup.TryGetValue(singletonSeg.Identifier, dispatcherType))
                    begin
                        data realControllerType = dispatcherType.GenericTypeArguments[1] 
                        data controllerTypeInfo = realControllerType.GetTypeInfo()
                        data actionCollectionProvider = (@IActionDescriptorCollectionProvider)routeContext.HttpContext.RequestServices.GetService(^typeof(IActionDescriptorCollectionProvider))
                        data opName = opSeg.Identifier
                        if(String.IsNullOrEmpty(opName) && opSeg.Operations != ^null)
                            opName = opSeg.Operations.First().Name

                        data actionDescriptor = actionCollectionProvider.ActionDescriptors.Items.OfType<ControllerActionDescriptor>().FirstOrDefault(lambda(aDesc) { aDesc.ControllerTypeInfo == controllerTypeInfo && string.Compare(aDesc.ActionName, opName, true) == 0 }) 
                        if(actionDescriptor != ^null)
                        begin
							actionDescriptor.RouteValues["HarmonySprocRouteSentinel"] = ""
                            mreturn new List<ControllerActionDescriptor>() { actionDescriptor }
                        end

                    end
                end
            end

            mreturn Enumerable.Empty<ControllerActionDescriptor>()
        endmethod
    endclass

endnamespace
