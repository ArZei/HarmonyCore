import Microsoft.AspNetCore.Mvc
import System
import System.Collections.Generic
import System.Diagnostics
import System.Linq
import Microsoft.AspNetCore.Mvc.Abstractions
import Microsoft.AspNetCore.Mvc.Controllers
import Microsoft.AspNetCore.Mvc.Infrastructure
import Microsoft.AspNetCore.Mvc.ModelBinding
import Microsoft.Extensions.Logging
import Microsoft.Extensions.Options
import Microsoft.AspNetCore.Mvc.Internal
import Microsoft.AspNetCore.Mvc.Filters
namespace Harmony.OData

    public class HarmonySprocActionInvokerProvider implements IActionInvokerProvider

        public virtual property Order, int
            method get
            proc
                mreturn 0
            endmethod
        endproperty

        private readonly _valueProviderFactories, @IReadOnlyList<IValueProviderFactory>
        private readonly _maxModelValidationErrors, int
        private readonly _logger, @ILogger
        private readonly _diagnosticSource, @DiagnosticSource
        private readonly _mapper, @Microsoft.AspNetCore.Mvc.Infrastructure.IActionResultTypeMapper
        private readonly _serviceProvider, @IServiceProvider
        
        public method HarmonySprocActionInvokerProvider
            optionsAccessor, @IOptions<MvcOptions> 
            loggerFactory, @ILoggerFactory 
            diagnosticSource, @DiagnosticSource 
            mapper, @IActionResultTypeMapper 
            serviceProvider, @IServiceProvider
            endparams
        proc
            _valueProviderFactories = (@IReadOnlyList<IValueProviderFactory>)optionsAccessor.Value.ValueProviderFactories
            _maxModelValidationErrors = optionsAccessor.Value.MaxModelValidationErrors
            _logger = loggerFactory.CreateLogger<ControllerActionInvoker>()
            _diagnosticSource = diagnosticSource
            _mapper = mapper
            _serviceProvider = serviceProvider
        endmethod
        
        public method OnProvidersExecuting, void
            context, @ActionInvokerProviderContext 
            endparams
        proc
            if (context == ^null)
            begin
                throw new ArgumentNullException("context")
            end
            if (context.ActionContext.ActionDescriptor .is. ControllerActionDescriptor && context.ActionContext.ActionDescriptor.RouteValues.ContainsKey("HarmonySprocRouteSentinel"))
            begin
                data controllerContext = new ControllerContext(context.ActionContext)
                ;;  PERF: These are rarely going to be changed, so let's go copy-on-write.
                controllerContext.ValueProviderFactories = new CopyOnWriteList<IValueProviderFactory>(_valueProviderFactories)
                controllerContext.ModelState.MaxAllowedErrors = _maxModelValidationErrors
                ;;TODO compiler bug this shouldnt compile, but it produces invalid il
                ;;data invoker = new HarmonySprocActionInvoker(_logger, _diagnosticSource, _mapper, controllerContext, context.ActionContext.ActionDescriptor.FilterDescriptors.Select(lambda(desc) { desc.Filter }).ToArray(), _serviceProvider)
                data invoker = new HarmonySprocActionInvoker(_logger, _diagnosticSource, _mapper, controllerContext, context.ActionContext.ActionDescriptor.FilterDescriptors.Select(lambda(desc) { desc.Filter }).ToArray(), context.ActionContext.HttpContext.RequestServices)
                context.Result = invoker
            end
        endmethod
        
        public method OnProvidersExecuted, void
            context, @ActionInvokerProviderContext 
            endparams
        proc
        
        endmethod
    endclass

endnamespace
