import System
import System.Collections.Generic
import System.Diagnostics
import System.Runtime.ExceptionServices
import System.Threading.Tasks
import Microsoft.AspNetCore.Mvc.Abstractions
import Microsoft.AspNetCore.Mvc.Filters
import Microsoft.AspNetCore.Mvc.Infrastructure
import Microsoft.Extensions.Logging
import Microsoft.AspNetCore.Mvc.Internal
import Microsoft.AspNetCore.Mvc
import System.Linq.Expressions
import System.Collections.Concurrent
import System.Reflection
import Microsoft.Extensions.DependencyInjection
import System.IO
import Newtonsoft.Json
import Newtonsoft.Json.Linq

namespace Harmony.OData

    public class HarmonySprocActionInvoker extends ResourceInvoker implements IActionInvoker
        private static ExpressionLookup, @ConcurrentDictionary<string, Func<IDictionary<object, object>, string, object, IActionResult>>, new ConcurrentDictionary<string, Func<IDictionary<object, object>, string, object, IActionResult>>()
        private readonly _controllerContext, @ControllerContext
        private _arguments, @Dictionary<string, object>
        private _actionExecutingContext, @ActionExecutingContext
        private _actionExecutedContext, @ActionExecutedContext
        private _serviceProvider, @IServiceProvider
        internal method HarmonySprocActionInvoker
            logger, @ILogger 
            diagnosticSource, @DiagnosticSource 
            mapper, @IActionResultTypeMapper 
            controllerContext, @ControllerContext 
            filters, [#]@IFilterMetadata 
            serviceProvider, @IServiceProvider
            endparams
            parent(diagnosticSource, logger, mapper, controllerContext, filters, controllerContext.ValueProviderFactories)
        proc
            _controllerContext = controllerContext
            _serviceProvider = serviceProvider
        endmethod



        protected override method ReleaseResources, void
            endparams
        proc
            if (_instance .is. IDisposable)
            begin
                ((@IDisposable)_instance).Dispose()
            end
        endmethod
        
        private method Next, @Task
            byref inout next, State 
            byref inout scope, Scope 
            byref inout state, @object 
            byref inout isCompleted, boolean 
            endparams
        proc
            using next select
            (State.ActionBegin),
            begin
                begin
                    data controllerContext = _controllerContext
                    _cursor.Reset()
                    
                    _instance = CreateInstance(_serviceProvider, _controllerContext.ActionDescriptor.ControllerTypeInfo)
                    _arguments = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase)
                    data local_task = BindArgumentsAsync()
                    if (local_task.Status != TaskStatus.RanToCompletion)
                    begin
                        next = State.ActionNext
                        mreturn local_task
                    end
                    goto StateActionNext
                end
            end
            (State.ActionNext),
            begin
StateActionNext,
                begin
                    data current = _cursor.GetNextFilter<IActionFilter, IAsyncActionFilter>()
                    if (current.FilterAsync != ^null) then
                    begin
                        if (_actionExecutingContext == ^null)
                        begin
                            _actionExecutingContext = new ActionExecutingContext(_controllerContext, _filters, _arguments, _instance)
                        end
                        state = current.FilterAsync
                        goto StateActionAsyncBegin
                    end
                    else if (current.Filter != ^null) then
                    begin
                        if (_actionExecutingContext == ^null)
                        begin
                            _actionExecutingContext = new ActionExecutingContext(_controllerContext, _filters, _arguments, _instance)
                        end
                        state = current.Filter
                        goto StateActionSyncBegin
                    end
                    else
                    begin
                        goto StateActionInside
                    end
                end
            end
            (State.ActionAsyncBegin),
StateActionAsyncBegin,
            begin
                begin
                    Debug.Assert(state != ^null)
                    Debug.Assert(_actionExecutingContext != ^null)
                    data filter = (@IAsyncActionFilter)state
                    data actionExecutingContext = _actionExecutingContext
                    _diagnosticSource.BeforeOnActionExecution(actionExecutingContext, filter)
                    ;_logger.BeforeExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecutionAsync", filter)
                    data local_task = filter.OnActionExecutionAsync(actionExecutingContext, InvokeNextActionFilterAwaitedAsync)
                    if (local_task.Status != TaskStatus.RanToCompletion)
                    begin
                        next = State.ActionAsyncEnd
                        mreturn local_task
                    end
                    goto StateActionAsyncEnd
                end
            end
            (State.ActionAsyncEnd),
StateActionAsyncEnd,
            begin
                begin
                    Debug.Assert(state != ^null)
                    Debug.Assert(_actionExecutingContext != ^null)
                    data filter = (@IAsyncActionFilter)state
                    if (_actionExecutedContext == ^null)
                    begin
                        ;;  If we get here then the filter didn't call 'next' indicating a short circuit.
                        ;_logger.ActionFilterShortCircuited(filter)
                        _actionExecutedContext = new ActionExecutedContext(_controllerContext, _filters, _instance) {Canceled = true, Result = _actionExecutingContext.Result}
                    end
                    _diagnosticSource.AfterOnActionExecution(_actionExecutedContext, filter)
                    ;_logger.AfterExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecutionAsync", filter)
                    goto StateActionEnd
                end
            end
            (State.ActionSyncBegin),
StateActionSyncBegin,
            begin
                begin
                    Debug.Assert(state != ^null)
                    Debug.Assert(_actionExecutingContext != ^null)
                    data filter = (@IActionFilter)state
                    data actionExecutingContext = _actionExecutingContext
                    _diagnosticSource.BeforeOnActionExecuting(actionExecutingContext, filter)
                    ;_logger.BeforeExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuting", filter)
                    filter.OnActionExecuting(actionExecutingContext)
                    _diagnosticSource.AfterOnActionExecuting(actionExecutingContext, filter)
                    ;_logger.AfterExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuting", filter)
                    if (actionExecutingContext.Result != ^null)
                    begin
                        ;;  Short-circuited by setting a result.
                        ;_logger.ActionFilterShortCircuited(filter)
                        _actionExecutedContext = new ActionExecutedContext(_actionExecutingContext, _filters, _instance) {Canceled = true, Result = _actionExecutingContext.Result}
                        goto StateActionEnd
                    end
                    data local_task = InvokeNextActionFilterAsync()
                    if (local_task.Status != TaskStatus.RanToCompletion)
                    begin
                        next = State.ActionSyncEnd
                        mreturn local_task
                    end
                    goto StateActionSyncEnd
                end
            end
            (State.ActionSyncEnd),
StateActionSyncEnd,
            begin
                begin
                    Debug.Assert(state != ^null)
                    Debug.Assert(_actionExecutingContext != ^null)
                    Debug.Assert(_actionExecutedContext != ^null)
                    data filter = (@IActionFilter)state
                    data actionExecutedContext = _actionExecutedContext
                    _diagnosticSource.BeforeOnActionExecuted(actionExecutedContext, filter)
                    ;_logger.BeforeExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuted", filter)
                    filter.OnActionExecuted(actionExecutedContext)
                    _diagnosticSource.AfterOnActionExecuted(actionExecutedContext, filter)
                    ;_logger.AfterExecutingMethodOnFilter(MvcCoreLoggerExtensions.ActionFilter, "OnActionExecuted", filter)
                    goto StateActionEnd
                end
            end
            (State.ActionInside),
StateActionInside,
            begin
                begin
                    data local_task = InvokeActionMethodAsync()
                    if (local_task.Status != TaskStatus.RanToCompletion)
                    begin
                        next = State.ActionEnd
                        mreturn local_task
                    end
                    goto StateActionEnd
                end
            end
            (State.ActionEnd),
StateActionEnd,
            begin
                begin
                    if (scope == Scope.Action)
                    begin
                        if (_actionExecutedContext == ^null)
                        begin
                            _actionExecutedContext = new ActionExecutedContext(_controllerContext, _filters, _instance) { Result = _result }
                        end
                        isCompleted = true
                        mreturn Task.CompletedTask
                    end
                    data actionExecutedContext = _actionExecutedContext
                    Rethrow(actionExecutedContext)
                    if (actionExecutedContext != ^null)
                    begin
                        _result = actionExecutedContext.Result
                    end
                    isCompleted = true
                    mreturn Task.CompletedTask
                end
            end
            (),
            begin
                throw new InvalidOperationException()
            end
            endusing
        endmethod
        
        private async method InvokeNextActionFilterAsync, @Task
            endparams
        proc
            try
            begin
                data next = State.ActionNext
                data state = (@object)^null
                data local_scope = Scope.Action
                data isCompleted = false
                while (!isCompleted) do
                begin
                    await Next(next, local_scope, state, isCompleted)
                end
            end
            catch (exception, @Exception)
            begin
                _actionExecutedContext = new ActionExecutedContext(_controllerContext, _filters, _instance) { ExceptionDispatchInfo = ExceptionDispatchInfo.Capture(exception) }
            end
            endtry
            Debug.Assert(_actionExecutedContext != ^null)
        endmethod
        
        private async method InvokeNextActionFilterAwaitedAsync, @Task<ActionExecutedContext>
            endparams
        proc
            Debug.Assert(_actionExecutingContext != ^null)
            if (_actionExecutingContext.Result != ^null)
            begin
                ;;  If we get here, it means that an async filter set a result AND called next(). This is forbidden.
                ;;data message = Resources.FormatAsyncActionFilter_InvalidShortCircuit(^typeof(IAsyncActionFilter).Name, "Result", ^typeof(ActionExecutingContext).Name, ^typeof(ActionExecutionDelegate).Name)
                throw new InvalidOperationException("invalid short circut")
            end
            await InvokeNextActionFilterAsync()
            Debug.Assert(_actionExecutedContext != ^null)
            mreturn _actionExecutedContext
        endmethod
        
        private async method InvokeActionMethodAsync, @Task
            endparams
        proc
            data controllerContext = _controllerContext
            data controller = _instance
            data arguments = _arguments
            data diagnosticSource = _diagnosticSource
            data logger = _logger
            data result, @IActionResult, ^null
            try
            begin
                ;diagnosticSource.BeforeActionMethod(controllerContext, arguments, controller)
                ;logger.ActionMethodExecuting(controllerContext, orderedArguments)
                ;data stopwatch = ValueStopwatch.StartNew()

                data methodName = _controllerContext.ActionDescriptor.DisplayName
                data callableDelegate = ExpressionLookup.GetOrAdd(methodName, lambda(methodName) { GenerateCallExpression(_controllerContext.ActionDescriptor.MethodInfo, _controllerContext.ActionDescriptor.ControllerTypeInfo) })
                disposable data requestBody = new StreamReader(_controllerContext.HttpContext.Request.Body)
                data body = requestBody.ReadToEnd()
                ;;TODO: maybe this should return a task by default to support async methods
                result = callableDelegate(_controllerContext.ActionDescriptor.Properties, body, controller)

;                data actionResultValueTask = actionMethodExecutor.Execute(_mapper, objectMethodExecutor, controller, orderedArguments)
;                if (actionResultValueTask.IsCompletedSuccessfully) then
;                begin
;                    result = actionResultValueTask.Result
;                end
;                else
;                begin
;                    result = await actionResultValueTask
;                end
                _result = result
                ;logger.ActionMethodExecuted(controllerContext, result, stopwatch.GetElapsedTime())
            end
            finally
            begin
                ;diagnosticSource.AfterActionMethod(controllerContext, arguments, controllerContext, result)
            end
            endtry
        endmethod
        
        ;;;  <remarks><see cref="ResourceInvoker.InvokeFilterPipelineAsync"/> for details on what the
        ;;;  variables in this method represent.</remarks>
        protected override async method InvokeInnerFilterAsync, @Task
            endparams
        proc
            data next = State.ActionBegin
            data local_scope = Scope.Invoker
            data state = (@object)^null
            data isCompleted = false
            while (!isCompleted) do
            begin
                await Next(next, local_scope, state, isCompleted)
            end
        endmethod
        
        private static method Rethrow, void
            context, @ActionExecutedContext 
            endparams
        proc
            if (context == ^null)
            begin
                mreturn
            end
            if (context.ExceptionHandled)
            begin
                mreturn
            end
            if (context.ExceptionDispatchInfo != ^null)
            begin
                context.ExceptionDispatchInfo.^id("Throw")()
            end
            if (context.Exception != ^null)
            begin
                throw context.Exception
            end
        endmethod
        
        private method BindArgumentsAsync, @Task
            endparams
        proc
            ;;  Perf: Avoid allocating async state machines where possible. We only need the state
            ;;  machine if you need to bind properties or arguments.
            ;;data actionDescriptor = _controllerContext.ActionDescriptor
            ;;if ((actionDescriptor.BoundProperties.Count == 0) && (actionDescriptor.Parameters.Count == 0))
            ;;begin
                mreturn Task.CompletedTask
            ;;end
            ;;Debug.Assert(_cacheEntry.ControllerBinderDelegate != ^null)
            ;;mreturn _cacheEntry.ControllerBinderDelegate(_controllerContext, _instance, _arguments)
        endmethod

        private enum Scope
            Invoker
            Action
        endenum
        
        private enum State
            ActionBegin
            ActionNext
            ActionAsyncBegin
            ActionAsyncEnd
            ActionSyncBegin
            ActionSyncEnd
            ActionInside
            ActionEnd
        endenum

        public static method WrapResponseForExceptions, @IActionResult
            callBody, @Func<IActionResult>
        proc
            ;;TODO add request/error logging here
            try
            begin
                mreturn callBody()
            end
            catch(ex, @Exception)
            begin
                mreturn new BadRequestResult()
            end
            endtry
        endmethod

        public static method CreateInstance, @object
            serviceProvider, @IServiceProvider
            targetType, @Type
        proc
            mreturn ActivatorUtilities.CreateInstance(serviceProvider, targetType)
        endmethod

        public static method DeserializeObject, @Object
            body, @string
        proc
            mreturn JsonConvert.DeserializeObject(body)
        endmethod

        private static method GenerateJsonConvertExpression, @Expression
            bodyString, @Expression
        proc
            data deserializeMethod = ^typeof(HarmonySprocActionInvoker).GetMethod("DeserializeObject")
            mreturn Expression.Convert(Expression.Call(deserializeMethod, bodyString), ^typeof(Newtonsoft.Json.Linq.JObject)) 
        endmethod

        private static method GenerateJTokenValue, @Expression
            targetType, @Type
            sourceExpression, @Expression
        proc
            ;;TODO this might need to deal explicitly with IEnumerable and array-of
            mreturn Expression.Call(sourceExpression, "ToObject", new Type[#] { targetType }, new Expression[0])
        endmethod

        private method GenerateCallExpression, @Func<IDictionary<object, object>, string, object, IActionResult>
            targetMethodInfo, @MethodInfo
            targetType, @Type
        proc
            data targetParameters = targetMethodInfo.GetParameters()
            data returnType = targetMethodInfo.ReturnType
            ;;TODO: if the routine has out/ref parameters, we need to translate those into a return type 

            data uriArguments = Expression.Parameter(^typeof(IDictionary<object, object>), "uriArguments")
            data bodyString = Expression.Parameter(^typeof(String), "bodyString")
            data instanceArg = Expression.Parameter(^typeof(Object), "instance")
            data parameterValues = new List<Expression>()
            data instanceValue, @Expression, ^null
            if(!targetMethodInfo.IsStatic)
            begin
                instanceValue = Expression.Convert(instanceArg, targetType)
            end

            data parsedJson = new Lazy<Expression>(lambda() { GenerateJsonConvertExpression(bodyString) })
            data paramInfo, @ParameterInfo
            foreach paramInfo in targetParameters
            begin
                ;;extract parmeters from the passed in dictionary, possibly from the post body
                data parameterNameConst = Expression.Constant(paramInfo.Name)
                data tokenInstance, @Expression, Expression.Call(parsedJson.Value, "SelectToken", new Type[0], new Expression[#] { parameterNameConst })
                data itemResult = Expression.Condition(Expression.Call(uriArguments, "ContainsKey", new Type[0], parameterNameConst),
                &    Expression.Convert(Expression.Property(uriArguments, "Item", parameterNameConst), paramInfo.ParameterType),
                &    GenerateJTokenValue(paramInfo.ParameterType, tokenInstance))
                
                parameterValues.Add(itemResult)
            end

            data conversionBody = Expression.Call(instanceValue, targetMethodInfo, parameterValues)
            data okResultType = ^typeof(OkResult)
            data okObjectResultType = ^typeof(OkObjectResult)
            data resultExpression, @Expression
            if(returnType == ^typeof(Void)) then
            begin
                resultExpression = Expression.Block(new Expression[#] { conversionBody, Expression.New(okResultType) })
            end
            else
            begin
                data okObjectConstructor = okObjectResultType.GetConstructor(new Type[#] { ^typeof(Object) })
                resultExpression = Expression.New(okObjectConstructor, new Expression[#] { Expression.Convert(conversionBody, ^typeof(Object)) })
            end

            data conversionRoutine = Expression.Lambda<Func<IActionResult>>(resultExpression, new ParameterExpression[0])
            ;;TODO investigate compiler bug here, fails at runtime, something wrong with the type info
            ;;data wrapResponseMethod = thisType.GetMethod("WrapResponseForExceptions")
            data wrapResponseMethod = this.GetType().GetMethod("WrapResponseForExceptions")
            data responseWrapper = Expression.Call(wrapResponseMethod, conversionRoutine)
            ;;todo investigate compiler bug here
            ;;data resultLambdaExpression = Expression.Lambda<Func<IDictionary<object, object>, string, IServiceProvider, IActionResult>>(responseWrapper, new ParameterExpression[#] { uriArguments, bodyString })
            data resultLambdaExpression, @Expression<Func<IDictionary<object, object>, string, object, IActionResult>>, Expression.Lambda<Func<IDictionary<object, object>, string, object, IActionResult>>(responseWrapper, new ParameterExpression[#] { uriArguments, bodyString, instanceArg })
            mreturn resultLambdaExpression.Compile()

        endmethod

    endclass

endnamespace
