
import Json
import System.Collections

namespace Harmony.TraditionalBridge

	;;; <summary>
	;;; 
	;;; </summary>
	public abstract class RoutineDispatcher

		protected loggingChannel, i4
		protected mDispatchStubs, @StringDictionary

		;;; <summary>
		;;; Constructor
		;;; </summary>
		public method RoutineDispatcher
		proc
			mDispatchStubs = new StringDictionary()
			open(loggingChannel=0, O, "dispatcher.log")
		endmethod

		;;; <summary>
		;;; Deserialize a JSON object to a data object
		;;; </summary>
		;;; <param name="obj">JSON object to deserialize</param>
		;;; <param name="targetType">Instance of a data object metadata class indicating the type to deserialize to</param>
		;;; <returns>A data object of the appropriate type</returns>
		public virtual method DeserializeObject, @DataObjectBase
			obj, @JsonObject
			targetType, @DataObjectMetadataBase
			record
				passedValue, @JsonObject
				objectMetadata, @DataObjectMetadataBase
				objectType, @JsonText
			endrecord
		proc
			passedValue = (@JsonObject)obj.GetProperty("PassedValue")
			objectMetadata = targetType
			if(objectMetadata == ^null)
			begin
				objectType = (@JsonText)passedValue.GetProperty("Type")
				objectMetadata = DataObjectMetadataBase.LookupType(objectType.Value)
			end
			mreturn objectMetadata.Deserialize(passedValue)
		endmethod

		;;Protocol note: this is another place where we need to decide how much we can ommit from the contents of collections
		;;this is currently assuming we are only working with DataObjectBase

		;;; <summary>
		;;; Deserializes a JSON object containing a collection of serialized data objects into an ArrayList of data objects.
		;;; Each of the data objects in the collection could be of a different type.
		;;; </summary>
		;;; <param name="obj">JSON object to deserialize</param>
		;;; <returns>ArrayList containing data objects.</returns>
		public virtual method DeserializeObjectCollection, @ArrayList
			obj, @JsonObject
			record
				passedValue, @JsonArray
				elementValue, @JsonObject
				objectMetadata, @DataObjectMetadataBase
				objectType, @JsonText
				result, @ArrayList
			endrecord
		proc
			result = new ArrayList()
			passedValue = (@JsonArray)obj.GetProperty("PassedValue")
			foreach elementValue in passedValue.arrayValues
			begin
				;;TODO might be able to skip the lookup if the typename hasnt changed
				objectType = (@JsonText)elementValue.GetProperty("Type")
				objectMetadata = DataObjectMetadataBase.LookupType(objectType.Value)
				result.Add(objectMetadata.Deserialize(elementValue))
			end
			mreturn result
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="memoryHandle"></param>
		;;; <param name="collection"></param>
		public method UnwrapObjectCollection, void
			memoryHandle, i4
			collection, @ArrayList
		proc
			
		endmethod

		;;this needs to take an expected type parameter of some kind so we can do basic conversions int -> decimal vs int -> int

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="buffer"></param>
		;;; <param name="elementInfo"></param>
		;;; <param name="bufferPosition"></param>
		;;; <param name="collection"></param>
		public method UnwrapObjectCollection, void
			inout buffer, a
			elementInfo, @ArgumentDataDefinition
			inout bufferPosition, i
			collection, @JsonArray
			record
				element, @JsonValue
			endrecord
		proc
			foreach element in collection.arrayValues
			begin
				if(element .is. JsonObject) then
				begin
					data stringValue = ((@JsonText)((@JsonObject)element).GetProperty("Value")).Value
					buffer(bufferPosition:elementInfo.ElementSize) = stringValue
				end
				else if(element .is. JsonText) then
				begin
					buffer(bufferPosition:elementInfo.ElementSize) = ((@JsonText)element).Value
				end
				else if(element .is. JsonNumber) then
				begin
					buffer(bufferPosition:elementInfo.ElementSize) = ((@JsonNumber)element).Value
				end
				else if(element .is. JsonInt) then
				begin
					if(elementInfo.DataType == FieldDataType.IntegerField) then
						buffer(bufferPosition:elementInfo.ElementSize) = ((@JsonNumber)element).Value
					else
						buffer(bufferPosition:elementInfo.ElementSize) = %string(((@JsonNumber)element).Value)
				end
				else if(element .is. JsonBoolean) then
				begin
					
				end
				else if(element .is. JsonArray)
				begin

				end
				bufferPosition += elementInfo.ElementSize
			end

		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="argument"></param>
		;;; <returns></returns>
		public method GetArgumentDataDefForCollection, @ArgumentDataDefinition
			argument, @JsonObject
			record
				result, @ArgumentDataDefinition
				dataType, i4
			endrecord
		proc
			argument.TryGetProperty("DecimalPrecision", result.DecimalPrecision)
			argument.TryGetProperty("ElementSize", result.ElementSize)
			if(argument.TryGetProperty("DataType", dataType))
				result.DataType = (FieldDataType)dataType

			argument.TryGetBoolProperty("ReturnedValue", result.ReturnedValue)

			mreturn result

		endmethod

		;;TODO: This needs to take an expected type parameter of some kind so we can do basic conversions int -> decimal vs int -> int

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="elementInfo"></param>
		;;; <param name="collection"></param>
		;;; <param name="targetArrayList"></param>
		public method UnwrapObjectCollection, void
			elementInfo, @ArgumentDataDefinition
			collection, @JsonArray
			targetArrayList, @ArrayList
			record
				element, @JsonValue
			endrecord
		proc
			foreach element in collection.arrayValues
			begin
				if(element .is. JsonObject) then
				begin
					data stringValue = ((@JsonText)((@JsonObject)element).GetProperty("Value")).Value
					targetArrayList.Add((@a)(a)stringValue)
				end
				else if(element .is. JsonText) then
				begin
					;;TODO this needs to handle the arg type, could be d, id, a
					targetArrayList.Add((@a)(a)((@JsonText)element).Value)
				end
				else if(element .is. JsonNumber) then
				begin
					targetArrayList.Add((@id)((@JsonNumber)element).Value)
				end
				else if(element .is. JsonInt) then
				begin
					;;TODO this needs to handle the arg type, could be i, d, id
					targetArrayList.Add((@i)((@JsonInt)element).Value)
				end
				else if(element .is. JsonBoolean) then
				begin
					targetArrayList.Add((@boolean)((@JsonBoolean)element).Value)
				end
				else if(element .is. JsonArray)
				begin

				end
			end
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="obj"></param>
		;;; <param name="serializer"></param>
		public virtual method SerializeObject, void
			obj, @DataObjectBase
			serializer, @ChannelSerializer
		proc
			obj.Serialize(serializer)
		endmethod

		;;Protocol note: its not entirely decided how explicit we need to be about types for things
		;;most things in synergy dont jump from one primative type to another
		;;its possible for this to happen with an arraylist but this might be an acceptable tradoff for the significant protocol efficiancy gains
		;;in only specifying the element type once

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="obj"></param>
		;;; <param name="serializer"></param>
		public virtual method SerializeObjectCollection, void
			obj, @ArrayList
			serializer, @ChannelSerializer
			record
				doElement, @DataObjectBase
				primativeElement, @object
			endrecord
		proc
			;;determine the collection type from the first element type then serialize assuming we dont switch between primatives and objects
			serializer.ArrayOpen()
			if(obj.Count > 0)
			begin
				if(obj[0] .is. @DataObjectBase) then
				begin
					foreach doElement in obj
					begin
						doElement.Serialize(serializer)
					end
				end
				else
				begin
					;;this should encode something like this
					;;serializer.String("ElementSize")
					;;serializer.Int(^size(unboxedElement))
					;;get the unboxed type and put that in as serializer.String("ElementType")
					throw new Exception("primative arrays not yet supported")
				end
			end
			serializer.ArrayClose()
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="value"></param>
		;;; <returns></returns>
		public method GetText, a
			value, @JsonObject
			record
				valueText, @JsonText
			endrecord
		proc
			valueText = (@JsonText)value.GetProperty("PassedValue")
			mreturn valueText.Value
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="value"></param>
		;;; <returns></returns>
		public method GetInt, i
			value, @JsonObject
			record
				valueInt, @JsonInt
			endrecord
		proc
			valueInt = (@JsonInt)value.GetProperty("PassedValue")
			mreturn valueInt.Value
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="value"></param>
		;;; <returns></returns>
		public method GetDecimal, d
			value, @JsonObject
			record
				passedValue, @JsonValue
				valueInt, @JsonInt
				valuestring, @JsonText
				tempD, d28
			endrecord
		proc
			passedValue = value.GetProperty("PassedValue")
			if(passedValue.JsonType == JSON_TYPE.INT_VAL ) then
			begin
				valueInt = (@JsonInt)passedValue
				tempD = valueInt.Value
				mreturn tempD
			end
			else
			begin
				valuestring = (@JsonText)passedValue
				mreturn ^d((a)valuestring.Value)
			end
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="value"></param>
		;;; <returns></returns>
		public method GetImplied, d.
			value, @JsonObject
			record
				passedValue, @JsonValue
				valueInt, @JsonInt
				precisionValue, @JsonValue
				precisionInt, @JsonInt
				valuestring, @JsonText
				tempD, d56.28
			endrecord
		proc
			passedValue = value.GetProperty("PassedValue")

			precisionValue = value.GetProperty("DecimalPrecision")
			precisionInt = (@JsonInt)precisionValue

			if(passedValue.JsonType == JSON_TYPE.INT_VAL ) then
			begin
				valueInt = (@JsonInt)passedValue
				tempD = ^d(%string(valueInt.Value),precisionInt.Value)
				mreturn tempD
			end
			else
			begin
				valuestring = (@JsonText)passedValue
				mreturn ^d((a)valuestring.Value,precisionInt.Value)
			end
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="obj"></param>
		;;; <param name="serializer"></param>
		public method SerializeObject, void
			obj, @object
			serializer, @ChannelSerializer
		proc
			if(obj .is. @DataObjectBase) then
				SerializeObject((@DataObjectBase)obj, serializer)
			else if(obj .is. @ArrayList) then
				SerializeObjectCollection((@ArrayList)obj, serializer)
			else if(obj .is. @a || obj .is. @d || obj .is. @id || obj .is. @string) then
				serializer.String(obj.ToString())
			else if(obj .is. @i) then
				serializer.Integer((i)obj)
			else
				throw new Exception("Attempted to serialize an unknown object type")
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="obj"></param>
		;;; <param name="dataType"></param>
		;;; <returns></returns>
		public method DeserializeObject, @object
			obj, @JsonObject
			out dataType, FieldDataType
			record
				dataTypeInt, @JsonInt
			endrecord
		proc
			dataTypeInt = ((@JsonInt)obj.GetProperty("DataType"))
			dataType = (FieldDataType)dataTypeInt.Value
			if(dataType == FieldDataType.DataObjectField) then
			begin
				mreturn DeserializeObject(obj, ^null)
			end
			else if(dataType == FieldDataType.DataObjectCollectionField) then
			begin
				mreturn DeserializeObjectCollection(obj)
			end
			else if(dataType == FieldDataType.AlphaField) then
			begin
				data textObject, @JsonText, ((@JsonText)obj.GetProperty("PassedValue"))
				mreturn textObject.Value
			end
			else if(dataType == FieldDataType.DecimalField) then
			begin
				mreturn ((@JsonText)obj.GetProperty("PassedValue")).Value
			end
			else if(dataType == FieldDataType.ImpliedDecimal) then
			begin
				mreturn ((@JsonText)obj.GetProperty("PassedValue")).Value
			end
			else if(dataType == FieldDataType.IntegerField)
			begin
				data intValue, i4, ((@JsonInt)obj.GetProperty("PassedValue")).Value
				mreturn (@object)intValue
			end
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="ttChannel"></param>
		;;; <param name="frameHeader"></param>
		;;; <returns></returns>
		private method ReadCallBlock, boolean
			required in ttChannel, i
			required in frameHeader, i4
			record
				frameDataHandle, D_HANDLE
				jsonReader, @Json
				parsedJson, @JsonValue
				serializer, @ChannelSerializer
			endrecord
		proc
			writes(loggingChannel, "reading callblock: ")
			writes(loggingChannel, %string(frameHeader) + " callblock bytes expected")

			jsonReader = new Json()
			frameDataHandle = %mem_proc(DM_ALLOC, frameHeader)

;TODO: the wait:100 is in the wrong argument position and should be wait:q_wait, but when fixed still doesn't work.
;Roger says this will never work and needs to be done in C!

		again,
			do gets(ttChannel, ^m(frameDataHandle), wait:100) [$ERR_TIMOUT=again]
			until %rdlen(ttChannel) == frameHeader

			writes(loggingChannel, %string(%rdlen(ttChannel)) + ":" + %string(%rdtrm(ttChannel)))
			writes(loggingChannel, ^m(frameDataHandle) + "data read")

			parsedJson = jsonReader.ParseJson(^m(frameDataHandle))
			frameDataHandle = %mem_proc(DM_FREE, frameDataHandle)

			if !(parsedJson .is. @JsonObject)
			begin
				writes(loggingChannel, "failed to read json request")
				serializer = new ChannelSerializer(ttChannel)
				serializer.MapOpen()
				serializer.String("IsError")
				serializer.Bool(true)
				serializer.String("Exception")
				serializer.String("failed to parse json request")
				serializer.MapClose()
				mreturn true
			end

			mreturn ProcessCallBlock((@JsonObject)parsedJson, ttChannel)

		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="ttChannel"></param>
		public method Dispatch, void
			ttChannel, i
			record PacketLength
				frameHeader, d10
			endrecord
			record
				running, boolean
			endrecord
		proc
			;;read 10 bytes of data from input when its available
			;;read count of bytes from input (in chunks ideally) 
			;;look for the target routine name
			;;build rcb block for the call
			;;deserialize arguments based on the types in json
			;;make the call
			;;trap any exceptions
			try
			begin
				running = true
				while(running)
				begin
;TODO: the wait:100 is in the wrong argument position and should be wait:q_wait, but when fixed still doesn't work.
;Roger says this will never work and needs to be done in C!
		again,		do gets(ttChannel, PacketLength, wait:100)  [$ERR_TIMOUT=again]
					until %rdlen(ttChannel) == 10
					puts(ttChannel, PacketLength + %char(13) + %char(10))
					running = ReadCallBlock(ttChannel, (int)frameHeader)
				end
				writes(ttChannel, "Shutting down due to running == false")
			end
			catch(ex, @Exception)
			begin
				data serializer = new ChannelSerializer(ttChannel)
				writes(loggingChannel, "FATAL ERROR in dispatcher + " + ex.ToString())
				serializer.MapOpen()
				serializer.String("IsError")
				serializer.Bool(true)
				serializer.String("Result")
				serializer.String(ex.ToString())
				serializer.MapClose()
			end
			endtry
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="jsonData"></param>
		;;; <param name="responseChannel"></param>
		;;; <returns></returns>
		public method ProcessCallBlock, boolean
			jsonData, @JsonObject
			responseChannel, i4
			record
				name, @string
				argArray, @JsonArray
				serializer, @ChannelSerializer
				dispatchStub, @RoutineStub
			endrecord
		proc
			;;we've been asked to shutdown so return false and let the outer loop take care of it
			if(jsonData.HasProperty("IsShutdownRequest") && ((@JsonBoolean)jsonData.GetProperty("IsShutdownRequest")).Value)
			begin
				writes(responseChannel, "Shutting down due to request")
				mreturn false
			end

			serializer = new ChannelSerializer(responseChannel)

			try
			begin
				;;we've been asked if we're alive
				if(jsonData.HasProperty("IsPingRequest") && ((@JsonBoolean)jsonData.GetProperty("IsPingRequest")).Value) then
				begin
					serializer.MapOpen()
					serializer.String("IsAlive")
					serializer.Bool(true)
					serializer.MapClose()
					mreturn true
				end
				else if(jsonData.HasProperty("ProtocolVersion") && ((@JsonText)jsonData.GetProperty("ProtocolVersion")).Value =="1.0")
				begin
					serializer.MapOpen()
					serializer.String("ProtocolSupported")
					serializer.Bool(true)
					serializer.MapClose()
					mreturn true
				end

				name = ((@JsonText)jsonData.GetProperty("Name")).Value

				if(mDispatchStubs.TryGet(name, dispatchStub)) then
				begin
					dispatchStub.Dispatch(name, jsonData, serializer, this)
					mreturn true
				end
				else
				begin
					data arg, @JsonObject
					data argArray, @ArrayList, new ArrayList()
					data argValueArray, [#]@Object
					data rcbid, i4
					data ii, i4, 0
					if(jsonData.HasProperty("Arguments"))
					begin
						data arg, @JsonObject
						data ii = 0
						argArray = ((@JsonArray)jsonData.GetProperty("Arguments")).arrayValues
					end
					argValueArray = new object[argArray.Count]
					rcbid = %rcb_create(argArray.Count) 
					xcall rcb_setfnc(rcbid, name)
					foreach arg in argArray as @JsonObject
					begin
						data argType, FieldDataType
						data argLength, i4, 0
						data argPrecision, i4, 0
						incr ii
						;;the arguments need somewhere to live while we're building up the call so put them into this array
						argValueArray[ii] = DeserializeObject(arg, argType)
						if(argType != FieldDataType.DataObjectField && argType != FieldDataType.DataObjectCollectionField) then
						begin
							if(jsonData.HasProperty("DecimalPrecision"))
								argPrecision = ((@JsonInt)jsonData.GetProperty("DecimalPrecision")).Value

							argLength = ((@JsonInt)jsonData.GetProperty("ElementSize")).Value

							xcall rcb_setarg(rcbid, (n)argValueArray[ii], ii, (i)argType, argLength, argPrecision)
						end
						else
							xcall rcb_setarg(rcbid, argValueArray[ii], ii)
					end
					xcall rcb_call(rcbid) 
					ii = 0

					serializer.MapOpen()
					serializer.String("IsError")
					serializer.Bool(false)
					serializer.String("Result")
					serializer.MapOpen()
					serializer.String("ReturnParameters")
					serializer.ArrayOpen()

					foreach arg in argArray as @JsonObject
					begin
						incr ii
						if(arg.HasProperty("ReturnParameter") && ((@JsonBoolean)arg.GetProperty("ReturnParameter")).Value)
						begin
							serializer.MapOpen()
							serializer.String("Position")
							serializer.Integer(ii)
							serializer.String("Value")
							SerializeObject(argValueArray[ii], serializer)
							serializer.MapClose()
						end

					end
					serializer.ArrayClose()
					serializer.MapClose()
					serializer.MapClose()
				end
			end
			catch(ex, @Exception)
			begin
				;;TODO maybe this should be a specific type, we might need to do additional processing for certain exception types here
				serializer.MapOpen()
				serializer.String("IsError")
				serializer.Bool(true)
				serializer.String("Exception")
				serializer.String(ex.ToString())
				serializer.MapClose()
				mreturn false
			end
			endtry

			writes(responseChannel, "unhandled message")

			mreturn false

		endmethod

	endclass

	;;; <summary>
	;;; 
	;;; </summary>
	abstract class RoutineStub
		
		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="name"></param>
		;;; <param name="callFrame"></param>
		;;; <param name="serializer"></param>
		;;; <param name="dispatcher"></param>
		public abstract method Dispatch, void
			name, @string
			callFrame, @JsonObject
			serializer, @ChannelSerializer
			dispatcher, @RoutineDispatcher
		proc

		endmethod

	endclass

endnamespace