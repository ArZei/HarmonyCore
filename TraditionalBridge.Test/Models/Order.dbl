;;*****************************************************************************
;;
;; Title:       Order.dbl
;;
;; Type:        Class
;;
;; Description: Model class representing data defined by the repository
;;              structure ORDERS and from the data file ICSTUT:orders.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Harmony.TraditionalBridge

namespace TraditionalBridge.Test.Models

	public partial class Order extends DataObjectBase

		;; Metadata, current record state, and a copy of the original state
		public static sMetadata, @OrderMetadata
		private mOrder, strOrder 
		private mOriginalOrder, strOrder 
		
		;;; <summary>
		;;;  Construct an empty Order object
		;;; </summary>
		public method Order
			parent()
		proc
			init mOrder, mOriginalOrder
		endmethod

		;;; <summary>
		;;;  Construct a Order object containing data from a record
		;;; </summary>
		public method Order
			required in inData, strOrder
			parent()
		proc
			mOrder = mOriginalOrder = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mOrder, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Order number
		;;; </summary>
		public property OrderNumber, d
			method get
			proc
				mreturn mOrder.order_number				
			endmethod
			method set
			proc
				mOrder.order_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer number
		;;; </summary>
		public property CustomerNumber, d
			method get
			proc
				mreturn mOrder.customer_number				
			endmethod
			method set
			proc
				mOrder.customer_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Order placed by
		;;; </summary>
		public property PlacedBy, a
			method get
			proc
				mreturn mOrder.placed_by				
			endmethod
			method set
			proc
				mOrder.placed_by = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer order reference
		;;; </summary>
		public property CustomerReference, a
			method get
			proc
				mreturn mOrder.customer_reference				
			endmethod
			method set
			proc
				mOrder.customer_reference = value
			endmethod
		endproperty

		;;; <summary>
		;;; Payment terms code
		;;; </summary>
		public property PaymentTermsCode, a
			method get
			proc
				mreturn mOrder.payment_terms_code				
			endmethod
			method set
			proc
				mOrder.payment_terms_code = value
			endmethod
		endproperty

		;;; <summary>
		;;; Date ordered
		;;; </summary>
		public property DateOrdered, d
			method get
			proc
				mreturn mOrder.date_ordered				
			endmethod
			method set
			proc
				mOrder.date_ordered = value
			endmethod
		endproperty

		;;; <summary>
		;;; Date order completed
		;;; </summary>
		public property DateCompleted, d
			method get
			proc
				mreturn mOrder.date_completed				
			endmethod
			method set
			proc
				mOrder.date_completed = value
			endmethod
		endproperty

		;;; <summary>
		;;; Spare space
		;;; </summary>
		public property Noname001, a
			method get
			proc
				mreturn mOrder.noname_001				
			endmethod
			method set
			proc
				mOrder.noname_001 = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mOrder
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalOrder
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				if(sMetadata == ^null)
					sMetadata = new OrderMetadata()
				mreturn sMetadata
			endmethod
		endproperty

	endclass

endnamespace