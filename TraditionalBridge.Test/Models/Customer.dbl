;;*****************************************************************************
;;
;; Title:       Customer.dbl
;;
;; Type:        Class
;;
;; Description: Model class representing data defined by the repository
;;              structure CUSTOMERS and from the data file ICSTUT:customer.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Harmony.TraditionalBridge

namespace TraditionalBridge.Test.Models

	public partial class Customer extends DataObjectBase

		;; Metadata, current record state, and a copy of the original state
		public static sMetadata, @CustomerMetadata
		private mCustomer, strCustomer 
		private mOriginalCustomer, strCustomer 
		
		;;; <summary>
		;;;  Construct an empty Customer object
		;;; </summary>
		public method Customer
			parent()
		proc
			init mCustomer, mOriginalCustomer
		endmethod

		;;; <summary>
		;;;  Construct a Customer object containing data from a record
		;;; </summary>
		public method Customer
			required in inData, strCustomer
			parent()
		proc
			mCustomer = mOriginalCustomer = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mCustomer, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Customer id
		;;; </summary>
		public property CustKey, d
			method get
			proc
				mreturn mCustomer.cust_key				
			endmethod
			method set
			proc
				mCustomer.cust_key = value
			endmethod
		endproperty

		;;; <summary>
		;;; Record Tag Field
		;;; </summary>
		public property CustRtype, d
			method get
			proc
				mreturn mCustomer.cust_rtype				
			endmethod
			method set
			proc
				mCustomer.cust_rtype = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer Name
		;;; </summary>
		public property CustName, a
			method get
			proc
				mreturn mCustomer.cust_name				
			endmethod
			method set
			proc
				mCustomer.cust_name = value
			endmethod
		endproperty

		;;; <summary>
		;;; Street Address
		;;; </summary>
		public property CustStreet, a
			method get
			proc
				mreturn mCustomer.cust_street				
			endmethod
			method set
			proc
				mCustomer.cust_street = value
			endmethod
		endproperty

		;;; <summary>
		;;; City
		;;; </summary>
		public property CustCity, a
			method get
			proc
				mreturn mCustomer.cust_city				
			endmethod
			method set
			proc
				mCustomer.cust_city = value
			endmethod
		endproperty

		;;; <summary>
		;;; State
		;;; </summary>
		public property CustState, a
			method get
			proc
				mreturn mCustomer.cust_state				
			endmethod
			method set
			proc
				mCustomer.cust_state = value
			endmethod
		endproperty

		;;; <summary>
		;;; Zip code
		;;; </summary>
		public property CustZip, d
			method get
			proc
				mreturn mCustomer.cust_zip				
			endmethod
			method set
			proc
				mCustomer.cust_zip = value
			endmethod
		endproperty

		;;; <summary>
		;;; Contact
		;;; </summary>
		public property CustContact, a
			method get
			proc
				mreturn mCustomer.cust_contact				
			endmethod
			method set
			proc
				mCustomer.cust_contact = value
			endmethod
		endproperty

		;;; <summary>
		;;; Phone number
		;;; </summary>
		public property CustPhone, d
			method get
			proc
				mreturn mCustomer.cust_phone				
			endmethod
			method set
			proc
				mCustomer.cust_phone = value
			endmethod
		endproperty

		;;; <summary>
		;;; FAX number
		;;; </summary>
		public property CustFax, d
			method get
			proc
				mreturn mCustomer.cust_fax				
			endmethod
			method set
			proc
				mCustomer.cust_fax = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer Premium Gift
		;;; </summary>
		public property CustGift, d
			method get
			proc
				mreturn mCustomer.cust_gift				
			endmethod
			method set
			proc
				mCustomer.cust_gift = value
			endmethod
		endproperty

		;;; <summary>
		;;; Terms code
		;;; </summary>
		public property CustTcode, a
			method get
			proc
				mreturn mCustomer.cust_tcode				
			endmethod
			method set
			proc
				mCustomer.cust_tcode = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer Tax Number
		;;; </summary>
		public property CustTaxno, d
			method get
			proc
				mreturn mCustomer.cust_taxno				
			endmethod
			method set
			proc
				mCustomer.cust_taxno = value
			endmethod
		endproperty

		;;; <summary>
		;;; Credit limit
		;;; </summary>
		public property CustLimit, d
			method get
			proc
				mreturn mCustomer.cust_limit				
			endmethod
			method set
			proc
				mCustomer.cust_limit = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mCustomer
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalCustomer
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				if(sMetadata == ^null)
					sMetadata = new CustomerMetadata()
				mreturn sMetadata
			endmethod
		endproperty

	endclass

endnamespace