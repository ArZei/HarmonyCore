;;*****************************************************************************
;;
;; Title:       Plant.dbl
;;
;; Type:        Class
;;
;; Description: Model class representing data defined by the repository
;;              structure PLANTS and from the data file ICSTUT:plants.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Harmony.TraditionalBridge

namespace TraditionalBridge.Test.Models

	public partial class Plant extends DataObjectBase

		;; Metadata, current record state, and a copy of the original state
		public static sMetadata, @PlantMetadata
		private mPlant, strPlant 
		private mOriginalPlant, strPlant 
		
		;;; <summary>
		;;;  Construct an empty Plant object
		;;; </summary>
		public method Plant
			parent()
		proc
			init mPlant, mOriginalPlant
		endmethod

		;;; <summary>
		;;;  Construct a Plant object containing data from a record
		;;; </summary>
		public method Plant
			required in inData, strPlant
			parent()
		proc
			mPlant = mOriginalPlant = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mPlant, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Item ID
		;;; </summary>
		public property InItemid, d
			method get
			proc
				mreturn mPlant.in_itemid				
			endmethod
			method set
			proc
				mPlant.in_itemid = value
			endmethod
		endproperty

		;;; <summary>
		;;; Vending Source Code
		;;; </summary>
		public property InSource, d
			method get
			proc
				mreturn mPlant.in_source				
			endmethod
			method set
			proc
				mPlant.in_source = value
			endmethod
		endproperty

		;;; <summary>
		;;; Size in gallons
		;;; </summary>
		public property InSize, d
			method get
			proc
				mreturn mPlant.in_size				
			endmethod
			method set
			proc
				mPlant.in_size = value
			endmethod
		endproperty

		;;; <summary>
		;;; Common name
		;;; </summary>
		public property InName, a
			method get
			proc
				mreturn mPlant.in_name				
			endmethod
			method set
			proc
				mPlant.in_name = value
			endmethod
		endproperty

		;;; <summary>
		;;; Latin name
		;;; </summary>
		public property InLatin, a
			method get
			proc
				mreturn mPlant.in_latin				
			endmethod
			method set
			proc
				mPlant.in_latin = value
			endmethod
		endproperty

		;;; <summary>
		;;; Zone
		;;; </summary>
		public property InZone, d
			method get
			proc
				mreturn mPlant.in_zone				
			endmethod
			method set
			proc
				mPlant.in_zone = value
			endmethod
		endproperty

		;;; <summary>
		;;; Type code
		;;; </summary>
		public property InType, d
			method get
			proc
				mreturn mPlant.in_type				
			endmethod
			method set
			proc
				mPlant.in_type = value
			endmethod
		endproperty

		;;; <summary>
		;;; Flowering?
		;;; </summary>
		public property InFlower, a
			method get
			proc
				mreturn mPlant.in_flower				
			endmethod
			method set
			proc
				mPlant.in_flower = value
			endmethod
		endproperty

		;;; <summary>
		;;; Flower color
		;;; </summary>
		public property InColor, a
			method get
			proc
				mreturn mPlant.in_color				
			endmethod
			method set
			proc
				mPlant.in_color = value
			endmethod
		endproperty

		;;; <summary>
		;;; Plant shape
		;;; </summary>
		public property InShape, a
			method get
			proc
				mreturn mPlant.in_shape				
			endmethod
			method set
			proc
				mPlant.in_shape = value
			endmethod
		endproperty

		;;; <summary>
		;;; Maximum height (in inches)
		;;; </summary>
		public property InMaxhigh, d
			method get
			proc
				mreturn mPlant.in_maxhigh				
			endmethod
			method set
			proc
				mPlant.in_maxhigh = value
			endmethod
		endproperty

		;;; <summary>
		;;; Maximum width (in inches)
		;;; </summary>
		public property InMaxwide, d
			method get
			proc
				mreturn mPlant.in_maxwide				
			endmethod
			method set
			proc
				mPlant.in_maxwide = value
			endmethod
		endproperty

		;;; <summary>
		;;; Water requirements
		;;; </summary>
		public property InWater, a
			method get
			proc
				mreturn mPlant.in_water				
			endmethod
			method set
			proc
				mPlant.in_water = value
			endmethod
		endproperty

		;;; <summary>
		;;; Sun requirements
		;;; </summary>
		public property InSun, a
			method get
			proc
				mreturn mPlant.in_sun				
			endmethod
			method set
			proc
				mPlant.in_sun = value
			endmethod
		endproperty

		;;; <summary>
		;;; Bin/aisle
		;;; </summary>
		public property InLocation, a
			method get
			proc
				mreturn mPlant.in_location				
			endmethod
			method set
			proc
				mPlant.in_location = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty on hand
		;;; </summary>
		public property InOnhand, d
			method get
			proc
				mreturn mPlant.in_onhand				
			endmethod
			method set
			proc
				mPlant.in_onhand = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty allocated
		;;; </summary>
		public property InAllocated, d
			method get
			proc
				mreturn mPlant.in_allocated				
			endmethod
			method set
			proc
				mPlant.in_allocated = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty on order
		;;; </summary>
		public property InOnorder, d
			method get
			proc
				mreturn mPlant.in_onorder				
			endmethod
			method set
			proc
				mPlant.in_onorder = value
			endmethod
		endproperty

		;;; <summary>
		;;; Reorder point
		;;; </summary>
		public property InMinimum, d
			method get
			proc
				mreturn mPlant.in_minimum				
			endmethod
			method set
			proc
				mPlant.in_minimum = value
			endmethod
		endproperty

		;;; <summary>
		;;; Unit Price
		;;; </summary>
		public property InPrice, d
			method get
			proc
				mreturn mPlant.in_price				
			endmethod
			method set
			proc
				mPlant.in_price = value
			endmethod
		endproperty

		;;; <summary>
		;;; Item Cost
		;;; </summary>
		public property InCost, d
			method get
			proc
				mreturn mPlant.in_cost				
			endmethod
			method set
			proc
				mPlant.in_cost = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mPlant
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalPlant
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				if(sMetadata == ^null)
					sMetadata = new PlantMetadata()
				mreturn sMetadata
			endmethod
		endproperty

	endclass

endnamespace