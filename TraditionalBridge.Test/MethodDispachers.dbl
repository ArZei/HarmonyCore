;;*****************************************************************************
;;
;; Title:       DispatcherMethods.dbl
;;
;; Type:        Classes
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test

structure strFake
	,a1
endstructure


	public class get_all_customersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method get_all_customersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1Array, @JsonArray
				arg1, @ArrayList
				arg2, a80

				;Function return value
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)

			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])


			;;Now call the method

			returnValue = %get_all_customers(
			&	arg1,
			&	arg2
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_customers_arrayDispatch extends RoutineStub


		public method get_customers_arrayDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1Array, @JsonArray
				arg1Handle, D_HANDLE
				arg1HandlePos, int
				arg2, a80

				;Function return value
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])


			;;Now call the method

			returnValue = %get_customers_array(
			&	^m(strFake(1:162),arg1Handle),
			&	arg2
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_all_ordersDispatch extends RoutineStub

		private mOrderMetadata, @DataObjectMetadataBase

		public method get_all_ordersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mOrderMetadata = DataObjectMetadataBase.LookupType("Order")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1Array, @JsonArray
				arg1, @ArrayList
				arg2, a80

				;Function return value
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)

			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])


			;;Now call the method

			returnValue = %get_all_orders(
			&	arg1,
			&	arg2
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_all_plantsDispatch extends RoutineStub

		private mPlantMetadata, @DataObjectMetadataBase

		public method get_all_plantsDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mPlantMetadata = DataObjectMetadataBase.LookupType("Plant")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1Array, @JsonArray
				arg1, @ArrayList
				arg2, a80

				;Function return value
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)

			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])


			;;Now call the method

			returnValue = %get_all_plants(
			&	arg1,
			&	arg2
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_all_vendorsDispatch extends RoutineStub

		private mVendorMetadata, @DataObjectMetadataBase

		public method get_all_vendorsDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mVendorMetadata = DataObjectMetadataBase.LookupType("Vendor")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1Array, @JsonArray
				arg1, @ArrayList
				arg2, a80

				;Function return value
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)

			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])


			;;Now call the method

			returnValue = %get_all_vendors(
			&	arg1,
			&	arg2
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class simple_parametersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method simple_parametersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1, a1
				arg2, a1
				arg3, a1
				arg4, d6
				arg5, d6
				arg6, d6
				arg7, d12
				arg8, d12
				arg9, d12
				arg10, d6.2
				arg11, d6.2
				arg12, d6.2
				arg13, i1
				arg14, i1
				arg15, i1
				arg16, i2
				arg17, i2
				arg18, i2
				arg19, i4
				arg20, i4
				arg21, i4
				arg22, i8
				arg23, i8
				arg24, i8
				arg25DataObject, @DataObjectBase
				arg25, strCustomer
				arg26DataObject, @DataObjectBase
				arg26, strCustomer
				arg27DataObject, @DataObjectBase
				arg27, strCustomer
				arg28, d8
				arg29, d8
				arg30, d8
				arg31, d6
				arg32, d6
				arg33, d6
				arg34, d7
				arg35, d7
				arg36, d7
				arg37, d5
				arg38, d5
				arg39, d5
				arg40, d6
				arg41, d6
				arg42, d6
				arg43, d4
				arg44, d4
				arg45, d4
				arg46, d14
				arg47, d14
				arg48, d14
				arg49, d20
				arg50, d20
				arg51, d20
				arg52, method_status
				arg53, method_status
				arg54, method_status
				arg55, d_handle
				arg56, d_handle
				arg57, d_handle
				arg58, d_handle
				arg59, d_handle
				arg60, d_handle
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			arg4 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[4])

			arg5 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[5])

			arg6 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[6])

			arg7 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[7])

			arg8 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[8])

			arg9 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[9])

			arg10 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[10])

			arg11 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[11])

			arg12 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[12])

			arg13 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[13])

			arg14 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[14])

			arg15 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[15])

			arg16 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[16])

			arg17 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[17])

			arg18 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[18])

			arg19 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[19])

			arg20 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[20])

			arg21 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[21])

			arg22 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[22])

			arg23 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[23])

			arg24 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[24])

			;;Get the data object
			arg25DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			;;Get the record from the DO
			arg25 = arg25DataObject.SynergyRecord

			;;Get the data object
			arg26DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			;;Get the record from the DO
			arg26 = arg26DataObject.SynergyRecord

			;;Get the data object
			arg27DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			;;Get the record from the DO
			arg27 = arg27DataObject.SynergyRecord

			arg28 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[28])

			arg29 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[29])

			arg30 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[30])

			arg31 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[31])

			arg32 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[32])

			arg33 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[33])

			arg34 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[34])

			arg35 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[35])

			arg36 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[36])

			arg37 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[37])

			arg38 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[38])

			arg39 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[39])

			arg40 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[40])

			arg41 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[41])

			arg42 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[42])

			arg43 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[43])

			arg44 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[44])

			arg45 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[45])

			arg46 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[46])

			arg47 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[47])

			arg48 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[48])

			arg49 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[49])

			arg50 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[50])

			arg51 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[51])

			arg52 = (METHOD_STATUS)dispatcher.GetInt((@JsonObject)arguments.arrayValues[52])

			arg53 = (METHOD_STATUS)dispatcher.GetInt((@JsonObject)arguments.arrayValues[53])

			arg54 = (METHOD_STATUS)dispatcher.GetInt((@JsonObject)arguments.arrayValues[54])

			arg55 = 

			arg56 = 

			arg57 = 

			arg58 =

			arg59 =

			arg60 =


			;;Now call the method

			xcall simple_parameters(
			&	arg1,
			&	arg2,
			&	arg3,
			&	arg4,
			&	arg5,
			&	arg6,
			&	arg7,
			&	arg8,
			&	arg9,
			&	arg10,
			&	arg11,
			&	arg12,
			&	arg13,
			&	arg14,
			&	arg15,
			&	arg16,
			&	arg17,
			&	arg18,
			&	arg19,
			&	arg20,
			&	arg21,
			&	arg22,
			&	arg23,
			&	arg24,
			&	arg25,
			&	arg26,
			&	arg27,
			&	arg28,
			&	arg29,
			&	arg30,
			&	arg31,
			&	arg32,
			&	arg33,
			&	arg34,
			&	arg35,
			&	arg36,
			&	arg37,
			&	arg38,
			&	arg39,
			&	arg40,
			&	arg41,
			&	arg42,
			&	arg43,
			&	arg44,
			&	arg45,
			&	arg46,
			&	arg47,
			&	arg48,
			&	arg49,
			&	arg50,
			&	arg51,
			&	arg52,
			&	arg53,
			&	arg54,
			&	arg55,
			&	arg56,
			&	arg57,
			&	arg58,
			&	arg59,
			&	arg60
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class array_parametersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method array_parametersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1Array, @JsonArray
				arg1Handle, D_HANDLE
				arg1HandlePos, int
				arg2Array, @JsonArray
				arg2Handle, D_HANDLE
				arg2HandlePos, int
				arg3Array, @JsonArray
				arg3Handle, D_HANDLE
				arg3HandlePos, int
				arg4Array, @JsonArray
				arg4Handle, D_HANDLE
				arg4HandlePos, int
				arg5Array, @JsonArray
				arg5Handle, D_HANDLE
				arg5HandlePos, int
				arg6Array, @JsonArray
				arg6Handle, D_HANDLE
				arg6HandlePos, int
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[2])

			arg2Array = (@JsonArray)((@JsonObject)arguments.arrayValues[2]).GetProperty("PassedValue")
			arg2Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg2Array.arrayValues.Count)
			arg2HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg2Handle),argumentDefinition,arg2HandlePos,arg2Array)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[3])

			arg3Array = (@JsonArray)((@JsonObject)arguments.arrayValues[3]).GetProperty("PassedValue")
			arg3Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg3Array.arrayValues.Count)
			arg3HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg3Handle),argumentDefinition,arg3HandlePos,arg3Array)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[4])

			arg4Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg4Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg4Array.arrayValues.Count)
			arg4HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg4Handle),argumentDefinition,arg4HandlePos,arg4Array)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[5])

			arg5Array = (@JsonArray)((@JsonObject)arguments.arrayValues[5]).GetProperty("PassedValue")
			arg5Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg5Array.arrayValues.Count)
			arg5HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg5Handle),argumentDefinition,arg5HandlePos,arg5Array)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[6])

			arg6Array = (@JsonArray)((@JsonObject)arguments.arrayValues[6]).GetProperty("PassedValue")
			arg6Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg6Array.arrayValues.Count)
			arg6HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg6Handle),argumentDefinition,arg6HandlePos,arg6Array)


			;;Now call the method

			xcall array_parameters(
			&	^m(strFake(1:1),arg1Handle),
			&	^m(strFake(1:1),arg2Handle),
			&	^m(strFake(1:1),arg3Handle),
			&	^m(strCustomer,arg4Handle),
			&	^m(strCustomer,arg5Handle),
			&	^m(strCustomer,arg6Handle)
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class arraylist_parametersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method arraylist_parametersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				argumentDefinition, @ArgumentDataDefinition
				arg1Array, @JsonArray
				arg1, @ArrayList
				arg2Array, @JsonArray
				arg2, @ArrayList
				arg3Array, @JsonArray
				arg3, @ArrayList
				arg4Array, @JsonArray
				arg4, @ArrayList
				arg5Array, @JsonArray
				arg5, @ArrayList
				arg6Array, @JsonArray
				arg6, @ArrayList
				arg7Array, @JsonArray
				arg7, @ArrayList
				arg8Array, @JsonArray
				arg8, @ArrayList
				arg9Array, @JsonArray
				arg9, @ArrayList
				arg10Array, @JsonArray
				arg10, @ArrayList
				arg11Array, @JsonArray
				arg11, @ArrayList
				arg12Array, @JsonArray
				arg12, @ArrayList
				arg13Array, @JsonArray
				arg13, @ArrayList
				arg14Array, @JsonArray
				arg14, @ArrayList
				arg15Array, @JsonArray
				arg15, @ArrayList
				arg16Array, @JsonArray
				arg16, @ArrayList
				arg17Array, @JsonArray
				arg17, @ArrayList
				arg18Array, @JsonArray
				arg18, @ArrayList
				arg19Array, @JsonArray
				arg19, @ArrayList
				arg20Array, @JsonArray
				arg20, @ArrayList
				arg21Array, @JsonArray
				arg21, @ArrayList
				arg22Array, @JsonArray
				arg22, @ArrayList
				arg23Array, @JsonArray
				arg23, @ArrayList
				arg24Array, @JsonArray
				arg24, @ArrayList
				arg25Array, @JsonArray
				arg25, @ArrayList
				arg26Array, @JsonArray
				arg26, @ArrayList
				arg27Array, @JsonArray
				arg27, @ArrayList
				arg28Array, @JsonArray
				arg28, @ArrayList
				arg29Array, @JsonArray
				arg29, @ArrayList
				arg30Array, @JsonArray
				arg30, @ArrayList
				arg31Array, @JsonArray
				arg31, @ArrayList
				arg32Array, @JsonArray
				arg32, @ArrayList
				arg33Array, @JsonArray
				arg33, @ArrayList
				arg34Array, @JsonArray
				arg34, @ArrayList
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[2])

			arg2Array = (@JsonArray)((@JsonObject)arguments.arrayValues[2]).GetProperty("PassedValue")
			arg2 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg2Array,arg2)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[3])

			arg3Array = (@JsonArray)((@JsonObject)arguments.arrayValues[3]).GetProperty("PassedValue")
			arg3 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg3Array,arg3)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[4])

			arg4Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg4 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg4Array,arg4)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[5])

			arg5Array = (@JsonArray)((@JsonObject)arguments.arrayValues[5]).GetProperty("PassedValue")
			arg5 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg5Array,arg5)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[6])

			arg6Array = (@JsonArray)((@JsonObject)arguments.arrayValues[6]).GetProperty("PassedValue")
			arg6 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg6Array,arg6)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[7])

			arg7Array = (@JsonArray)((@JsonObject)arguments.arrayValues[7]).GetProperty("PassedValue")
			arg7 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg7Array,arg7)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[8])

			arg8Array = (@JsonArray)((@JsonObject)arguments.arrayValues[8]).GetProperty("PassedValue")
			arg8 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg8Array,arg8)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[9])

			arg9Array = (@JsonArray)((@JsonObject)arguments.arrayValues[9]).GetProperty("PassedValue")
			arg9 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg9Array,arg9)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[10])

			arg10Array = (@JsonArray)((@JsonObject)arguments.arrayValues[10]).GetProperty("PassedValue")
			arg10 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg10Array,arg10)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[11])

			arg11Array = (@JsonArray)((@JsonObject)arguments.arrayValues[11]).GetProperty("PassedValue")
			arg11 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg11Array,arg11)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[12])

			arg12Array = (@JsonArray)((@JsonObject)arguments.arrayValues[12]).GetProperty("PassedValue")
			arg12 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg12Array,arg12)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[13])

			arg13Array = (@JsonArray)((@JsonObject)arguments.arrayValues[13]).GetProperty("PassedValue")
			arg13 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg13Array,arg13)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[14])

			arg14Array = (@JsonArray)((@JsonObject)arguments.arrayValues[14]).GetProperty("PassedValue")
			arg14 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg14Array,arg14)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[15])

			arg15Array = (@JsonArray)((@JsonObject)arguments.arrayValues[15]).GetProperty("PassedValue")
			arg15 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg15Array,arg15)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[16])

			arg16Array = (@JsonArray)((@JsonObject)arguments.arrayValues[16]).GetProperty("PassedValue")
			arg16 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg16Array,arg16)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[17])

			arg17Array = (@JsonArray)((@JsonObject)arguments.arrayValues[17]).GetProperty("PassedValue")
			arg17 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg17Array,arg17)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[18])

			arg18Array = (@JsonArray)((@JsonObject)arguments.arrayValues[18]).GetProperty("PassedValue")
			arg18 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg18Array,arg18)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[19])

			arg19Array = (@JsonArray)((@JsonObject)arguments.arrayValues[19]).GetProperty("PassedValue")
			arg19 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg19Array,arg19)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[20])

			arg20Array = (@JsonArray)((@JsonObject)arguments.arrayValues[20]).GetProperty("PassedValue")
			arg20 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg20Array,arg20)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[21])

			arg21Array = (@JsonArray)((@JsonObject)arguments.arrayValues[21]).GetProperty("PassedValue")
			arg21 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg21Array,arg21)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[22])

			arg22Array = (@JsonArray)((@JsonObject)arguments.arrayValues[22]).GetProperty("PassedValue")
			arg22 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg22Array,arg22)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[23])

			arg23Array = (@JsonArray)((@JsonObject)arguments.arrayValues[23]).GetProperty("PassedValue")
			arg23 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg23Array,arg23)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[24])

			arg24Array = (@JsonArray)((@JsonObject)arguments.arrayValues[24]).GetProperty("PassedValue")
			arg24 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg24Array,arg24)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[25])

			arg25Array = (@JsonArray)((@JsonObject)arguments.arrayValues[25]).GetProperty("PassedValue")
			arg25 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg25Array,arg25)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[26])

			arg26Array = (@JsonArray)((@JsonObject)arguments.arrayValues[26]).GetProperty("PassedValue")
			arg26 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg26Array,arg26)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[27])

			arg27Array = (@JsonArray)((@JsonObject)arguments.arrayValues[27]).GetProperty("PassedValue")
			arg27 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg27Array,arg27)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[28])

			arg28Array = (@JsonArray)((@JsonObject)arguments.arrayValues[28]).GetProperty("PassedValue")
			arg28 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg28Array,arg28)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[29])

			arg29Array = (@JsonArray)((@JsonObject)arguments.arrayValues[29]).GetProperty("PassedValue")
			arg29 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg29Array,arg29)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[30])

			arg30Array = (@JsonArray)((@JsonObject)arguments.arrayValues[30]).GetProperty("PassedValue")
			arg30 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg30Array,arg30)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[31])

			arg31Array = (@JsonArray)((@JsonObject)arguments.arrayValues[31]).GetProperty("PassedValue")
			arg31 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg31Array,arg31)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[32])

			arg32Array = (@JsonArray)((@JsonObject)arguments.arrayValues[32]).GetProperty("PassedValue")
			arg32 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg32Array,arg32)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[33])

			arg33Array = (@JsonArray)((@JsonObject)arguments.arrayValues[33]).GetProperty("PassedValue")
			arg33 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg33Array,arg33)


			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[34])

			arg34Array = (@JsonArray)((@JsonObject)arguments.arrayValues[34]).GetProperty("PassedValue")
			arg34 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg34Array,arg34)


			;;Now call the method

			xcall arraylist_parameters(
			&	arg1,
			&	arg2,
			&	arg3,
			&	arg4,
			&	arg5,
			&	arg6,
			&	arg7,
			&	arg8,
			&	arg9,
			&	arg10,
			&	arg11,
			&	arg12,
			&	arg13,
			&	arg14,
			&	arg15,
			&	arg16,
			&	arg17,
			&	arg18,
			&	arg19,
			&	arg20,
			&	arg21,
			&	arg22,
			&	arg23,
			&	arg24,
			&	arg25,
			&	arg26,
			&	arg27,
			&	arg28,
			&	arg29,
			&	arg30,
			&	arg31,
			&	arg32,
			&	arg33,
			&	arg34
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

endnamespace