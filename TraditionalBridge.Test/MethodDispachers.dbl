;;*****************************************************************************
;;
;; Title:       DispatcherMethods.dbl
;;
;; Type:        Classes
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test

	public class get_all_customersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method get_all_customersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				;;Data for structure-based arguments
				arg1Array, @JsonArray
				arg1Handle, D_HANDLE
				arg1HandlePos, int
				arg1List, @ArrayList
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Prepare data for structure-based arguments

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,^size(strCustomer)*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			arg1List = new ArrayList()
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),^size(strCustomer),arg1HandlePos,arg1Array,arg1List)

			;;Now call the method

			returnValue = %get_all_customers(
			&	arg1List,
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[1])
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_customers_arrayDispatch extends RoutineStub


		public method get_customers_arrayDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")


			;;Now call the method

			returnValue = %get_customers_array(
			&	,
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[1])
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_all_ordersDispatch extends RoutineStub

		private mOrderMetadata, @DataObjectMetadataBase

		public method get_all_ordersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mOrderMetadata = DataObjectMetadataBase.LookupType("Order")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				;;Data for structure-based arguments
				arg1Array, @JsonArray
				arg1Handle, D_HANDLE
				arg1HandlePos, int
				arg1List, @ArrayList
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Prepare data for structure-based arguments

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,^size(strOrder)*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			arg1List = new ArrayList()
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),^size(strOrder),arg1HandlePos,arg1Array,arg1List)

			;;Now call the method

			returnValue = %get_all_orders(
			&	arg1List,
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[1])
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_all_plantsDispatch extends RoutineStub

		private mPlantMetadata, @DataObjectMetadataBase

		public method get_all_plantsDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mPlantMetadata = DataObjectMetadataBase.LookupType("Plant")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				;;Data for structure-based arguments
				arg1Array, @JsonArray
				arg1Handle, D_HANDLE
				arg1HandlePos, int
				arg1List, @ArrayList
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Prepare data for structure-based arguments

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,^size(strPlant)*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			arg1List = new ArrayList()
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),^size(strPlant),arg1HandlePos,arg1Array,arg1List)

			;;Now call the method

			returnValue = %get_all_plants(
			&	arg1List,
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[1])
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class get_all_vendorsDispatch extends RoutineStub

		private mVendorMetadata, @DataObjectMetadataBase

		public method get_all_vendorsDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mVendorMetadata = DataObjectMetadataBase.LookupType("Vendor")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				;;Data for structure-based arguments
				arg1Array, @JsonArray
				arg1Handle, D_HANDLE
				arg1HandlePos, int
				arg1List, @ArrayList
				returnValue, METHOD_STATUS
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Prepare data for structure-based arguments

			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,^size(strVendor)*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			arg1List = new ArrayList()
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),^size(strVendor),arg1HandlePos,arg1Array,arg1List)

			;;Now call the method

			returnValue = %get_all_vendors(
			&	arg1List,
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[1])
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class simple_parametersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method simple_parametersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				;;Data for structure-based arguments
				arg25, @DataObjectBase
				arg25Data, strCustomer
				arg26, @DataObjectBase
				arg26Data, strCustomer
				arg27, @DataObjectBase
				arg27Data, strCustomer
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Prepare data for structure-based arguments

			;;Get the data object
			arg25 = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			;;Get the record from the DO
			arg25Data = arg25.SynergyRecord
			;;Get the data object
			arg26 = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			;;Get the record from the DO
			arg26Data = arg26.SynergyRecord
			;;Get the data object
			arg27 = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			;;Get the record from the DO
			arg27Data = arg27.SynergyRecord

			;;Now call the method

			xcall simple_parameters(
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[0]),
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[1]),
			&	dispatcher.GetText((@JsonObject)arguments.arrayValues[2]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[3]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[4]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[5]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[6]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[7]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[8]),
			&	dispatcher.GetImplied((@JsonObject)arguments.arrayValues[9]),
			&	dispatcher.GetImplied((@JsonObject)arguments.arrayValues[10]),
			&	dispatcher.GetImplied((@JsonObject)arguments.arrayValues[11]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[12]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[13]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[14]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[15]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[16]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[17]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[18]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[19]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[20]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[21]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[22]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[23]),
			&	arg25Data,
			&	arg26Data,
			&	arg27Data,
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[27]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[27]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[28]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[28]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[29]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[29]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[30]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[30]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[31]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[31]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[32]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[32]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[33]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[33]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[34]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[34]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[35]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[35]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[36]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[36]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[37]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[37]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[38]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[38]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[39]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[39]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[40]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[40]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[41]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[41]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[42]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[42]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[43]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[43]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[44]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[44]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[45]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[45]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[46]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[46]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[47]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[47]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[48]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[48]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[49]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[49]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[50]),
			&	dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[50]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[51]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[52]),
			&	dispatcher.GetInt((@JsonObject)arguments.arrayValues[53]),
			&	,
			&	,
			&	,
			&	,
			&	,
			&	
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class array_parametersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method array_parametersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				;;Data for structure-based arguments
				arg25Array, @JsonArray
				arg25Handle, D_HANDLE
				arg25HandlePos, int
				arg26Array, @JsonArray
				arg26Handle, D_HANDLE
				arg26HandlePos, int
				arg27Array, @JsonArray
				arg27Handle, D_HANDLE
				arg27HandlePos, int
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Prepare data for structure-based arguments

			arg25Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg25Handle = %mem_proc(DM_ALLOC,^size(strCustomer)*arg25Array.arrayValues.Count)
			arg25HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg25Handle),^size(strCustomer),arg25HandlePos,arg25Array)
			arg26Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg26Handle = %mem_proc(DM_ALLOC,^size(strCustomer)*arg26Array.arrayValues.Count)
			arg26HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg26Handle),^size(strCustomer),arg26HandlePos,arg26Array)
			arg27Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg27Handle = %mem_proc(DM_ALLOC,^size(strCustomer)*arg27Array.arrayValues.Count)
			arg27HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg27Handle),^size(strCustomer),arg27HandlePos,arg27Array)

			;;Now call the method

			xcall array_parameters(
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	^m(strCustomer,arg25Handle),
			&	^m(strCustomer,arg26Handle),
			&	^m(strCustomer,arg27Handle),
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	
			&	
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	public class arraylist_parametersDispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method arraylist_parametersDispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		public override method Dispatch, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @ChannelSerializer
			required in dispatcher, @RoutineDispatcher
			record
				arguments, @JsonArray
				;;Data for structure-based arguments
				arg17Array, @JsonArray
				arg17Handle, D_HANDLE
				arg17HandlePos, int
				arg17List, @ArrayList
				arg18Array, @JsonArray
				arg18Handle, D_HANDLE
				arg18HandlePos, int
				arg18List, @ArrayList
			endrecord
		proc

			;;Retrieve argument data

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Prepare data for structure-based arguments

			arg17Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg17Handle = %mem_proc(DM_ALLOC,^size(strCustomer)*arg17Array.arrayValues.Count)
			arg17HandlePos = 1
			arg17List = new ArrayList()
			dispatcher.UnwrapObjectCollection(^m(arg17Handle),^size(strCustomer),arg17HandlePos,arg17Array,arg17List)
			arg18Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg18Handle = %mem_proc(DM_ALLOC,^size(strCustomer)*arg18Array.arrayValues.Count)
			arg18HandlePos = 1
			arg18List = new ArrayList()
			dispatcher.UnwrapObjectCollection(^m(arg18Handle),^size(strCustomer),arg18HandlePos,arg18Array,arg18List)

			;;Now call the method

			xcall arraylist_parameters(
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	arg17List,
			&	arg18List,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	,
			&	
			&	
			& )

			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

endnamespace