import System.Collections
import Harmony.TraditionalBridge
;;; <summary>
;;; The main entry point for the application.
;;; </summary>
main
	record
		dispatcher, @TestDispatcher
		ttChan, i4, 0
		jsonReader, @Json.Json
		jsonVal, @Json.JsonValue
proc
	;jsonReader = new Json.Json()
;	if('}' >= '0' && '}' <= '9')
;		nop
	;jsonVal = jsonReader.ParseJson('{"Name":"fred","Arguments":[{"PassedValue":"hello","DataType":1},{"PassedValue":55,"DataType":8},{"PassedValue":23,"DataType":8},{"PassedValue":{"Type":"ORDERS","Value":"MDAwMDAzMDAwMDAxMDAwMDA2MDAwMDI1MDAwMDQwMDAwMDE0OTAxOTMwMzAxMDAwMDAwICAgICAgMDkzMDMwMQ==","GRFA":"AAAAAAAAzsGd5A=="},"DataType":16},{"PassedValue":[{"Type":"ORDERS","Value":"MDAwMDAzMDAwMDAxMDAwMDA2MDAwMDI1MDAwMDQwMDAwMDE0OTAxOTMwMzAxMDAwMDAwICAgICAgMDkzMDMwMQ==","GRFA":"AAAAAAAAzsGd5A=="},{"Type":"ORDERS","Value":"MDAwMDA0MDAwMDA4MDAwMDE0MDAwMDIzMDAwMDcwMDAwMDE0OTAxOTMwMzA1MDAwMDAwICAgICAgNzQ0MjQ0MA==","GRFA":"QgAAAAAAQsjWVg=="},{"Type":"ORDERS","Value":"MDAwMDA1MDAwMDA1MDAwMDEzMDAwMDM3MDAwMDQ1MDAwMTcwMDAzOTMwMzE1ICAgICAgICAgICAgNDY1MTU3NQ==","GRFA":"hAAAAAAABnWyXw=="},{"Type":"ORDERS","Value":"MDAwMDA2MDAwMDAyMDAwMDExMDAwMDE1MDAwMDc1MDAwMDE0OTAzOTMwMzE3ICAgICAgICAgICAgMTg2MDYzNA==","GRFA":"xgAAAAAA4FXMkA=="},{"Type":"ORDERS","Value":"MDAwMDA3MDAwMDA5MDAwMDIwMDAwMDA4MDAwMDI1MDAwMDE0OTA0OTMwMzA3ICAgICAgICAgICAgODM3Mjc2Mw==","GRFA":"CAEAAAAAPGvldQ=="},{"Type":"ORDERS","Value":"MDAwMDA4MDAwMDA2MDAwMDE4MDAwMDA4MDAwMDMwMDAwMDE5OTA0OTMwMzA3ICAgICAgICAgICAgNTU4MTg0Mg==","GRFA":"SgEAAAAAER5W7Q=="},{"Type":"ORDERS","Value":"MDAwMDA5MDAwMDAzMDAwMDE3MDAwMDA4MDAwMTAwMDAwMDE4MTA0OTMwMzA3ICAgICAgICAgICAgMjc5MDkyMQ==","GRFA":"jAEAAAAAvBK2Kw=="},{"Type":"ORDERS","Value":"MDAwMDEwMDAwMDM4MDAwMDE5MDAwMDE2MDAwMDk5MDAwMDE5MTA1OTUwMzAzOTUwNTA5OTUwMzEwMDAwODg4OQ==","GRFA":"zgEAAAAAnohNmQ=="}],"DataType":32}]}')
;	nop
	xcall flags(0101010010)
	open(ttChan, O, "TT:")
	puts(ttChan, "READY" + %char(13)+ %char(10))
	dispatcher = new TestDispatcher()
	dispatcher.Dispatch(ttChan)
	;dispatcher.ProcessCallBlock((@Json.JsonObject)jsonVal, ttChan) 
endmain

subroutine MetaOrders
	req out metadata, @DataObjectMetadataBase
proc
	metadata = Orders.sMetadata
	xreturn
endsubroutine
.include 'orders' repository  , structure = 'STROrders', end

namespace Test
	
	;structure STROrdersArrayWrapper
	;	Value, [*]StrOrders
	;endstructure


	public partial class Orders extends DataObjectBase
		;;make the record available and a copy
		private mSynergyData, STROrders 
		private mOriginalSynergyData, STROrders 
		
		public static sMetadata, @OrdersMetadata
		static method Orders
		proc
			if(sMetadata == ^null)
				sMetadata = new OrdersMetadata()

		endmethod
		
		;;; <summary>
		;;;  Constructor, initialise the base fields
		;;; </summary>
		public method Orders
			endparams
			parent()
		proc
			init mSynergyData, mOriginalSynergyData
		endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Orders
			in req inData			,STROrders
			endparams
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod.Run(mSynergyData, mGlobalRFA)
		endmethod
		
		public property Or_number, int
			method get
			proc
				mreturn (int)mSynergyData.Or_number
				
			endmethod
			method set
			proc
				mSynergyData.Or_number = value
			endmethod
		endproperty
		;;Or_vendor
		public property Or_vendor, int
			method get
			proc
				mreturn (int)mSynergyData.Or_vendor
				
			endmethod
			method set
			proc
				mSynergyData.Or_vendor = value
			endmethod
		endproperty
		;;Or_item
		public property Or_item, int
			method get
			proc
				mreturn (int)mSynergyData.Or_item
				
			endmethod
			method set
			proc
				mSynergyData.Or_item = value
			endmethod
		endproperty
		;;Or_customer
		public property Or_customer, int
			method get
			proc
				mreturn (int)mSynergyData.Or_customer
				
			endmethod
			method set
			proc
				mSynergyData.Or_customer = value
			endmethod
		endproperty
		;;Or_qty
		public property Or_qty, int
			method get
			proc
				mreturn (int)mSynergyData.Or_qty
				
			endmethod
			method set
			proc
				mSynergyData.Or_qty = value
			endmethod
		endproperty
		;;Or_price
		public property Or_price, decimal
			method get
			proc
				mreturn mSynergyData.Or_price
				
			endmethod
			method set
			proc
				mSynergyData.Or_price = value
			endmethod
		endproperty
		;;Or_terms
		public property Or_terms, string
			method get
			proc
				mreturn %atrim(mSynergyData.Or_terms)
				
			endmethod
			method set
			proc
				mSynergyData.Or_terms = value
			endmethod
		endproperty
		;;Or_odate
		public property Or_odate, d
			method get
			proc
				mreturn mSynergyData.Or_odate
			endmethod
			method set
			proc
			endmethod
		endproperty
		;;Or_sdate
		public property Or_sdate, d
			method get
			proc
				mreturn mSynergyData.Or_sdate
			endmethod
			method set
			proc
			endmethod
		endproperty
		;;Or_edate
		public property Or_edate, d
			method get
			proc
				mreturn mSynergyData.Or_edate
				
			endmethod
			method set
			proc
			endmethod
		endproperty
		;;Or_invoice
		public property Or_invoice, int
			method get
			proc
				mreturn (int)mSynergyData.Or_invoice
				
			endmethod
			method set
			proc
				mSynergyData.Or_invoice = value
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the complete synergy record
		;;; </summary>
		public override property SynergyRecord, a
			method get
			proc
				mreturn mSynergyData
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the complete original synergy record
		;;; </summary>
		public override property OriginalSynergyRecord, a
			method get
			proc
				mreturn mOriginalSynergyData
			endmethod
		endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
			endparams
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty
	endclass
	
	public partial class OrdersMetadata extends DataObjectMetadataBase
		
		public method OrdersMetadata
		proc
			RPSStructureName = "ORDERS"
			RPSStructureSize = ^size(STROrders)
			;;fill in all of the field defs and other type level info here
;			AddFieldInfo("Or_number", "DECIMAL", 6, 1, 0, false)
;			AddFieldInfo("Or_vendor", "DECIMAL", 6, 7, 0, false)
;			AddFieldInfo("Or_item", "DECIMAL", 6, 13, 0, false)
;			AddFieldInfo("Or_customer", "DECIMAL", 6, 19, 0, false)
;			AddFieldInfo("Or_qty", "DECIMAL", 6, 25, 0, false)
;			AddFieldInfo("Or_price", "IMPLIED", 7, 31, 02, false)
;			AddFieldInfo("Or_terms", "ALPHA", 2, 38, 0, false)
;			AddFieldInfo("Or_odate", "DATE", 6, 40, 0, false)
;			AddFieldInfo("Or_sdate", "DATE", 6, 46, 0, false)
;			AddFieldInfo("Or_edate", "DATE", 6, 52, 0, false)
;			AddFieldInfo("Or_invoice", "DECIMAL", 7, 58, 0, false)
			
		endmethod
	
		public override method GetFieldByName, @FieldDataDefinition
			fieldName, @string
		proc
			mreturn ^null
		endmethod


		public override method MakeNew, @DataObjectBase
			req in dataArea, a
			req in grfa, a
			record
				result, @Orders
		proc
			result = new Orders(dataArea) 
			result.GlobalRFA = grfa
			mreturn result
		endmethod
	endclass
endnamespace



subroutine fred
	req in arg1, a
	req in arg2, d
	req in arg3, i
	req in arg4, STROrders
	req in arg5, [*]STROrders
proc
	xreturn
endsubroutine


function blob, ^val
	req in arg1, a
	req in arg2, d
	req in arg3, i
	req in arg4, @Orders
	req in arg5, @ArrayList
proc
	freturn 1337
endfunction


namespace TraditionalBridge.Test

	class TestDispatcher extends RoutineDispatcher
		public method TestDispatcher
		proc
			;;all of the routine dispatchers to the string lookup for rapid dispatch when we have a large number of routines
			mDispatchStubs.Add("fred", new FredDispatch())

			;;init all dataobject metadata objects here
			DataObjectMetadataBase.LookupType("ORDERS")
		endmethod
	endclass

	class FredDispatch extends RoutineStub
		private mOrdersMetadataInstance, @DataObjectMetadataBase


		public method FredDispatch
		proc
			;;init all dataobject metadata we use directly in this stub
			mOrdersMetadataInstance = DataObjectMetadataBase.LookupType("ORDERS")
		endmethod


		public override method Dispatch, void
			name, @string
			callFrame, @Json.JsonObject
			serializer, @Json.ChannelSerializer
			dispatcher, @RoutineDispatcher
			record
				fredArguments, @Json.JsonArray
				fredArg4, @DataObjectBase
				fredArg4Data, STROrders
				fredArg5Array, @Json.JsonArray
				fredArg5Handle, i4
				fredArg5HandlePosition, i4
		proc
			fredArguments = (@Json.JsonArray)callFrame.GetProperty("Arguments")
			fredArg4 = dispatcher.DeserializeObject((@Json.JsonObject)fredArguments.arrayValues[3], mOrdersMetadataInstance)
			fredArg4Data = fredArg4.SynergyRecord
			fredArg5Array = (@Json.JsonArray)((@Json.JsonObject)fredArguments.arrayValues[4]).GetProperty("PassedValue")
			fredArg5Handle = %mem_proc(DM_ALLOC, ^size(STROrders) * fredArg5Array.arrayValues.Count)
			fredArg5HandlePosition = 1
			dispatcher.UnwrapObjectCollection(^m(fredArg5Handle), ^size(STROrders), fredArg5HandlePosition, fredArg5Array)
			xcall fred(dispatcher.GetText((@Json.JsonObject)fredArguments.arrayValues[0]), dispatcher.GetDecimal((@Json.JsonObject)fredArguments.arrayValues[1]), dispatcher.GetInt((@Json.JsonObject)fredArguments.arrayValues[2]), fredArg4Data, ^m(STROrders, fredArg5Handle))
			serializer.MapOpen()
			serializer.String("IsError")
			serializer.Bool(false)
			serializer.String("Result")
			serializer.MapOpen()
			serializer.MapClose()
			serializer.MapClose()
		endmethod
	endclass
endnamespace
