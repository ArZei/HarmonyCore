;;*****************************************************************************
;;
;; Title:       Pool2MethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.Pool2

	structure strFake
		,a1
	endstructure

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Pool2.Initialize
	;;; </summary>
	public class Initialize_Dispatch extends RoutineStub


		public method Initialize_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		I4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			;;returnValue = %Initialize()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Pool2.Cleanup
	;;; </summary>
	public class Cleanup_Dispatch extends RoutineStub


		public method Cleanup_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			;;xcall Cleanup()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Pool2.getGreeting
	;;; </summary>
	public class getGreeting_Dispatch extends RoutineStub


		public method getGreeting_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT message A30)
				arg1,				a30
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			;;xcall getGreeting(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT message A30)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Pool2.setGreeting
	;;; </summary>
	public class setGreeting_Dispatch extends RoutineStub


		public method setGreeting_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN message A30)
				arg1,				a30
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN message A30)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			;;xcall setGreeting(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

endnamespace