;;*****************************************************************************
;;
;; Title:       ZDateTimeMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.ZDateTime

	structure strFake
		,a1
	endstructure

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method ZDateTime.DateTime20
	;;; </summary>
	public class DateTime20_Dispatch extends RoutineStub


		public method DateTime20_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN Dt20In D20 YYYYMMDD date)
				arg1,				d20
				;;Argument 2 (REQUIRED OUT Dt20Out D20 YYYYMMDD date)
				arg2,				d20
				;;Argument 3 (REQUIRED INOUT Dt20InOut D20 YYYYMMDD date)
				arg3,				d20
				returnValue,		D20
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN Dt20In D20 YYYYMMDD date)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;Argument 3 (REQUIRED INOUT Dt20InOut D20 YYYYMMDD date)
			arg3 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[3])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %DateTime20(arg1,arg2,arg3)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT Dt20Out D20 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT Dt20InOut D20 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg3)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method ZDateTime.DateTimeOther
	;;; </summary>
	public class DateTimeOther_Dispatch extends RoutineStub


		public method DateTimeOther_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT dt8 D8 YYYYMMDD date)
				arg1,				d8
				;;Argument 2 (REQUIRED INOUT dt6 D6 YYMMDD date)
				arg2,				d6
				;;Argument 3 (REQUIRED INOUT dt14 D14 YYYYMMDD date)
				arg3,				d14
				returnValue,		D8
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT dt8 D8 YYYYMMDD date)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED INOUT dt6 D6 YYMMDD date)
			arg2 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (REQUIRED INOUT dt14 D14 YYYYMMDD date)
			arg3 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[3])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %DateTimeOther(arg1,arg2,arg3)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT dt8 D8 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT dt6 D6 YYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT dt14 D14 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg3)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method ZDateTime.DateTimeS
	;;; </summary>
	public class DateTimeS_Dispatch extends RoutineStub

		private mDatetimestrMetadata, @DataObjectMetadataBase

		public method DateTimeS_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mDatetimestrMetadata = DataObjectMetadataBase.LookupType("Datetimestr")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT DATETIMESTR [*]structure @Datetimestr)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT DATETIMESTR [*]structure @Datetimestr)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall DateTimex(^m(strDatetimestr,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT DATETIMESTR [*]structure @Datetimestr)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method ZDateTime.DteTmeAry
	;;; </summary>
	public class DteTmeAry_Dispatch extends RoutineStub

		private mDatetimearyMetadata, @DataObjectMetadataBase

		public method DteTmeAry_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mDatetimearyMetadata = DataObjectMetadataBase.LookupType("Datetimeary")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT DATETIMEARY structure @Datetimeary)
				arg1DataObject, @DataObjectBase
				arg1, strDatetimeary
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT DATETIMEARY structure @Datetimeary)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mDatetimearyMetadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall DteTmeAry(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT DATETIMEARY structure @Datetimeary)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Datetimeary record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method ZDateTime.Userdates
	;;; </summary>
	public class Userdates_Dispatch extends RoutineStub

		private mUserdateMetadata, @DataObjectMetadataBase

		public method Userdates_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mUserdateMetadata = DataObjectMetadataBase.LookupType("Userdate")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT USERDATES structure @Userdate)
				arg1DataObject, @DataObjectBase
				arg1, strUserdate
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall Userdates(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT USERDATES structure @Userdate)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Userdate record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

endnamespace