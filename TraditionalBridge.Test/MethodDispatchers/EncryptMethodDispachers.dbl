;;*****************************************************************************
;;
;; Title:       EncryptMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.Encrypt

	structure strFake
		,a1
	endstructure

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst1
	;;; </summary>
	public class encrypt_tst1_Dispatch extends RoutineStub


		public method encrypt_tst1_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN p1 A50)
				arg1,				a50
				;;Argument 2 (OPTIONAL IN p2 D5)
				arg2,				d5
				;;Argument 3 (OPTIONAL IN p3 D10.3)
				arg3,				d10.3
				;;Argument 4 (OPTIONAL IN p4 I4)
				arg4,				i4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN p1 A50)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 1 (OPTIONAL IN p2 D5)
			arg2 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[2])

			;;Argument 1 (OPTIONAL IN p3 D10.3)
			arg3 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[3])

			;;Argument 1 (OPTIONAL IN p4 I4)
			arg4 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[4])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_one(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst10
	;;; </summary>
	public class encrypt_tst10_Dispatch extends RoutineStub

		private mStrtest3Metadata, @DataObjectMetadataBase

		public method encrypt_tst10_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT strtest3 structure @Strtest3)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest3
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT strtest3 structure @Strtest3)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest3Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr3(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT strtest3 structure @Strtest3)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest3 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst11
	;;; </summary>
	public class encrypt_tst11_Dispatch extends RoutineStub

		private mStrtest4Metadata, @DataObjectMetadataBase

		public method encrypt_tst11_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest4Metadata = DataObjectMetadataBase.LookupType("Strtest4")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT strtest4 structure @Strtest4)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT strtest4 structure @Strtest4)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest4Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr4(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT strtest4 structure @Strtest4)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest4 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst12
	;;; </summary>
	public class encrypt_tst12_Dispatch extends RoutineStub

		private mStrtest1Metadata, @DataObjectMetadataBase
		private mStrtest3Metadata, @DataObjectMetadataBase

		public method encrypt_tst12_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest1Metadata = DataObjectMetadataBase.LookupType("Strtest1")
			mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT strtest1 structure @Strtest1)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest1
				;;Argument 2 (REQUIRED INOUT strtest3 structure @Strtest3)
				arg2DataObject, @DataObjectBase
				arg2, strStrtest3
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT strtest1 structure @Strtest1)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest1Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;Argument 1 (REQUIRED INOUT strtest3 structure @Strtest3)
			;;Structure argument. Get the data object then get the record from it
			arg2DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest3Metadata)
			arg2 = arg2DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr5(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT strtest1 structure @Strtest1)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest1 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT strtest3 structure @Strtest3)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 2: Single Strtest3 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst2
	;;; </summary>
	public class encrypt_tst2_Dispatch extends RoutineStub


		public method encrypt_tst2_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 D12.2)
				arg1,				d12.2
				;;Argument 2 (OPTIONAL INOUT p2 D10.5)
				arg2,				d10.5
				;;Argument 3 (OPTIONAL IN p3 D10.5)
				arg3,				d10.5
				;;Argument 4 (OPTIONAL IN p4 D10.2)
				arg4,				d10.2
				;;Argument 5 (OPTIONAL IN p5 D10)
				arg5,				d10
				;;Argument 6 (OPTIONAL INOUT p6 D7.7)
				arg6,				d7.7
				;;Argument 7 (OPTIONAL IN p7 D5.4)
				arg7,				d5.4
				;;Argument 8 (OPTIONAL INOUT p8 D8)
				arg8,				d8
				;;Argument 9 (OPTIONAL INOUT p9 D7.1)
				arg9,				d7.1
				;;Argument 10 (OPTIONAL IN p10 D9)
				arg10,				d9
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 D12.2)
			arg1 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[1])

			;;Argument 1 (OPTIONAL INOUT p2 D10.5)
			arg2 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[2])

			;;Argument 1 (OPTIONAL IN p3 D10.5)
			arg3 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[3])

			;;Argument 1 (OPTIONAL IN p4 D10.2)
			arg4 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[4])

			;;Argument 1 (OPTIONAL IN p5 D10)
			arg5 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[5])

			;;Argument 1 (OPTIONAL INOUT p6 D7.7)
			arg6 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[6])

			;;Argument 1 (OPTIONAL IN p7 D5.4)
			arg7 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[7])

			;;Argument 1 (OPTIONAL INOUT p8 D8)
			arg8 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[8])

			;;Argument 1 (OPTIONAL INOUT p9 D7.1)
			arg9 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[9])

			;;Argument 1 (OPTIONAL IN p10 D9)
			arg10 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[10])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_two(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 D12.2)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 D10.5)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (OPTIONAL INOUT p6 D7.7)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg6)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (OPTIONAL INOUT p8 D8)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg8)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (OPTIONAL INOUT p9 D7.1)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg9)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst3
	;;; </summary>
	public class encrypt_tst3_Dispatch extends RoutineStub


		public method encrypt_tst3_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 A30)
				arg1,				a30
				;;Argument 2 (OPTIONAL INOUT p2 A30)
				arg2,				a30
				;;Argument 3 (OPTIONAL INOUT p3 A10)
				arg3,				a10
				;;Argument 4 (OPTIONAL INOUT p4 A50)
				arg4,				a50
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 A30)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 1 (OPTIONAL INOUT p2 A30)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 1 (OPTIONAL INOUT p3 A10)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 1 (OPTIONAL INOUT p4 A50)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_four(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 A30)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 A30)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT p3 A10)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL INOUT p4 A50)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg4))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst4
	;;; </summary>
	public class encrypt_tst4_Dispatch extends RoutineStub


		public method encrypt_tst4_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL INOUT p2 I4)
				arg2,				i4
				;;Argument 3 (OPTIONAL INOUT p3 D6)
				arg3,				d6
				;;Argument 4 (OPTIONAL IN p4 A5)
				arg4,				a5
				;;Argument 5 (OPTIONAL INOUT p5 D6.3)
				arg5,				d6.3
				;;Argument 6 (OPTIONAL INOUT p6 [*]D5)
				arg6Array,			@JsonArray
				arg6Handle,			D_HANDLE
				arg6HandlePos,		int
				;;Argument 7 (OPTIONAL INOUT p7 [*]A20)
				arg7Array,			@JsonArray
				arg7Handle,			D_HANDLE
				arg7HandlePos,		int
				;;Argument 8 (OPTIONAL INOUT p8 [*]D10.3)
				arg8Array,			@JsonArray
				arg8Handle,			D_HANDLE
				arg8HandlePos,		int
				;;Argument 9 (OPTIONAL INOUT p9 [*]I4)
				arg9Array,			@JsonArray
				arg9Handle,			D_HANDLE
				arg9HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 1 (OPTIONAL INOUT p2 I4)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;Argument 1 (OPTIONAL INOUT p3 D6)
			arg3 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[3])

			;;Argument 1 (OPTIONAL IN p4 A5)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 1 (OPTIONAL INOUT p5 D6.3)
			arg5 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[5])

			;;Argument 1 (OPTIONAL INOUT p6 [*]D5)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[6])
			arg6Array = (@JsonArray)((@JsonObject)arguments.arrayValues[6]).GetProperty("PassedValue")
			arg6Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg6Array.arrayValues.Count)
			arg6HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg6Handle),argumentDefinition,arg6HandlePos,arg6Array)

			;;Argument 1 (OPTIONAL INOUT p7 [*]A20)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[7])
			arg7Array = (@JsonArray)((@JsonObject)arguments.arrayValues[7]).GetProperty("PassedValue")
			arg7Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg7Array.arrayValues.Count)
			arg7HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg7Handle),argumentDefinition,arg7HandlePos,arg7Array)

			;;Argument 1 (OPTIONAL INOUT p8 [*]D10.3)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[8])
			arg8Array = (@JsonArray)((@JsonObject)arguments.arrayValues[8]).GetProperty("PassedValue")
			arg8Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg8Array.arrayValues.Count)
			arg8HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg8Handle),argumentDefinition,arg8HandlePos,arg8Array)

			;;Argument 1 (OPTIONAL INOUT p9 [*]I4)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[9])
			arg9Array = (@JsonArray)((@JsonObject)arguments.arrayValues[9]).GetProperty("PassedValue")
			arg9Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg9Array.arrayValues.Count)
			arg9HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg9Handle),argumentDefinition,arg9HandlePos,arg9Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_eight(arg1,arg2,arg3,arg4,arg5,^m(strFake(1:5),arg6Handle),^m(strFake(1:20),arg7Handle),^m(strFake(1:10),arg8Handle),^m(strFake(1:4),arg9Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT p3 D6)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg3)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (OPTIONAL INOUT p5 D6.3)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg5)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (OPTIONAL INOUT p6 [*]D5)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of decimal
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 7 (OPTIONAL INOUT p7 [*]A20)

			serializer.MapOpen()
			serializer.Pair("Position", 7)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (OPTIONAL INOUT p8 [*]D10.3)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of implied decimal
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (OPTIONAL INOUT p9 [*]I4)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of integer
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst5
	;;; </summary>
	public class encrypt_tst5_Dispatch extends RoutineStub


		public method encrypt_tst5_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL INOUT p2 A5)
				arg2,				a5
				returnValue,		A9
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 1 (OPTIONAL INOUT p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_nine(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst6
	;;; </summary>
	public class encrypt_tst6_Dispatch extends RoutineStub


		public method encrypt_tst6_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN p1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL INOUT p2 A5)
				arg2,				a5
				returnValue,		D9
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 1 (OPTIONAL INOUT p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_ten(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst7
	;;; </summary>
	public class encrypt_tst7_Dispatch extends RoutineStub


		public method encrypt_tst7_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT verno A30)
				arg1,				a30
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT verno A30)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall get_verno_tst(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT verno A30)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst8
	;;; </summary>
	public class encrypt_tst8_Dispatch extends RoutineStub

		private mStrtest1Metadata, @DataObjectMetadataBase

		public method encrypt_tst8_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest1Metadata = DataObjectMetadataBase.LookupType("Strtest1")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest1
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest1Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr1(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest1 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method Encrypt.encrypt_tst9
	;;; </summary>
	public class encrypt_tst9_Dispatch extends RoutineStub

		private mStrtest2Metadata, @DataObjectMetadataBase

		public method encrypt_tst9_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest2Metadata = DataObjectMetadataBase.LookupType("Strtest2")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT strtest2 structure @Strtest2)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest2
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT strtest2 structure @Strtest2)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest2Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr2(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT strtest2 structure @Strtest2)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest2 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

endnamespace