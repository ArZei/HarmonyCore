;;*****************************************************************************
;;
;; Title:       WCFieldsMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.WCFields


	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method WCFields.teststr1
	;;; </summary>
	public class teststr1_Dispatch extends RoutineStub

		private mStrtest1Metadata, @DataObjectMetadataBase

		public method teststr1_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest1Metadata = DataObjectMetadataBase.LookupType("Strtest1")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest1
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest1Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr1(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT STRTEST1 structure @Strtest1)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest1 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method WCFields.teststr2
	;;; </summary>
	public class teststr2_Dispatch extends RoutineStub

		private mStrtest2Metadata, @DataObjectMetadataBase

		public method teststr2_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest2Metadata = DataObjectMetadataBase.LookupType("Strtest2")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT STRTEST2 structure @Strtest2)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest2
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT STRTEST2 structure @Strtest2)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest2Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr2(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT STRTEST2 structure @Strtest2)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest2 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method WCFields.teststr3
	;;; </summary>
	public class teststr3_Dispatch extends RoutineStub

		private mStrtest3Metadata, @DataObjectMetadataBase

		public method teststr3_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT STRTEST3 structure @Strtest3)
				arg1DataObject, @DataObjectBase
				arg1, strStrtest3
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT STRTEST3 structure @Strtest3)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStrtest3Metadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr3(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT STRTEST3 structure @Strtest3)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Strtest3 record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method WCFields.teststr9
	;;; </summary>
	public class teststr9_Dispatch extends RoutineStub

		private mStrtest3Metadata, @DataObjectMetadataBase

		public method teststr9_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStrtest3Metadata = DataObjectMetadataBase.LookupType("Strtest3")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1de7 D7)
				arg1,				d7
				;;Argument 2 (REQUIRED INOUT STRTEST3 [*]structure @Strtest3)
				arg2Array,			@JsonArray
				arg2Handle,			D_HANDLE
				arg2HandlePos,		int
				;;Argument 3 (REQUIRED INOUT p3al10 A10)
				arg3,				a10
			endrecord

			;;Temp structure tempstr2
			structure tempstr2
				arry, @Strtest3
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1de7 D7)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED INOUT STRTEST3 [*]structure @Strtest3)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[2])
			arg2Array = (@JsonArray)((@JsonObject)arguments.arrayValues[2]).GetProperty("PassedValue")
			arg2Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg2Array.arrayValues.Count)
			arg2HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg2Handle),argumentDefinition,arg2HandlePos,arg2Array)

			;;Argument 3 (REQUIRED INOUT p3al10 A10)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall teststr9(arg1,^m(strStrtest3,arg2Handle),arg3)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1de7 D7)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT STRTEST3 [*]structure @Strtest3)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT p3al10 A10)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

endnamespace