;;*****************************************************************************
;;
;; Title:       LrgPktsMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.LrgPkts

	structure strFake
		,a1
	endstructure

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method LrgPkts.P1StrAryO64k
	;;; </summary>
	public class P1StrAryO64k_Dispatch extends RoutineStub

		private mDatasetMetadata, @DataObjectMetadataBase

		public method P1StrAryO64k_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mDatasetMetadata = DataObjectMetadataBase.LookupType("Dataset")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT DATASET [*]structure @Dataset)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT DATASET [*]structure @Dataset)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall P1StrAryO64k(^m(strDataset,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT DATASET [*]structure @Dataset)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method LrgPkts.P2StrArysO64k
	;;; </summary>
	public class P2StrArysO64k_Dispatch extends RoutineStub

		private mAddresMetadata, @DataObjectMetadataBase
		private mPerfstructMetadata, @DataObjectMetadataBase

		public method P2StrArysO64k_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mAddresMetadata = DataObjectMetadataBase.LookupType("Addres")
			mPerfstructMetadata = DataObjectMetadataBase.LookupType("Perfstruct")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT ADDRESS [*]structure @Addres)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
				;;Argument 2 (REQUIRED INOUT PERFSTRUCT [*]structure @Perfstruct)
				arg2Array,			@JsonArray
				arg2Handle,			D_HANDLE
				arg2HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT ADDRESS [*]structure @Addres)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;Argument 2 (REQUIRED INOUT PERFSTRUCT [*]structure @Perfstruct)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[2])
			arg2Array = (@JsonArray)((@JsonObject)arguments.arrayValues[2]).GetProperty("PassedValue")
			arg2Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg2Array.arrayValues.Count)
			arg2HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg2Handle),argumentDefinition,arg2HandlePos,arg2Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall P2StrArysO64k(^m(strAddres,arg1Handle),^m(strPerfstruct,arg2Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT ADDRESS [*]structure @Addres)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT PERFSTRUCT [*]structure @Perfstruct)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method LrgPkts.P3StrAry
	;;; </summary>
	public class P3StrAry_Dispatch extends RoutineStub

		private mAddresMetadata, @DataObjectMetadataBase

		public method P3StrAry_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mAddresMetadata = DataObjectMetadataBase.LookupType("Addres")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT ADDRESS [*]structure @Addres)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT ADDRESS [*]structure @Addres)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall P3StrAry(^m(strAddres,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT ADDRESS [*]structure @Addres)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method LrgPkts.P4StrAry
	;;; </summary>
	public class P4StrAry_Dispatch extends RoutineStub

		private mPerfstructMetadata, @DataObjectMetadataBase
		private mAddresMetadata, @DataObjectMetadataBase

		public method P4StrAry_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mPerfstructMetadata = DataObjectMetadataBase.LookupType("Perfstruct")
			mAddresMetadata = DataObjectMetadataBase.LookupType("Addres")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT PERFSTRUCT [*]structure @Perfstruct)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
				;;Argument 2 (REQUIRED INOUT ADDRESS [*]structure @Addres)
				arg2Array,			@JsonArray
				arg2Handle,			D_HANDLE
				arg2HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT PERFSTRUCT [*]structure @Perfstruct)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;Argument 2 (REQUIRED INOUT ADDRESS [*]structure @Addres)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[2])
			arg2Array = (@JsonArray)((@JsonObject)arguments.arrayValues[2]).GetProperty("PassedValue")
			arg2Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg2Array.arrayValues.Count)
			arg2HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg2Handle),argumentDefinition,arg2HandlePos,arg2Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall P4StrAry(^m(strPerfstruct,arg1Handle),^m(strAddres,arg2Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT PERFSTRUCT [*]structure @Perfstruct)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT ADDRESS [*]structure @Addres)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method LrgPkts.getNumRecords
	;;; </summary>
	public class getNumRecords_Dispatch extends RoutineStub


		public method getNumRecords_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT number I4)
				arg1,				i4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall getNumRecords(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT number I4)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method LrgPkts.getStructArray
	;;; </summary>
	public class getStructArray_Dispatch extends RoutineStub

		private mPerfstructMetadata, @DataObjectMetadataBase

		public method getStructArray_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mPerfstructMetadata = DataObjectMetadataBase.LookupType("Perfstruct")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT PERFSTRUCT [*]structure @Perfstruct)
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall getStructArray(^m(strPerfstruct,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT PERFSTRUCT [*]structure @Perfstruct)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method LrgPkts.setStructArray
	;;; </summary>
	public class setStructArray_Dispatch extends RoutineStub

		private mPerfstructMetadata, @DataObjectMetadataBase

		public method setStructArray_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mPerfstructMetadata = DataObjectMetadataBase.LookupType("Perfstruct")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN PERFSTRUCT [*]structure @Perfstruct)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
				;;Argument 2 (REQUIRED IN count I4)
				arg2,				i4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN PERFSTRUCT [*]structure @Perfstruct)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;Argument 2 (REQUIRED IN count I4)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall setStructArray(^m(strPerfstruct,arg1Handle),arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

endnamespace