;;*****************************************************************************
;;
;; Title:       syntstMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.syntst


	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.array21
	;;; </summary>
	public class array21_Dispatch extends RoutineStub


		public method array21_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN p1 A5)
				arg1,				a5
				;;Argument 2 (REQUIRED IN p2 A5)
				arg2,				a5
				;;Argument 3 (REQUIRED IN p3 A5)
				arg3,				a5
				;;Argument 4 (REQUIRED IN p4 A5)
				arg4,				a5
				;;Argument 5 (REQUIRED IN p5 A5)
				arg5,				a5
				;;Argument 6 (REQUIRED IN p6 A5)
				arg6,				a5
				;;Argument 7 (REQUIRED IN p7 A5)
				arg7,				a5
				;;Argument 8 (REQUIRED IN p8 A5)
				arg8,				a5
				;;Argument 9 (REQUIRED IN p9 A5)
				arg9,				a5
				;;Argument 10 (REQUIRED IN p10 A5)
				arg10,				a5
				;;Argument 11 (REQUIRED IN p11 A5)
				arg11,				a5
				;;Argument 12 (REQUIRED IN p12 A5)
				arg12,				a5
				;;Argument 13 (REQUIRED IN p13 A5)
				arg13,				a5
				;;Argument 14 (REQUIRED IN p14 A5)
				arg14,				a5
				;;Argument 15 (REQUIRED IN p15 A5)
				arg15,				a5
				;;Argument 16 (REQUIRED IN p16 A5)
				arg16,				a5
				;;Argument 17 (REQUIRED IN p17 A5)
				arg17,				a5
				;;Argument 18 (REQUIRED IN p18 A5)
				arg18,				a5
				;;Argument 19 (REQUIRED IN p19 A5)
				arg19,				a5
				;;Argument 20 (REQUIRED IN p20 A5)
				arg20,				a5
				;;Argument 21 (REQUIRED INOUT p21 [*]A7)
				arg21Array,			@JsonArray
				arg21Handle,			D_HANDLE
				arg21HandlePos,		int
				;;Argument 22 (REQUIRED IN p22 A5)
				arg22,				a5
			endrecord

			;;Temp structure tempstr21
			structure tempstr21
				arry, [1]A7
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED IN p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (REQUIRED IN p3 A5)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (REQUIRED IN p4 A5)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (REQUIRED IN p5 A5)
			arg5 = dispatcher.GetText((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (REQUIRED IN p6 A5)
			arg6 = dispatcher.GetText((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (REQUIRED IN p7 A5)
			arg7 = dispatcher.GetText((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (REQUIRED IN p8 A5)
			arg8 = dispatcher.GetText((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (REQUIRED IN p9 A5)
			arg9 = dispatcher.GetText((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (REQUIRED IN p10 A5)
			arg10 = dispatcher.GetText((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (REQUIRED IN p11 A5)
			arg11 = dispatcher.GetText((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (REQUIRED IN p12 A5)
			arg12 = dispatcher.GetText((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (REQUIRED IN p13 A5)
			arg13 = dispatcher.GetText((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (REQUIRED IN p14 A5)
			arg14 = dispatcher.GetText((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (REQUIRED IN p15 A5)
			arg15 = dispatcher.GetText((@JsonObject)arguments.arrayValues[15])

			;;Argument 16 (REQUIRED IN p16 A5)
			arg16 = dispatcher.GetText((@JsonObject)arguments.arrayValues[16])

			;;Argument 17 (REQUIRED IN p17 A5)
			arg17 = dispatcher.GetText((@JsonObject)arguments.arrayValues[17])

			;;Argument 18 (REQUIRED IN p18 A5)
			arg18 = dispatcher.GetText((@JsonObject)arguments.arrayValues[18])

			;;Argument 19 (REQUIRED IN p19 A5)
			arg19 = dispatcher.GetText((@JsonObject)arguments.arrayValues[19])

			;;Argument 20 (REQUIRED IN p20 A5)
			arg20 = dispatcher.GetText((@JsonObject)arguments.arrayValues[20])

			;;Argument 21 (REQUIRED INOUT p21 [*]A7)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[21])
			arg21Array = (@JsonArray)((@JsonObject)arguments.arrayValues[21]).GetProperty("PassedValue")
			arg21Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg21Array.arrayValues.Count)
			arg21HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg21Handle),argumentDefinition,arg21HandlePos,arg21Array)

			;;Argument 22 (REQUIRED IN p22 A5)
			arg22 = dispatcher.GetText((@JsonObject)arguments.arrayValues[22])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall array21(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,^m(tempstr21.arry,arg21Handle),arg22)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 21 (REQUIRED INOUT p21 [*]A7)

			serializer.MapOpen()
			serializer.Pair("Position", 21)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.artest1
	;;; </summary>
	public class artest1_Dispatch extends RoutineStub


		public method artest1_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL INOUT param2 A5)
				arg2,				a5
				;;Argument 3 (OPTIONAL INOUT param3 A5)
				arg3,				a5
				;;Argument 4 (OPTIONAL INOUT param4 A5)
				arg4,				a5
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT param2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT param3 A5)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL INOUT param4 A5)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall artest1(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT param2 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT param3 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL INOUT param4 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg4))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_four
	;;; </summary>
	public class function_four_Dispatch extends RoutineStub


		public method function_four_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 A30)
				arg1,				a30
				;;Argument 2 (OPTIONAL INOUT p2 A30)
				arg2,				a30
				;;Argument 3 (OPTIONAL INOUT p3 A10)
				arg3,				a10
				;;Argument 4 (OPTIONAL INOUT p4 A5)
				arg4,				a5
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 A30)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT p2 A30)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT p3 A10)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL INOUT p4 A5)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_four(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 A30)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 A30)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT p3 A10)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL INOUT p4 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg4))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_eleven
	;;; </summary>
	public class function_eleven_Dispatch extends RoutineStub


		public method function_eleven_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL IN param2 A5)
				arg2,				a5
				returnValue,		I8
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_eleven(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_twelve
	;;; </summary>
	public class function_twelve_Dispatch extends RoutineStub


		public method function_twelve_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN p1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL INOUT p2 A5)
				arg2,				a5
				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_twelve(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixteen
	;;; </summary>
	public class function_sixteen_Dispatch extends RoutineStub


		public method function_sixteen_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 [*]A20)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord

			;;Temp structure tempstr1
			structure tempstr1
				arry, [1]A20
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 [*]A20)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixteen(^m(tempstr1.arry,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 [*]A20)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_nineteen
	;;; </summary>
	public class function_nineteen_Dispatch extends RoutineStub


		public method function_nineteen_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 D14)
				arg1,				d14
				;;Argument 2 (OPTIONAL INOUT p2 D10)
				arg2,				d10
				;;Argument 3 (OPTIONAL INOUT p3 D7)
				arg3,				d7
				;;Argument 4 (OPTIONAL INOUT p4 D10)
				arg4,				d10
				;;Argument 5 (OPTIONAL INOUT p5 D7)
				arg5,				d7
				;;Argument 6 (OPTIONAL IN p6 D4)
				arg6,				d4
				;;Argument 7 (OPTIONAL IN p7 D8)
				arg7,				d8
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 D14)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT p2 D10)
			arg2 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT p3 D7)
			arg3 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL INOUT p4 D10)
			arg4 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL INOUT p5 D7)
			arg5 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN p6 D4)
			arg6 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN p7 D8)
			arg7 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[7])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_nineteen(arg1,arg2,arg3,arg4,arg5,arg6,arg7)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 D14)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT p3 D7)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg3)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL INOUT p4 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg4)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (OPTIONAL INOUT p5 D7)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg5)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_twenty
	;;; </summary>
	public class function_twenty_Dispatch extends RoutineStub


		public method function_twenty_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 A10)
				arg1,				a10
				;;Argument 2 (OPTIONAL INOUT p2 A7)
				arg2,				a7
				;;Argument 3 (OPTIONAL INOUT p3 A10)
				arg3,				a10
				;;Argument 4 (OPTIONAL INOUT p4 A13)
				arg4,				a13
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 A10)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT p2 A7)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT p3 A10)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL INOUT p4 A13)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_twenty(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 A10)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 A7)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT p3 A10)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL INOUT p4 A13)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg4))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_twentysix
	;;; </summary>
	public class function_twentysix_Dispatch extends RoutineStub


		public method function_twentysix_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL INOUT param2 A30)
				arg2,				a30
				;;Argument 3 (OPTIONAL INOUT param3 A8)
				arg3,				a8
				;;Argument 4 (OPTIONAL IN param4 A1)
				arg4,				a1
				returnValue,		I4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT param2 A30)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT param3 A8)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 A1)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_twentysix(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT param2 A30)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT param3 A8)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtytwo
	;;; </summary>
	public class function_sixtytwo_Dispatch extends RoutineStub


		public method function_sixtytwo_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 I4)
				arg1,				i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 I4)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtytwo(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtythree
	;;; </summary>
	public class function_sixtythree_Dispatch extends RoutineStub


		public method function_sixtythree_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 I4)
				arg1,				i4
				;;Argument 2 (OPTIONAL IN param2 I1)
				arg2,				i1
				;;Argument 3 (OPTIONAL IN param3 I1)
				arg3,				i1
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 I4)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 I1)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 I1)
			arg3 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[3])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtythree(arg1,arg2,arg3)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtyfour
	;;; </summary>
	public class function_sixtyfour_Dispatch extends RoutineStub


		public method function_sixtyfour_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 I1)
				arg1,				i1
				;;Argument 2 (OPTIONAL IN param2 I2)
				arg2,				i2
				;;Argument 3 (OPTIONAL IN param3 I4)
				arg3,				i4
				;;Argument 4 (OPTIONAL IN param4 I4)
				arg4,				i4
				;;Argument 5 (OPTIONAL IN param5 I1)
				arg5,				i1
				;;Argument 6 (OPTIONAL IN param6 I1)
				arg6,				i1
				;;Argument 7 (OPTIONAL IN param7 I2)
				arg7,				i2
				;;Argument 8 (OPTIONAL IN param8 I4)
				arg8,				i4
				;;Argument 9 (OPTIONAL IN param9 I4)
				arg9,				i4
				;;Argument 10 (OPTIONAL IN param10 I1)
				arg10,				i1
				;;Argument 11 (OPTIONAL IN param11 I1)
				arg11,				i1
				;;Argument 12 (OPTIONAL IN param12 I2)
				arg12,				i2
				;;Argument 13 (OPTIONAL IN param13 I4)
				arg13,				i4
				;;Argument 14 (OPTIONAL IN param14 I4)
				arg14,				i4
				;;Argument 15 (OPTIONAL IN param15 I1)
				arg15,				i1
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 I1)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 I2)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 I4)
			arg3 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 I4)
			arg4 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 I1)
			arg5 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 I1)
			arg6 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 I2)
			arg7 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN param8 I4)
			arg8 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 I4)
			arg9 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 I1)
			arg10 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 I1)
			arg11 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 I2)
			arg12 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (OPTIONAL IN param13 I4)
			arg13 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (OPTIONAL IN param14 I4)
			arg14 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (OPTIONAL IN param15 I1)
			arg15 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[15])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtyfour(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtyfive
	;;; </summary>
	public class function_sixtyfive_Dispatch extends RoutineStub


		public method function_sixtyfive_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 I1)
				arg1,				i1
				;;Argument 2 (OPTIONAL IN param2 I2)
				arg2,				i2
				;;Argument 3 (OPTIONAL IN param3 I4)
				arg3,				i4
				;;Argument 4 (OPTIONAL IN param4 I8)
				arg4,				i8
				;;Argument 5 (OPTIONAL IN param5 I1)
				arg5,				i1
				;;Argument 6 (OPTIONAL IN param6 I1)
				arg6,				i1
				;;Argument 7 (OPTIONAL IN param7 I2)
				arg7,				i2
				;;Argument 8 (OPTIONAL IN param8 I4)
				arg8,				i4
				;;Argument 9 (OPTIONAL IN param9 I8)
				arg9,				i8
				;;Argument 10 (OPTIONAL IN param10 I1)
				arg10,				i1
				;;Argument 11 (OPTIONAL IN param11 I1)
				arg11,				i1
				;;Argument 12 (OPTIONAL IN param12 I2)
				arg12,				i2
				;;Argument 13 (OPTIONAL IN param13 I4)
				arg13,				i4
				;;Argument 14 (OPTIONAL IN param14 I8)
				arg14,				i8
				;;Argument 15 (OPTIONAL IN param15 I1)
				arg15,				i1
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 I1)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 I2)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 I4)
			arg3 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 I8)
			arg4 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 I1)
			arg5 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 I1)
			arg6 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 I2)
			arg7 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN param8 I4)
			arg8 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 I8)
			arg9 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 I1)
			arg10 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 I1)
			arg11 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 I2)
			arg12 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (OPTIONAL IN param13 I4)
			arg13 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (OPTIONAL IN param14 I8)
			arg14 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (OPTIONAL IN param15 I1)
			arg15 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[15])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtyfive(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtysix
	;;; </summary>
	public class function_sixtysix_Dispatch extends RoutineStub


		public method function_sixtysix_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 D1)
				arg1,				d1
				;;Argument 2 (OPTIONAL IN param2 D3)
				arg2,				d3
				;;Argument 3 (OPTIONAL IN param3 D4.2)
				arg3,				d4.2
				;;Argument 4 (OPTIONAL IN param4 D2.2)
				arg4,				d2.2
				;;Argument 5 (OPTIONAL IN param5 D1)
				arg5,				d1
				;;Argument 6 (OPTIONAL IN param6 D3)
				arg6,				d3
				;;Argument 7 (OPTIONAL IN param7 D4.2)
				arg7,				d4.2
				;;Argument 8 (OPTIONAL IN param8 D2.2)
				arg8,				d2.2
				;;Argument 9 (OPTIONAL IN param9 D1)
				arg9,				d1
				;;Argument 10 (OPTIONAL IN param10 D5)
				arg10,				d5
				;;Argument 11 (OPTIONAL IN param11 D6.1)
				arg11,				d6.1
				;;Argument 12 (OPTIONAL IN param12 D3.3)
				arg12,				d3.3
				;;Argument 13 (OPTIONAL IN param13 D1)
				arg13,				d1
				;;Argument 14 (OPTIONAL IN param14 D9)
				arg14,				d9
				;;Argument 15 (OPTIONAL IN param15 D10)
				arg15,				d10
				;;Argument 16 (OPTIONAL IN param16 D7.1)
				arg16,				d7.1
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 D1)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 D3)
			arg2 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 D4.2)
			arg3 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 D2.2)
			arg4 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 D1)
			arg5 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 D3)
			arg6 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 D4.2)
			arg7 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN param8 D2.2)
			arg8 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 D1)
			arg9 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 D5)
			arg10 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 D6.1)
			arg11 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 D3.3)
			arg12 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (OPTIONAL IN param13 D1)
			arg13 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (OPTIONAL IN param14 D9)
			arg14 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (OPTIONAL IN param15 D10)
			arg15 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[15])

			;;Argument 16 (OPTIONAL IN param16 D7.1)
			arg16 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[16])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtysix(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtyseven
	;;; </summary>
	public class function_sixtyseven_Dispatch extends RoutineStub


		public method function_sixtyseven_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 A1)
				arg1,				a1
				;;Argument 2 (OPTIONAL INOUT param2 A26)
				arg2,				a26
				;;Argument 3 (OPTIONAL INOUT param3 A35)
				arg3,				a35
				;;Argument 4 (OPTIONAL INOUT param4 A21)
				arg4,				a21
				;;Argument 5 (OPTIONAL INOUT param5 D1)
				arg5,				d1
				;;Argument 6 (OPTIONAL INOUT param6 D6)
				arg6,				d6
				;;Argument 7 (OPTIONAL INOUT param7 D7)
				arg7,				d7
				;;Argument 8 (OPTIONAL INOUT param8 D4)
				arg8,				d4
				;;Argument 9 (OPTIONAL INOUT param9 D1)
				arg9,				d1
				;;Argument 10 (OPTIONAL INOUT param10 D9)
				arg10,				d9
				;;Argument 11 (OPTIONAL INOUT param11 D10)
				arg11,				d10
				;;Argument 12 (OPTIONAL INOUT param12 D7)
				arg12,				d7
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 A1)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT param2 A26)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT param3 A35)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL INOUT param4 A21)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL INOUT param5 D1)
			arg5 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL INOUT param6 D6)
			arg6 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL INOUT param7 D7)
			arg7 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL INOUT param8 D4)
			arg8 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL INOUT param9 D1)
			arg9 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL INOUT param10 D9)
			arg10 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL INOUT param11 D10)
			arg11 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL INOUT param12 D7)
			arg12 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[12])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtyseven(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 A1)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT param2 A26)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT param3 A35)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL INOUT param4 A21)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg4))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (OPTIONAL INOUT param5 D1)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg5)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (OPTIONAL INOUT param6 D6)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg6)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 7 (OPTIONAL INOUT param7 D7)

			serializer.MapOpen()
			serializer.Pair("Position", 7)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg7)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (OPTIONAL INOUT param8 D4)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg8)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (OPTIONAL INOUT param9 D1)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg9)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 10 (OPTIONAL INOUT param10 D9)

			serializer.MapOpen()
			serializer.Pair("Position", 10)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg10)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 11 (OPTIONAL INOUT param11 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 11)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg11)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 12 (OPTIONAL INOUT param12 D7)

			serializer.MapOpen()
			serializer.Pair("Position", 12)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg12)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtyeight
	;;; </summary>
	public class function_sixtyeight_Dispatch extends RoutineStub


		public method function_sixtyeight_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 I4)
				arg1,				i4
				;;Argument 2 (OPTIONAL INOUT param2 I1)
				arg2,				i1
				;;Argument 3 (OPTIONAL INOUT param3 I2)
				arg3,				i2
				;;Argument 4 (OPTIONAL INOUT param4 I4)
				arg4,				i4
				;;Argument 5 (OPTIONAL INOUT param5 I4)
				arg5,				i4
				;;Argument 6 (OPTIONAL INOUT param6 I4)
				arg6,				i4
				;;Argument 7 (OPTIONAL INOUT param7 I1)
				arg7,				i1
				;;Argument 8 (OPTIONAL INOUT param8 I2)
				arg8,				i2
				;;Argument 9 (OPTIONAL INOUT param9 I4)
				arg9,				i4
				;;Argument 10 (OPTIONAL INOUT param10 I4)
				arg10,				i4
				;;Argument 11 (OPTIONAL INOUT param11 I1)
				arg11,				i1
				;;Argument 12 (OPTIONAL INOUT param12 I1)
				arg12,				i1
				;;Argument 13 (OPTIONAL INOUT param13 I2)
				arg13,				i2
				;;Argument 14 (OPTIONAL INOUT param14 I4)
				arg14,				i4
				;;Argument 15 (OPTIONAL INOUT param15 I4)
				arg15,				i4
				;;Argument 16 (OPTIONAL INOUT param16 I1)
				arg16,				i1
				;;Argument 17 (OPTIONAL INOUT param17 I1)
				arg17,				i1
				;;Argument 18 (OPTIONAL INOUT param18 I2)
				arg18,				i2
				;;Argument 19 (OPTIONAL INOUT param19 I4)
				arg19,				i4
				;;Argument 20 (OPTIONAL INOUT param20 I4)
				arg20,				i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 I4)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT param2 I1)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT param3 I2)
			arg3 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL INOUT param4 I4)
			arg4 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL INOUT param5 I4)
			arg5 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL INOUT param6 I4)
			arg6 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL INOUT param7 I1)
			arg7 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL INOUT param8 I2)
			arg8 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL INOUT param9 I4)
			arg9 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL INOUT param10 I4)
			arg10 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL INOUT param11 I1)
			arg11 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL INOUT param12 I1)
			arg12 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (OPTIONAL INOUT param13 I2)
			arg13 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (OPTIONAL INOUT param14 I4)
			arg14 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (OPTIONAL INOUT param15 I4)
			arg15 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[15])

			;;Argument 16 (OPTIONAL INOUT param16 I1)
			arg16 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[16])

			;;Argument 17 (OPTIONAL INOUT param17 I1)
			arg17 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[17])

			;;Argument 18 (OPTIONAL INOUT param18 I2)
			arg18 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[18])

			;;Argument 19 (OPTIONAL INOUT param19 I4)
			arg19 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[19])

			;;Argument 20 (OPTIONAL INOUT param20 I4)
			arg20 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[20])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtyeight(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT param2 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT param3 I2)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg3)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL INOUT param4 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg4)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (OPTIONAL INOUT param5 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg5)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (OPTIONAL INOUT param6 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg6)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 7 (OPTIONAL INOUT param7 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 7)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg7)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (OPTIONAL INOUT param8 I2)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg8)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (OPTIONAL INOUT param9 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg9)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 10 (OPTIONAL INOUT param10 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 10)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg10)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 11 (OPTIONAL INOUT param11 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 11)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg11)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 12 (OPTIONAL INOUT param12 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 12)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg12)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 13 (OPTIONAL INOUT param13 I2)

			serializer.MapOpen()
			serializer.Pair("Position", 13)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg13)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 14 (OPTIONAL INOUT param14 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 14)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg14)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 15 (OPTIONAL INOUT param15 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 15)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg15)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 16 (OPTIONAL INOUT param16 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 16)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg16)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 17 (OPTIONAL INOUT param17 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 17)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg17)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 18 (OPTIONAL INOUT param18 I2)

			serializer.MapOpen()
			serializer.Pair("Position", 18)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg18)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 19 (OPTIONAL INOUT param19 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 19)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg19)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 20 (OPTIONAL INOUT param20 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 20)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg20)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_sixtynine
	;;; </summary>
	public class function_sixtynine_Dispatch extends RoutineStub


		public method function_sixtynine_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 D1)
				arg1,				d1
				;;Argument 2 (OPTIONAL IN param2 D3.3)
				arg2,				d3.3
				;;Argument 3 (OPTIONAL IN param3 D2.2)
				arg3,				d2.2
				;;Argument 4 (OPTIONAL IN param4 D3.2)
				arg4,				d3.2
				;;Argument 5 (OPTIONAL IN param5 D3)
				arg5,				d3
				;;Argument 6 (OPTIONAL IN param6 D1)
				arg6,				d1
				;;Argument 7 (OPTIONAL IN param7 D3)
				arg7,				d3
				;;Argument 8 (OPTIONAL IN param8 D2)
				arg8,				d2
				;;Argument 9 (OPTIONAL IN param9 D2.2)
				arg9,				d2.2
				;;Argument 10 (OPTIONAL IN param10 D1)
				arg10,				d1
				;;Argument 11 (OPTIONAL IN param11 D5.3)
				arg11,				d5.3
				;;Argument 12 (OPTIONAL IN param12 D4.3)
				arg12,				d4.3
				;;Argument 13 (OPTIONAL IN param13 D4.2)
				arg13,				d4.2
				;;Argument 14 (OPTIONAL IN param14 D1)
				arg14,				d1
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 D1)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 D3.3)
			arg2 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 D2.2)
			arg3 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 D3.2)
			arg4 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 D3)
			arg5 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 D1)
			arg6 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 D3)
			arg7 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN param8 D2)
			arg8 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 D2.2)
			arg9 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 D1)
			arg10 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 D5.3)
			arg11 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 D4.3)
			arg12 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (OPTIONAL IN param13 D4.2)
			arg13 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (OPTIONAL IN param14 D1)
			arg14 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[14])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_sixtynine(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_seventy
	;;; </summary>
	public class function_seventy_Dispatch extends RoutineStub


		public method function_seventy_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 A1)
				arg1,				a1
				;;Argument 2 (OPTIONAL IN param2 A5)
				arg2,				a5
				;;Argument 3 (OPTIONAL IN param3 A6)
				arg3,				a6
				;;Argument 4 (OPTIONAL IN param4 A2)
				arg4,				a2
				;;Argument 5 (OPTIONAL IN param5 A1)
				arg5,				a1
				;;Argument 6 (OPTIONAL IN param6 A5)
				arg6,				a5
				;;Argument 7 (OPTIONAL IN param7 A12)
				arg7,				a12
				;;Argument 8 (OPTIONAL IN param8 A1)
				arg8,				a1
				;;Argument 9 (OPTIONAL IN param9 A1)
				arg9,				a1
				;;Argument 10 (OPTIONAL IN param10 A6)
				arg10,				a6
				;;Argument 11 (OPTIONAL IN param11 A18)
				arg11,				a18
				;;Argument 12 (OPTIONAL IN param12 A4)
				arg12,				a4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 A1)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 A6)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 A2)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 A1)
			arg5 = dispatcher.GetText((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 A5)
			arg6 = dispatcher.GetText((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 A12)
			arg7 = dispatcher.GetText((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN param8 A1)
			arg8 = dispatcher.GetText((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 A1)
			arg9 = dispatcher.GetText((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 A6)
			arg10 = dispatcher.GetText((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 A18)
			arg11 = dispatcher.GetText((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 A4)
			arg12 = dispatcher.GetText((@JsonObject)arguments.arrayValues[12])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_seventy(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_seventyfour
	;;; </summary>
	public class function_seventyfour_Dispatch extends RoutineStub


		public method function_seventyfour_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 A100)
				arg1,				a100
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 A100)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_seventyfour(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 A100)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_seventyfive
	;;; </summary>
	public class function_seventyfive_Dispatch extends RoutineStub


		public method function_seventyfive_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 I4)
				arg1,				i4
				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 I4)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_seventyfive(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_seventysix
	;;; </summary>
	public class function_seventysix_Dispatch extends RoutineStub


		public method function_seventysix_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 I4 passed by VALUE)
				arg1,				i4
				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 I4 passed by VALUE)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_seventysix(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_eighty
	;;; </summary>
	public class function_eighty_Dispatch extends RoutineStub


		public method function_eighty_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 D12.4)
				arg1,				d12.4
				;;Argument 2 (OPTIONAL IN param2 D8.4)
				arg2,				d8.4
				;;Argument 3 (OPTIONAL IN param3 D4.4)
				arg3,				d4.4
				;;Argument 4 (OPTIONAL IN param4 D2.2)
				arg4,				d2.2
				;;Argument 5 (OPTIONAL IN param5 D12.4)
				arg5,				d12.4
				;;Argument 6 (OPTIONAL IN param6 D8.4)
				arg6,				d8.4
				;;Argument 7 (OPTIONAL IN param7 D4.4)
				arg7,				d4.4
				;;Argument 8 (OPTIONAL IN param8 D2.2)
				arg8,				d2.2
				;;Argument 9 (OPTIONAL IN param9 D12.4)
				arg9,				d12.4
				;;Argument 10 (OPTIONAL IN param10 D8.4)
				arg10,				d8.4
				;;Argument 11 (OPTIONAL IN param11 D4.4)
				arg11,				d4.4
				;;Argument 12 (OPTIONAL IN param12 D2.2)
				arg12,				d2.2
				;;Argument 13 (OPTIONAL IN param13 D12.4)
				arg13,				d12.4
				;;Argument 14 (OPTIONAL IN param14 D8.4)
				arg14,				d8.4
				;;Argument 15 (OPTIONAL IN param15 D4.4)
				arg15,				d4.4
				;;Argument 16 (OPTIONAL IN param16 D2.2)
				arg16,				d2.2
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 D12.4)
			arg1 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 D8.4)
			arg2 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 D4.4)
			arg3 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 D2.2)
			arg4 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 D12.4)
			arg5 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 D8.4)
			arg6 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 D4.4)
			arg7 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN param8 D2.2)
			arg8 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 D12.4)
			arg9 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 D8.4)
			arg10 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 D4.4)
			arg11 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 D2.2)
			arg12 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (OPTIONAL IN param13 D12.4)
			arg13 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (OPTIONAL IN param14 D8.4)
			arg14 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (OPTIONAL IN param15 D4.4)
			arg15 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[15])

			;;Argument 16 (OPTIONAL IN param16 D2.2)
			arg16 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[16])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_eighty(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_eightyfive
	;;; </summary>
	public class function_eightyfive_Dispatch extends RoutineStub


		public method function_eightyfive_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 I4 passed by REFERENCE)
				arg1,				i4
				returnValue,		I4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 I4 passed by REFERENCE)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_eightyfive(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_ninetyone
	;;; </summary>
	public class function_ninetyone_Dispatch extends RoutineStub


		public method function_ninetyone_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN p1 I4 passed by VALUE)
				arg1,				i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN p1 I4 passed by VALUE)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_ninetyone(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_ninetytwo
	;;; </summary>
	public class function_ninetytwo_Dispatch extends RoutineStub


		public method function_ninetytwo_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 I4 passed by REFERENCE)
				arg1,				i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 I4 passed by REFERENCE)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_ninetytwo(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 I4 passed by REFERENCE)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_ninetythree
	;;; </summary>
	public class function_ninetythree_Dispatch extends RoutineStub


		public method function_ninetythree_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT p1 I4 passed by REFERENCE)
				arg1,				i4
				;;Argument 2 (OPTIONAL INOUT p2 D7.2 passed by REFERENCE)
				arg2,				d7.2
				returnValue,		D7.2
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT p1 I4 passed by REFERENCE)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT p2 D7.2 passed by REFERENCE)
			arg2 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_ninetythree(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT p1 I4 passed by REFERENCE)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT p2 D7.2 passed by REFERENCE)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_onehundredandone
	;;; </summary>
	public class function_onehundredandone_Dispatch extends RoutineStub


		public method function_onehundredandone_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 A25)
				arg1,				a25
				;;Argument 2 (OPTIONAL IN p2 A5)
				arg2,				a5
				;;Argument 3 (OPTIONAL IN param3 A6)
				arg3,				a6
				;;Argument 4 (OPTIONAL IN param4 A2)
				arg4,				a2
				;;Argument 5 (OPTIONAL IN param5 A24)
				arg5,				a24
				;;Argument 6 (OPTIONAL IN param6 A5)
				arg6,				a5
				;;Argument 7 (OPTIONAL IN param7 A12)
				arg7,				a12
				;;Argument 8 (OPTIONAL IN x A4)
				arg8,				a4
				;;Argument 9 (OPTIONAL IN param9 A25)
				arg9,				a25
				;;Argument 10 (OPTIONAL IN param10 A6)
				arg10,				a6
				;;Argument 11 (OPTIONAL IN param11 A18)
				arg11,				a18
				;;Argument 12 (OPTIONAL IN param12 A4)
				arg12,				a4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 A25)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 A6)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 A2)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 A24)
			arg5 = dispatcher.GetText((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 A5)
			arg6 = dispatcher.GetText((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 A12)
			arg7 = dispatcher.GetText((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN x A4)
			arg8 = dispatcher.GetText((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 A25)
			arg9 = dispatcher.GetText((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 A6)
			arg10 = dispatcher.GetText((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 A18)
			arg11 = dispatcher.GetText((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 A4)
			arg12 = dispatcher.GetText((@JsonObject)arguments.arrayValues[12])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_onehundredandone(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_onehundredandfour
	;;; </summary>
	public class function_onehundredandfour_Dispatch extends RoutineStub


		public method function_onehundredandfour_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL IN param1 A1)
				arg1,				a1
				;;Argument 2 (OPTIONAL IN param2 A5)
				arg2,				a5
				;;Argument 3 (OPTIONAL IN param3 A6)
				arg3,				a6
				;;Argument 4 (OPTIONAL IN param4 A2)
				arg4,				a2
				;;Argument 5 (OPTIONAL IN param5 A1)
				arg5,				a1
				;;Argument 6 (OPTIONAL IN param6 A5)
				arg6,				a5
				;;Argument 7 (OPTIONAL IN param7 A12)
				arg7,				a12
				;;Argument 8 (OPTIONAL IN param8 A4)
				arg8,				a4
				;;Argument 9 (OPTIONAL IN param9 A1)
				arg9,				a1
				;;Argument 10 (OPTIONAL IN param10 A6)
				arg10,				a6
				;;Argument 11 (OPTIONAL IN param11 A18)
				arg11,				a18
				;;Argument 12 (OPTIONAL IN param12 A4)
				arg12,				a4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL IN param1 A1)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL IN param3 A6)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 A2)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (OPTIONAL IN param5 A1)
			arg5 = dispatcher.GetText((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (OPTIONAL IN param6 A5)
			arg6 = dispatcher.GetText((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (OPTIONAL IN param7 A12)
			arg7 = dispatcher.GetText((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (OPTIONAL IN param8 A4)
			arg8 = dispatcher.GetText((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (OPTIONAL IN param9 A1)
			arg9 = dispatcher.GetText((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (OPTIONAL IN param10 A6)
			arg10 = dispatcher.GetText((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (OPTIONAL IN param11 A18)
			arg11 = dispatcher.GetText((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (OPTIONAL IN param12 A4)
			arg12 = dispatcher.GetText((@JsonObject)arguments.arrayValues[12])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall function_onehundredandfour(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_onehundredandfive
	;;; </summary>
	public class function_onehundredandfive_Dispatch extends RoutineStub


		public method function_onehundredandfive_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL INOUT param2 A30)
				arg2,				a30
				;;Argument 3 (OPTIONAL INOUT param3 A8)
				arg3,				a8
				;;Argument 4 (OPTIONAL IN param4 A1)
				arg4,				a1
				returnValue,		I8
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL INOUT param2 A30)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (OPTIONAL INOUT param3 A8)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (OPTIONAL IN param4 A1)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_onehundredandfive(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL INOUT param2 A30)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL INOUT param3 A8)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.function_onehundredandseven
	;;; </summary>
	public class function_onehundredandseven_Dispatch extends RoutineStub


		public method function_onehundredandseven_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL INOUT param1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL IN param2 A5)
				arg2,				a5
				returnValue,		A9
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (OPTIONAL INOUT param1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (OPTIONAL IN param2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %function_onehundredandseven(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL INOUT param1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.elb_not_found
	;;; </summary>
	public class elb_not_found_Dispatch extends RoutineStub


		public method elb_not_found_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall elb_not_found()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.fatal
	;;; </summary>
	public class fatal_Dispatch extends RoutineStub


		public method fatal_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall isfatal()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.hello
	;;; </summary>
	public class hello_Dispatch extends RoutineStub


		public method hello_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN name A20)
				arg1,				a20
				;;Argument 2 (REQUIRED INOUT message A30)
				arg2,				a30
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN name A20)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED INOUT message A30)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall hello(arg1,arg2)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT message A30)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.methoddiff
	;;; </summary>
	public class methoddiff_Dispatch extends RoutineStub


		public method methoddiff_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %routinediff()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.missingFromElb
	;;; </summary>
	public class missingFromElb_Dispatch extends RoutineStub


		public method missingFromElb_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall missingFromElb()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.msc_arytst_dec
	;;; </summary>
	public class msc_arytst_dec_Dispatch extends RoutineStub


		public method msc_arytst_dec_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 [*]D5)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord

			;;Temp structure tempstr1
			structure tempstr1
				arry, [1]D5
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1 [*]D5)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall msc_arytst_dec(^m(tempstr1.arry,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 [*]D5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of decimal
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.msc_arytst_imp
	;;; </summary>
	public class msc_arytst_imp_Dispatch extends RoutineStub


		public method msc_arytst_imp_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 [*]D10.3)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord

			;;Temp structure tempstr1
			structure tempstr1
				arry, [1]D10.3
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1 [*]D10.3)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall msc_arytst_imp(^m(tempstr1.arry,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 [*]D10.3)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of implied decimal
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.msc_arytst_int
	;;; </summary>
	public class msc_arytst_int_Dispatch extends RoutineStub


		public method msc_arytst_int_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 [*]I4)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord

			;;Temp structure tempstr1
			structure tempstr1
				arry, [1]I4
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1 [*]I4)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall msc_arytst_int(^m(tempstr1.arry,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 [*]I4)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of integer
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.msc_arytst_str
	;;; </summary>
	public class msc_arytst_str_Dispatch extends RoutineStub


		public method msc_arytst_str_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 [*]A20)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord

			;;Temp structure tempstr1
			structure tempstr1
				arry, [1]A20
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1 [*]A20)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall msc_arytst_str(^m(tempstr1.arry,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 [*]A20)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.not_in_elb
	;;; </summary>
	public class not_in_elb_Dispatch extends RoutineStub


		public method not_in_elb_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN parm1 D5)
				arg1,				d5
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN parm1 D5)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall not_in_elb(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.null2122
	;;; </summary>
	public class null2122_Dispatch extends RoutineStub


		public method null2122_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 A5)
				arg1,				a5
				;;Argument 2 (REQUIRED INOUT p2 A5)
				arg2,				a5
				;;Argument 3 (REQUIRED INOUT p3 A5)
				arg3,				a5
				;;Argument 4 (REQUIRED INOUT p4 A5)
				arg4,				a5
				;;Argument 5 (REQUIRED INOUT p5 A5)
				arg5,				a5
				;;Argument 6 (REQUIRED INOUT p6 A5)
				arg6,				a5
				;;Argument 7 (REQUIRED INOUT p7 A5)
				arg7,				a5
				;;Argument 8 (REQUIRED INOUT p8 A5)
				arg8,				a5
				;;Argument 9 (REQUIRED INOUT p9 A5)
				arg9,				a5
				;;Argument 10 (REQUIRED INOUT p10 A5)
				arg10,				a5
				;;Argument 11 (REQUIRED INOUT p11 A5)
				arg11,				a5
				;;Argument 12 (REQUIRED INOUT p12 A5)
				arg12,				a5
				;;Argument 13 (REQUIRED INOUT p13 A5)
				arg13,				a5
				;;Argument 14 (REQUIRED INOUT p14 A5)
				arg14,				a5
				;;Argument 15 (REQUIRED INOUT p15 A5)
				arg15,				a5
				;;Argument 16 (REQUIRED INOUT p16 A5)
				arg16,				a5
				;;Argument 17 (REQUIRED INOUT p17 A5)
				arg17,				a5
				;;Argument 18 (REQUIRED INOUT p18 A5)
				arg18,				a5
				;;Argument 19 (REQUIRED INOUT p19 A5)
				arg19,				a5
				;;Argument 20 (REQUIRED INOUT p20 A5)
				arg20,				a5
				;;Argument 21 (REQUIRED INOUT p21 A5)
				arg21,				a5
				;;Argument 22 (REQUIRED INOUT p22 A5)
				arg22,				a5
				;;Argument 23 (REQUIRED INOUT p23 A5)
				arg23,				a5
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED INOUT p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (REQUIRED INOUT p3 A5)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (REQUIRED INOUT p4 A5)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (REQUIRED INOUT p5 A5)
			arg5 = dispatcher.GetText((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (REQUIRED INOUT p6 A5)
			arg6 = dispatcher.GetText((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (REQUIRED INOUT p7 A5)
			arg7 = dispatcher.GetText((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (REQUIRED INOUT p8 A5)
			arg8 = dispatcher.GetText((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (REQUIRED INOUT p9 A5)
			arg9 = dispatcher.GetText((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (REQUIRED INOUT p10 A5)
			arg10 = dispatcher.GetText((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (REQUIRED INOUT p11 A5)
			arg11 = dispatcher.GetText((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (REQUIRED INOUT p12 A5)
			arg12 = dispatcher.GetText((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (REQUIRED INOUT p13 A5)
			arg13 = dispatcher.GetText((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (REQUIRED INOUT p14 A5)
			arg14 = dispatcher.GetText((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (REQUIRED INOUT p15 A5)
			arg15 = dispatcher.GetText((@JsonObject)arguments.arrayValues[15])

			;;Argument 16 (REQUIRED INOUT p16 A5)
			arg16 = dispatcher.GetText((@JsonObject)arguments.arrayValues[16])

			;;Argument 17 (REQUIRED INOUT p17 A5)
			arg17 = dispatcher.GetText((@JsonObject)arguments.arrayValues[17])

			;;Argument 18 (REQUIRED INOUT p18 A5)
			arg18 = dispatcher.GetText((@JsonObject)arguments.arrayValues[18])

			;;Argument 19 (REQUIRED INOUT p19 A5)
			arg19 = dispatcher.GetText((@JsonObject)arguments.arrayValues[19])

			;;Argument 20 (REQUIRED INOUT p20 A5)
			arg20 = dispatcher.GetText((@JsonObject)arguments.arrayValues[20])

			;;Argument 21 (REQUIRED INOUT p21 A5)
			arg21 = dispatcher.GetText((@JsonObject)arguments.arrayValues[21])

			;;Argument 22 (REQUIRED INOUT p22 A5)
			arg22 = dispatcher.GetText((@JsonObject)arguments.arrayValues[22])

			;;Argument 23 (REQUIRED INOUT p23 A5)
			arg23 = dispatcher.GetText((@JsonObject)arguments.arrayValues[23])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall null2122(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT p2 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT p3 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (REQUIRED INOUT p4 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg4))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (REQUIRED INOUT p5 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg5))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (REQUIRED INOUT p6 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg6))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 7 (REQUIRED INOUT p7 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 7)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg7))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (REQUIRED INOUT p8 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg8))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (REQUIRED INOUT p9 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg9))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 10 (REQUIRED INOUT p10 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 10)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg10))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 11 (REQUIRED INOUT p11 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 11)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg11))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 12 (REQUIRED INOUT p12 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 12)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg12))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 13 (REQUIRED INOUT p13 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 13)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg13))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 14 (REQUIRED INOUT p14 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 14)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg14))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 15 (REQUIRED INOUT p15 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 15)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg15))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 16 (REQUIRED INOUT p16 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 16)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg16))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 17 (REQUIRED INOUT p17 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 17)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg17))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 18 (REQUIRED INOUT p18 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 18)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg18))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 19 (REQUIRED INOUT p19 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 19)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg19))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 20 (REQUIRED INOUT p20 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 20)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg20))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 21 (REQUIRED INOUT p21 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 21)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg21))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 22 (REQUIRED INOUT p22 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 22)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg22))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 23 (REQUIRED INOUT p23 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 23)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg23))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.optional22
	;;; </summary>
	public class optional22_Dispatch extends RoutineStub


		public method optional22_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 A5)
				arg1,				a5
				;;Argument 2 (REQUIRED INOUT p2 A5)
				arg2,				a5
				;;Argument 3 (REQUIRED INOUT p3 A5)
				arg3,				a5
				;;Argument 4 (REQUIRED INOUT p4 A5)
				arg4,				a5
				;;Argument 5 (REQUIRED INOUT p5 A5)
				arg5,				a5
				;;Argument 6 (REQUIRED INOUT p6 A5)
				arg6,				a5
				;;Argument 7 (REQUIRED INOUT p7 A5)
				arg7,				a5
				;;Argument 8 (REQUIRED INOUT p8 A5)
				arg8,				a5
				;;Argument 9 (REQUIRED INOUT p9 A5)
				arg9,				a5
				;;Argument 10 (REQUIRED INOUT p10 A5)
				arg10,				a5
				;;Argument 11 (REQUIRED INOUT p11 A5)
				arg11,				a5
				;;Argument 12 (REQUIRED INOUT p12 A5)
				arg12,				a5
				;;Argument 13 (REQUIRED INOUT p13 A5)
				arg13,				a5
				;;Argument 14 (REQUIRED INOUT p14 A5)
				arg14,				a5
				;;Argument 15 (REQUIRED INOUT p15 A5)
				arg15,				a5
				;;Argument 16 (REQUIRED INOUT p16 A5)
				arg16,				a5
				;;Argument 17 (REQUIRED INOUT p17 A5)
				arg17,				a5
				;;Argument 18 (REQUIRED INOUT p18 A5)
				arg18,				a5
				;;Argument 19 (REQUIRED INOUT p19 A5)
				arg19,				a5
				;;Argument 20 (REQUIRED INOUT p20 A5)
				arg20,				a5
				;;Argument 21 (REQUIRED INOUT p21 A5)
				arg21,				a5
				;;Argument 22 (OPTIONAL INOUT p22 A5)
				arg22,				a5
				;;Argument 23 (REQUIRED INOUT p23 A5)
				arg23,				a5
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED INOUT p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (REQUIRED INOUT p3 A5)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (REQUIRED INOUT p4 A5)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (REQUIRED INOUT p5 A5)
			arg5 = dispatcher.GetText((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (REQUIRED INOUT p6 A5)
			arg6 = dispatcher.GetText((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (REQUIRED INOUT p7 A5)
			arg7 = dispatcher.GetText((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (REQUIRED INOUT p8 A5)
			arg8 = dispatcher.GetText((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (REQUIRED INOUT p9 A5)
			arg9 = dispatcher.GetText((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (REQUIRED INOUT p10 A5)
			arg10 = dispatcher.GetText((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (REQUIRED INOUT p11 A5)
			arg11 = dispatcher.GetText((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (REQUIRED INOUT p12 A5)
			arg12 = dispatcher.GetText((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (REQUIRED INOUT p13 A5)
			arg13 = dispatcher.GetText((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (REQUIRED INOUT p14 A5)
			arg14 = dispatcher.GetText((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (REQUIRED INOUT p15 A5)
			arg15 = dispatcher.GetText((@JsonObject)arguments.arrayValues[15])

			;;Argument 16 (REQUIRED INOUT p16 A5)
			arg16 = dispatcher.GetText((@JsonObject)arguments.arrayValues[16])

			;;Argument 17 (REQUIRED INOUT p17 A5)
			arg17 = dispatcher.GetText((@JsonObject)arguments.arrayValues[17])

			;;Argument 18 (REQUIRED INOUT p18 A5)
			arg18 = dispatcher.GetText((@JsonObject)arguments.arrayValues[18])

			;;Argument 19 (REQUIRED INOUT p19 A5)
			arg19 = dispatcher.GetText((@JsonObject)arguments.arrayValues[19])

			;;Argument 20 (REQUIRED INOUT p20 A5)
			arg20 = dispatcher.GetText((@JsonObject)arguments.arrayValues[20])

			;;Argument 21 (REQUIRED INOUT p21 A5)
			arg21 = dispatcher.GetText((@JsonObject)arguments.arrayValues[21])

			;;Argument 22 (OPTIONAL INOUT p22 A5)
			arg22 = dispatcher.GetText((@JsonObject)arguments.arrayValues[22])

			;;Argument 23 (REQUIRED INOUT p23 A5)
			arg23 = dispatcher.GetText((@JsonObject)arguments.arrayValues[23])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall optional22(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT p2 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT p3 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (REQUIRED INOUT p4 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg4))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (REQUIRED INOUT p5 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg5))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (REQUIRED INOUT p6 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg6))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 7 (REQUIRED INOUT p7 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 7)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg7))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (REQUIRED INOUT p8 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg8))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (REQUIRED INOUT p9 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg9))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 10 (REQUIRED INOUT p10 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 10)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg10))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 11 (REQUIRED INOUT p11 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 11)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg11))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 12 (REQUIRED INOUT p12 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 12)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg12))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 13 (REQUIRED INOUT p13 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 13)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg13))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 14 (REQUIRED INOUT p14 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 14)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg14))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 15 (REQUIRED INOUT p15 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 15)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg15))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 16 (REQUIRED INOUT p16 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 16)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg16))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 17 (REQUIRED INOUT p17 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 17)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg17))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 18 (REQUIRED INOUT p18 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 18)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg18))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 19 (REQUIRED INOUT p19 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 19)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg19))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 20 (REQUIRED INOUT p20 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 20)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg20))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 21 (REQUIRED INOUT p21 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 21)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg21))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 22 (OPTIONAL INOUT p22 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 22)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg22))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 23 (REQUIRED INOUT p23 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 23)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg23))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.outi4
	;;; </summary>
	public class outi4_Dispatch extends RoutineStub


		public method outi4_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL OUT p1 I4)
				arg1,				i4
				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %outi4(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL OUT p1 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.outi8
	;;; </summary>
	public class outi8_Dispatch extends RoutineStub


		public method outi8_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT outi8 I8)
				arg1,				i8
				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %outi8(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT outi8 I8)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.parm40
	;;; </summary>
	public class parm40_Dispatch extends RoutineStub


		public method parm40_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 A5)
				arg1,				a5
				;;Argument 2 (REQUIRED IN p2 A5)
				arg2,				a5
				;;Argument 3 (REQUIRED INOUT p3 A5)
				arg3,				a5
				;;Argument 4 (REQUIRED IN p4 A5)
				arg4,				a5
				;;Argument 5 (REQUIRED INOUT p5 A5)
				arg5,				a5
				;;Argument 6 (REQUIRED IN p6 A5)
				arg6,				a5
				;;Argument 7 (REQUIRED INOUT p7 A5)
				arg7,				a5
				;;Argument 8 (REQUIRED IN p8 A5)
				arg8,				a5
				;;Argument 9 (REQUIRED INOUT p9 A5)
				arg9,				a5
				;;Argument 10 (REQUIRED IN p10 A5)
				arg10,				a5
				;;Argument 11 (REQUIRED INOUT p11 D10)
				arg11,				d10
				;;Argument 12 (REQUIRED IN p12 D10)
				arg12,				d10
				;;Argument 13 (REQUIRED INOUT p13 D10)
				arg13,				d10
				;;Argument 14 (REQUIRED IN p14 D10)
				arg14,				d10
				;;Argument 15 (REQUIRED INOUT p15 D10)
				arg15,				d10
				;;Argument 16 (REQUIRED IN p16 D10)
				arg16,				d10
				;;Argument 17 (REQUIRED INOUT p17 D10)
				arg17,				d10
				;;Argument 18 (REQUIRED IN p18 D10)
				arg18,				d10
				;;Argument 19 (REQUIRED INOUT p19 D10)
				arg19,				d10
				;;Argument 20 (REQUIRED IN p20 D10)
				arg20,				d10
				;;Argument 21 (REQUIRED INOUT p21 D5.2)
				arg21,				d5.2
				;;Argument 22 (REQUIRED IN p22 D5.2)
				arg22,				d5.2
				;;Argument 23 (REQUIRED INOUT p23 D5.2)
				arg23,				d5.2
				;;Argument 24 (REQUIRED IN p24 D5.2)
				arg24,				d5.2
				;;Argument 25 (REQUIRED INOUT p25 D5.2)
				arg25,				d5.2
				;;Argument 26 (REQUIRED IN p26 D5.2)
				arg26,				d5.2
				;;Argument 27 (REQUIRED INOUT p27 D5.2)
				arg27,				d5.2
				;;Argument 28 (REQUIRED IN p28 D5.2)
				arg28,				d5.2
				;;Argument 29 (REQUIRED INOUT p29 D5.2)
				arg29,				d5.2
				;;Argument 30 (REQUIRED IN p30 D5.2)
				arg30,				d5.2
				;;Argument 31 (REQUIRED INOUT p31 I1)
				arg31,				i1
				;;Argument 32 (REQUIRED IN p32 I1)
				arg32,				i1
				;;Argument 33 (REQUIRED INOUT p33 I1)
				arg33,				i1
				;;Argument 34 (REQUIRED IN p34 I2)
				arg34,				i2
				;;Argument 35 (REQUIRED INOUT p35 I2)
				arg35,				i2
				;;Argument 36 (REQUIRED IN p36 I2)
				arg36,				i2
				;;Argument 37 (REQUIRED INOUT p37 I4)
				arg37,				i4
				;;Argument 38 (REQUIRED IN p38 I4)
				arg38,				i4
				;;Argument 39 (REQUIRED INOUT p39 I4)
				arg39,				i4
				;;Argument 40 (REQUIRED IN p40 I4)
				arg40,				i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT p1 A5)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED IN p2 A5)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;Argument 3 (REQUIRED INOUT p3 A5)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 4 (REQUIRED IN p4 A5)
			arg4 = dispatcher.GetText((@JsonObject)arguments.arrayValues[4])

			;;Argument 5 (REQUIRED INOUT p5 A5)
			arg5 = dispatcher.GetText((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (REQUIRED IN p6 A5)
			arg6 = dispatcher.GetText((@JsonObject)arguments.arrayValues[6])

			;;Argument 7 (REQUIRED INOUT p7 A5)
			arg7 = dispatcher.GetText((@JsonObject)arguments.arrayValues[7])

			;;Argument 8 (REQUIRED IN p8 A5)
			arg8 = dispatcher.GetText((@JsonObject)arguments.arrayValues[8])

			;;Argument 9 (REQUIRED INOUT p9 A5)
			arg9 = dispatcher.GetText((@JsonObject)arguments.arrayValues[9])

			;;Argument 10 (REQUIRED IN p10 A5)
			arg10 = dispatcher.GetText((@JsonObject)arguments.arrayValues[10])

			;;Argument 11 (REQUIRED INOUT p11 D10)
			arg11 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[11])

			;;Argument 12 (REQUIRED IN p12 D10)
			arg12 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[12])

			;;Argument 13 (REQUIRED INOUT p13 D10)
			arg13 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[13])

			;;Argument 14 (REQUIRED IN p14 D10)
			arg14 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[14])

			;;Argument 15 (REQUIRED INOUT p15 D10)
			arg15 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[15])

			;;Argument 16 (REQUIRED IN p16 D10)
			arg16 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[16])

			;;Argument 17 (REQUIRED INOUT p17 D10)
			arg17 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[17])

			;;Argument 18 (REQUIRED IN p18 D10)
			arg18 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[18])

			;;Argument 19 (REQUIRED INOUT p19 D10)
			arg19 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[19])

			;;Argument 20 (REQUIRED IN p20 D10)
			arg20 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[20])

			;;Argument 21 (REQUIRED INOUT p21 D5.2)
			arg21 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[21])

			;;Argument 22 (REQUIRED IN p22 D5.2)
			arg22 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[22])

			;;Argument 23 (REQUIRED INOUT p23 D5.2)
			arg23 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[23])

			;;Argument 24 (REQUIRED IN p24 D5.2)
			arg24 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[24])

			;;Argument 25 (REQUIRED INOUT p25 D5.2)
			arg25 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[25])

			;;Argument 26 (REQUIRED IN p26 D5.2)
			arg26 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[26])

			;;Argument 27 (REQUIRED INOUT p27 D5.2)
			arg27 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[27])

			;;Argument 28 (REQUIRED IN p28 D5.2)
			arg28 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[28])

			;;Argument 29 (REQUIRED INOUT p29 D5.2)
			arg29 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[29])

			;;Argument 30 (REQUIRED IN p30 D5.2)
			arg30 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[30])

			;;Argument 31 (REQUIRED INOUT p31 I1)
			arg31 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[31])

			;;Argument 32 (REQUIRED IN p32 I1)
			arg32 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[32])

			;;Argument 33 (REQUIRED INOUT p33 I1)
			arg33 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[33])

			;;Argument 34 (REQUIRED IN p34 I2)
			arg34 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[34])

			;;Argument 35 (REQUIRED INOUT p35 I2)
			arg35 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[35])

			;;Argument 36 (REQUIRED IN p36 I2)
			arg36 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[36])

			;;Argument 37 (REQUIRED INOUT p37 I4)
			arg37 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[37])

			;;Argument 38 (REQUIRED IN p38 I4)
			arg38 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[38])

			;;Argument 39 (REQUIRED INOUT p39 I4)
			arg39 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[39])

			;;Argument 40 (REQUIRED IN p40 I4)
			arg40 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[40])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall parm40(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT p3 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (REQUIRED INOUT p5 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg5))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 7 (REQUIRED INOUT p7 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 7)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg7))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (REQUIRED INOUT p9 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg9))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 11 (REQUIRED INOUT p11 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 11)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg11)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 13 (REQUIRED INOUT p13 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 13)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg13)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 15 (REQUIRED INOUT p15 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 15)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg15)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 17 (REQUIRED INOUT p17 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 17)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg17)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 19 (REQUIRED INOUT p19 D10)

			serializer.MapOpen()
			serializer.Pair("Position", 19)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg19)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 21 (REQUIRED INOUT p21 D5.2)

			serializer.MapOpen()
			serializer.Pair("Position", 21)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg21)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 23 (REQUIRED INOUT p23 D5.2)

			serializer.MapOpen()
			serializer.Pair("Position", 23)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg23)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 25 (REQUIRED INOUT p25 D5.2)

			serializer.MapOpen()
			serializer.Pair("Position", 25)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg25)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 27 (REQUIRED INOUT p27 D5.2)

			serializer.MapOpen()
			serializer.Pair("Position", 27)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg27)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 29 (REQUIRED INOUT p29 D5.2)

			serializer.MapOpen()
			serializer.Pair("Position", 29)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg29)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 31 (REQUIRED INOUT p31 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 31)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg31)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 33 (REQUIRED INOUT p33 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 33)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg33)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 35 (REQUIRED INOUT p35 I2)

			serializer.MapOpen()
			serializer.Pair("Position", 35)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg35)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 37 (REQUIRED INOUT p37 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 37)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg37)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 39 (REQUIRED INOUT p39 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 39)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg39)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.passstring
	;;; </summary>
	public class passstring_Dispatch extends RoutineStub


		public method passstring_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN p1 A65535)
				arg1,				a65535
				;;Argument 2 (REQUIRED OUT p2 A65535)
				arg2,				a65535
				;;Argument 3 (REQUIRED INOUT p3 A65535)
				arg3,				a65535
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN p1 A65535)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 3 (REQUIRED INOUT p3 A65535)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall passstring(arg1,arg2,arg3)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT p2 A65535)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT p3 A65535)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.retAlpha5
	;;; </summary>
	public class retAlpha5_Dispatch extends RoutineStub


		public method retAlpha5_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		A5
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %retAlpha5()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.retDec3
	;;; </summary>
	public class retDec3_Dispatch extends RoutineStub


		public method retDec3_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		D3
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %retDec3()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.retI4
	;;; </summary>
	public class retI4_Dispatch extends RoutineStub


		public method retI4_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		I4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %retI4()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.retIdec31
	;;; </summary>
	public class retIdec31_Dispatch extends RoutineStub


		public method retIdec31_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		D3.1
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %retIdec31()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.retVal
	;;; </summary>
	public class retVal_Dispatch extends RoutineStub


		public method retVal_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %retVal()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.rtnAlpha40k
	;;; </summary>
	public class rtnAlpha40k_Dispatch extends RoutineStub


		public method rtnAlpha40k_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		A40000
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %rtnAlpha40k()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.stoptest
	;;; </summary>
	public class stoptest_Dispatch extends RoutineStub


		public method stoptest_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %stoptest()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.uninitParams
	;;; </summary>
	public class uninitParams_Dispatch extends RoutineStub


		public method uninitParams_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (OPTIONAL OUT p1 A5)
				arg1,				a5
				;;Argument 2 (OPTIONAL OUT p2 D3)
				arg2,				d3
				;;Argument 3 (OPTIONAL OUT p3 D3.1)
				arg3,				d3.1
				;;Argument 4 (OPTIONAL OUT p4 I4)
				arg4,				i4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall uninitParams(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (OPTIONAL OUT p1 A5)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (OPTIONAL OUT p2 D3)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg2)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (OPTIONAL OUT p3 D3.1)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg3)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (OPTIONAL OUT p4 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg4)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.getGreeting
	;;; </summary>
	public class getGreeting_Dispatch extends RoutineStub


		public method getGreeting_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT message A30)
				arg1,				a30
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall getGreeting(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT message A30)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg1))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method syntst.setGreeting
	;;; </summary>
	public class setGreeting_Dispatch extends RoutineStub


		public method setGreeting_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN message A30)
				arg1,				a30
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN message A30)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall setGreeting(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

endnamespace