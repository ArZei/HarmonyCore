;;*****************************************************************************
;;
;; Title:       V93IFMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.V93IF

	structure strFake
		,a1
	endstructure

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.ALReposOpts
	;;; </summary>
	public class ALReposOpts_Dispatch extends RoutineStub

		private mV93reposoptMetadata, @DataObjectMetadataBase

		public method ALReposOpts_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mV93reposoptMetadata = DataObjectMetadataBase.LookupType("V93reposopt")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT V93REPOSOPTS ArrayList collection of structure @V93reposopt returned as DataTable)
				arg1,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall alreposopts(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT V93REPOSOPTS ArrayList collection of structure @V93reposopt returned as DataTable)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisV93reposopt, @strV93reposopt
				foreach thisV93reposopt in arg1
					DataObjectBase.Serialize(serializer, thisV93reposopt, "V93REPOSOPTS", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.ALReposOptsIn
	;;; </summary>
	public class ALReposOptsIn_Dispatch extends RoutineStub

		private mV93reposoptMetadata, @DataObjectMetadataBase

		public method ALReposOptsIn_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mV93reposoptMetadata = DataObjectMetadataBase.LookupType("V93reposopt")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN V93REPOSOPTS ArrayList collection of structure @V93reposopt returned as DataTable)
				arg1Array,			@JsonArray
				arg1,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN V93REPOSOPTS ArrayList collection of structure @V93reposopt returned as DataTable)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall alreposoptsin(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.BinArrayStr
	;;; </summary>
	public class BinArrayStr_Dispatch extends RoutineStub

		private mBinarytestMetadata, @DataObjectMetadataBase

		public method BinArrayStr_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mBinarytestMetadata = DataObjectMetadataBase.LookupType("Binarytest")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT BINARYTEST structure @Binarytest)
				arg1DataObject, @DataObjectBase
				arg1, strBinarytest
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT BINARYTEST structure @Binarytest)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mBinarytestMetadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall BinArrayStr(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT BINARYTEST structure @Binarytest)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Binarytest record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.BinaryHdlIn
	;;; </summary>
	public class BinaryHdlIn_Dispatch extends RoutineStub


		public method BinaryHdlIn_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN CustID I4)
				arg1,				i4
				;;Argument 2 (REQUIRED IN AddressID I4)
				arg2,				i4
				;;Argument 3 (REQUIRED OUT Structure A46)
				arg3,				a46
				;;Argument 4 (REQUIRED IN GRFA D_HANDLE)
				arg4,				d_handle
				returnValue,		I4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN CustID I4)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED IN AddressID I4)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;Argument 4 (REQUIRED IN GRFA D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg4 =

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %BinaryHdlIn(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED OUT Structure A46)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.BinaryHdlInOut
	;;; </summary>
	public class BinaryHdlInOut_Dispatch extends RoutineStub


		public method BinaryHdlInOut_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN CustID I4)
				arg1,				i4
				;;Argument 2 (REQUIRED IN AddressID I4)
				arg2,				i4
				;;Argument 3 (REQUIRED OUT Structure A46)
				arg3,				a46
				;;Argument 4 (REQUIRED INOUT GRFA D_HANDLE)
				arg4,				d_handle
				returnValue,		I4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN CustID I4)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED IN AddressID I4)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;Argument 4 (REQUIRED INOUT GRFA D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg4 =

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %BinaryHdlInOut(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED OUT Structure A46)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (REQUIRED INOUT GRFA D_HANDLE)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.BinaryHandleField)
			serializer.String("PassedValue")
			;TODO: Binary Handle support is incomplete and will FAIL!!!
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.BinaryHdlOut
	;;; </summary>
	public class BinaryHdlOut_Dispatch extends RoutineStub


		public method BinaryHdlOut_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN CustID I4)
				arg1,				i4
				;;Argument 2 (REQUIRED IN AddressID I4)
				arg2,				i4
				;;Argument 3 (REQUIRED OUT Structure A46)
				arg3,				a46
				;;Argument 4 (REQUIRED OUT GRFA D_HANDLE)
				arg4,				d_handle
				returnValue,		I4
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN CustID I4)
			arg1 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED IN AddressID I4)
			arg2 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %BinaryHdlOut(arg1,arg2,arg3,arg4)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED OUT Structure A46)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (REQUIRED OUT GRFA D_HANDLE)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.BinaryHandleField)
			serializer.String("PassedValue")
			;TODO: Binary Handle support is incomplete and will FAIL!!!
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.DoFuentes
	;;; </summary>
	public class DoFuentes_Dispatch extends RoutineStub

		private mFuenteMetadata, @DataObjectMetadataBase

		public method DoFuentes_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mFuenteMetadata = DataObjectMetadataBase.LookupType("Fuente")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT FUENTES structure @Fuente)
				arg1DataObject, @DataObjectBase
				arg1, strFuente
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT FUENTES structure @Fuente)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mFuenteMetadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall DeFuentes(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT FUENTES structure @Fuente)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Fuente record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.DoFuentesALin
	;;; </summary>
	public class DoFuentesALin_Dispatch extends RoutineStub

		private mFuenteMetadata, @DataObjectMetadataBase

		public method DoFuentesALin_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mFuenteMetadata = DataObjectMetadataBase.LookupType("Fuente")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN FUENTES ArrayList collection of structure @Fuente)
				arg1Array,			@JsonArray
				arg1,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN FUENTES ArrayList collection of structure @Fuente)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall DoFuentesALin(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.DoFuentesALout
	;;; </summary>
	public class DoFuentesALout_Dispatch extends RoutineStub

		private mFuenteMetadata, @DataObjectMetadataBase

		public method DoFuentesALout_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mFuenteMetadata = DataObjectMetadataBase.LookupType("Fuente")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT FUENTES ArrayList collection of structure @Fuente)
				arg1,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall DoFuentesALout(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT FUENTES ArrayList collection of structure @Fuente)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisFuente, @strFuente
				foreach thisFuente in arg1
					DataObjectBase.Serialize(serializer, thisFuente, "FUENTES", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.EnumTest1
	;;; </summary>
	public class EnumTest1_Dispatch extends RoutineStub


		public method EnumTest1_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT AColor enum COLOR)
				arg1,				color
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT AColor enum COLOR)
			arg1 = (COLOR)dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall EnumTest1S(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT AColor enum COLOR)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for enum fields beyond the integer value?
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg1)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.EnumTest2
	;;; </summary>
	public class EnumTest2_Dispatch extends RoutineStub


		public method EnumTest2_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				returnValue,		COLOR
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %EnumTest2()

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.EnumTest3
	;;; </summary>
	public class EnumTest3_Dispatch extends RoutineStub


		public method EnumTest3_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN aColor enum COLOR)
				arg1,				color
				;;Argument 2 (REQUIRED INOUT Alpha1 A10)
				arg2,				a10
				;;Argument 3 (REQUIRED OUT bColor enum COLOR)
				arg3,				color
				returnValue,		COLOR
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN aColor enum COLOR)
			arg1 = (COLOR)dispatcher.GetInt((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED INOUT Alpha1 A10)
			arg2 = dispatcher.GetText((@JsonObject)arguments.arrayValues[2])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %EnumTest3(arg1,arg2,arg3)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED INOUT Alpha1 A10)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED OUT bColor enum COLOR)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for enum fields beyond the integer value?
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg3)
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.EnumTest4
	;;; </summary>
	public class EnumTest4_Dispatch extends RoutineStub

		private mEnumstructureMetadata, @DataObjectMetadataBase

		public method EnumTest4_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mEnumstructureMetadata = DataObjectMetadataBase.LookupType("Enumstructure")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT ENUMSTRUCTURE structure @Enumstructure)
				arg1DataObject, @DataObjectBase
				arg1, strEnumstructure
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT ENUMSTRUCTURE structure @Enumstructure)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mEnumstructureMetadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall EnumTest4(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT ENUMSTRUCTURE structure @Enumstructure)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Enumstructure record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.EnumTest5
	;;; </summary>
	public class EnumTest5_Dispatch extends RoutineStub

		private mEnumstructureMetadata, @DataObjectMetadataBase

		public method EnumTest5_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mEnumstructureMetadata = DataObjectMetadataBase.LookupType("Enumstructure")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT ENUMSTRUCTURE [*]structure @Enumstructure)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT ENUMSTRUCTURE [*]structure @Enumstructure)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall EnumTest5(^m(strEnumstructure,arg1Handle))

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT ENUMSTRUCTURE [*]structure @Enumstructure)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.EnumTest6
	;;; </summary>
	public class EnumTest6_Dispatch extends RoutineStub

		private mEnumstructureMetadata, @DataObjectMetadataBase

		public method EnumTest6_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mEnumstructureMetadata = DataObjectMetadataBase.LookupType("Enumstructure")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN ENUMSTRUCTURE ArrayList collection of structure @Enumstructure)
				arg1Array,			@JsonArray
				arg1,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN ENUMSTRUCTURE ArrayList collection of structure @Enumstructure)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = new ArrayList()
			dispatcher.UnwrapObjectCollection(argumentDefinition,arg1Array,arg1)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall EnumTest6(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.EnumTest7
	;;; </summary>
	public class EnumTest7_Dispatch extends RoutineStub

		private mEnumstructureMetadata, @DataObjectMetadataBase

		public method EnumTest7_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mEnumstructureMetadata = DataObjectMetadataBase.LookupType("Enumstructure")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT ENUMSTRUCTURE ArrayList collection of structure @Enumstructure)
				arg1,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall EnumTest7(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT ENUMSTRUCTURE ArrayList collection of structure @Enumstructure)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisEnumstructure, @strEnumstructure
				foreach thisEnumstructure in arg1
					DataObjectBase.Serialize(serializer, thisEnumstructure, "ENUMSTRUCTURE", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.LargeDTOut
	;;; </summary>
	public class LargeDTOut_Dispatch extends RoutineStub

		private mTimekeyMetadata, @DataObjectMetadataBase

		public method LargeDTOut_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mTimekeyMetadata = DataObjectMetadataBase.LookupType("Timekey")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT TIMEKEY ArrayList collection of structure @Timekey returned as DataTable)
				arg1,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall LargeDTOut(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT TIMEKEY ArrayList collection of structure @Timekey returned as DataTable)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisTimekey, @strTimekey
				foreach thisTimekey in arg1
					DataObjectBase.Serialize(serializer, thisTimekey, "TIMEKEY", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.ReposOptionsV93
	;;; </summary>
	public class ReposOptionsV93_Dispatch extends RoutineStub

		private mV93reposoptMetadata, @DataObjectMetadataBase

		public method ReposOptionsV93_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mV93reposoptMetadata = DataObjectMetadataBase.LookupType("V93reposopt")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT V93REPOSOPTS structure @V93reposopt)
				arg1DataObject, @DataObjectBase
				arg1, strV93reposopt
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT V93REPOSOPTS structure @V93reposopt)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mV93reposoptMetadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall reposoptsv93(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT V93REPOSOPTS structure @V93reposopt)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single V93reposopt record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method V93IF.StrOptTest1
	;;; </summary>
	public class StrOptTest1_Dispatch extends RoutineStub

		private mStroptsoutterMetadata, @DataObjectMetadataBase

		public method StrOptTest1_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mStroptsoutterMetadata = DataObjectMetadataBase.LookupType("Stroptsoutter")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT STROPTSOUTTER structure @Stroptsoutter)
				arg1DataObject, @DataObjectBase
				arg1, strStroptsoutter
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED INOUT STROPTSOUTTER structure @Stroptsoutter)
			;;Structure argument. Get the data object then get the record from it
			arg1DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mStroptsoutterMetadata)
			arg1 = arg1DataObject.SynergyRecord

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall StrOptTst1(arg1)

			;;------------------------------------------------------------
			;;Build the JSON response
			serializer.MapOpen()
			serializer.Pair("jsonrpc", "2.0")

			if(callFrame.TryGetProperty("id", requestId)) then
				serializer.Pair("id", requestId)
			else
				serializer.PairNull("id")

			serializer.String("result")
			serializer.ArrayOpen()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT STROPTSOUTTER structure @Stroptsoutter)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 1: Single Stroptsoutter record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;Terminate the "ReturnParameters" array
			serializer.ArrayClose()

            ;;Terminate the "Result" object
			serializer.MapClose()
            
            ;;Terminate the response object
			begin
				;;Structured this way to assist with debugging
				data protocolMessage, string
				serializer.MapClose(protocolMessage)
				nop
			end

		endmethod

	endclass

endnamespace