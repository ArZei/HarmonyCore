;;*****************************************************************************
;;
;; Title:       data64kMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.data64k


	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.P1StrAryO64k
	;;; </summary>
	public class P1StrAryO64k_Dispatch extends RoutineStub

		private mDatasetMetadata, @DataObjectMetadataBase

		public method P1StrAryO64k_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mDatasetMetadata = DataObjectMetadataBase.LookupType("Dataset")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT DATASET [*]structure @Dataset)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
			endrecord

			;;Temp structure tempstr1
			structure tempstr1
				arry, @Dataset
			endstructure


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED INOUT DATASET [*]structure @Dataset)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall P1StrAryO64k(^m(strDataset,arg1Handle))

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT DATASET [*]structure @Dataset)
			
			serializer.ArgumentHandleData(1, arg1Handle, FieldDataType.DataObjectCollectionField, 1493, "DATASET", arg1Array.arrayValues.Count, false)
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.BinaryArrayTest
	;;; </summary>
	public class BinaryArrayTest_Dispatch extends RoutineStub


		public method BinaryArrayTest_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT decparm1 D5)
				arg1,				d5
				;;Argument 2 (REQUIRED IN inba D_HANDLE)
				arg2,				d_handle
				;;Argument 3 (REQUIRED INOUT alparm A10)
				arg3,				a10
				;;Argument 4 (REQUIRED OUT outba D_HANDLE)
				arg4,				d_handle
				;;Argument 5 (REQUIRED INOUT idparm D5.2)
				arg5,				d5.2
				;;Argument 6 (REQUIRED INOUT inoutba D_HANDLE)
				arg6,				d_handle
				;;Argument 7 (REQUIRED INOUT decparm2 D5)
				arg7,				d5
				returnValue,		I4
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED INOUT decparm1 D5)
			arg1 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[1])

			;;Argument 2 (REQUIRED IN inba D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg2 =

			;;Argument 3 (REQUIRED INOUT alparm A10)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 5 (REQUIRED INOUT idparm D5.2)
			arg5 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[5])

			;;Argument 6 (REQUIRED INOUT inoutba D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg6 =

			;;Argument 7 (REQUIRED INOUT decparm2 D5)
			arg7 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[7])

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %BinaryArrayTest(arg1,arg2,arg3,arg4,arg5,arg6,arg7)

			;;Function return value
			serializer.ArgumentData(0, returnValue)

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT decparm1 D5)
			
			serializer.ArgumentData(1, arg1, FieldDataType.DecimalField, 5, 0, false)
			
			

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT alparm A10)
			
			serializer.ArgumentData(3, %atrim(arg3), FieldDataType.AlphaField)

			;;--------------------------------------------------------------------------------
			;;Argument 4 (REQUIRED OUT outba D_HANDLE)
			
			serializer.ArgumentData(4, arg4, FieldDataType.BinaryHandleField, 0, 0, false)
			
			

			;;--------------------------------------------------------------------------------
			;;Argument 5 (REQUIRED INOUT idparm D5.2)
			
			serializer.ArgumentData(5, arg5, FieldDataType.ImpliedDecimalField, 5, 02, false)
			
			

			;;--------------------------------------------------------------------------------
			;;Argument 6 (REQUIRED INOUT inoutba D_HANDLE)
			
			serializer.ArgumentData(6, arg6, FieldDataType.BinaryHandleField, 0, 0, false)
			
			

			;;--------------------------------------------------------------------------------
			;;Argument 7 (REQUIRED INOUT decparm2 D5)
			
			serializer.ArgumentData(7, arg7, FieldDataType.DecimalField, 5, 0, false)
			
			
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.inBinaryArrayTest
	;;; </summary>
	public class inBinaryArrayTest_Dispatch extends RoutineStub


		public method inBinaryArrayTest_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN inBA D_HANDLE)
				arg1,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED IN inBA D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg1 =

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall inBinaryArrayTest(arg1)
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.inHandle
	;;; </summary>
	public class inHandle_Dispatch extends RoutineStub


		public method inHandle_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN p1 D_HANDLE)
				arg1,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED IN p1 D_HANDLE)
			;TODO: Template needs code for HANDLE arguments!
			arg1 = 

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall inHandle(arg1)
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.inOutBinaryArrayTest
	;;; </summary>
	public class inOutBinaryArrayTest_Dispatch extends RoutineStub


		public method inOutBinaryArrayTest_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT inoutba D_HANDLE)
				arg1,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED INOUT inoutba D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg1 =

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall inOutBinaryArrayTest(arg1)

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT inoutba D_HANDLE)
			
			serializer.ArgumentData(1, arg1, FieldDataType.BinaryHandleField, 0, 0, false)
			
			
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.inoutHandle
	;;; </summary>
	public class inoutHandle_Dispatch extends RoutineStub


		public method inoutHandle_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 D_HANDLE)
				arg1,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED INOUT p1 D_HANDLE)
			;TODO: Template needs code for HANDLE arguments!
			arg1 = 

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall inoutHandle(arg1)

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 D_HANDLE)
			
			serializer.ArgumentData(1, arg1, FieldDataType.HandleField, 0, 0, false)
			
			
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.inoutHandle2
	;;; </summary>
	public class inoutHandle2_Dispatch extends RoutineStub


		public method inoutHandle2_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT p1 D_HANDLE)
				arg1,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED INOUT p1 D_HANDLE)
			;TODO: Template needs code for HANDLE arguments!
			arg1 = 

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall inoutHandle2(arg1)

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT p1 D_HANDLE)
			
			serializer.ArgumentData(1, arg1, FieldDataType.HandleField, 0, 0, false)
			
			
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.outBinaryArrayTest
	;;; </summary>
	public class outBinaryArrayTest_Dispatch extends RoutineStub


		public method outBinaryArrayTest_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT outba D_HANDLE)
				arg1,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall outBinaryArrayTest(arg1)

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT outba D_HANDLE)
			
			serializer.ArgumentData(1, arg1, FieldDataType.BinaryHandleField, 0, 0, false)
			
			
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.outFileBinaryArrayTest
	;;; </summary>
	public class outFileBinaryArrayTest_Dispatch extends RoutineStub


		public method outFileBinaryArrayTest_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN filename A80)
				arg1,				a80
				;;Argument 2 (REQUIRED OUT outba D_HANDLE)
				arg2,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED IN filename A80)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall outFileBinaryArrayTest(arg1,arg2)

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT outba D_HANDLE)
			
			serializer.ArgumentData(2, arg2, FieldDataType.BinaryHandleField, 0, 0, false)
			
			
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.outHandle
	;;; </summary>
	public class outHandle_Dispatch extends RoutineStub


		public method outHandle_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT p1 D_HANDLE)
				arg1,				d_handle
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall outHandle(arg1)

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT p1 D_HANDLE)
			
			serializer.ArgumentData(1, arg1, FieldDataType.HandleField, 0, 0, false)
			
			
		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method data64k.twoparmsrtn
	;;; </summary>
	public class twoparmsrtn_Dispatch extends RoutineStub


		public method twoparmsrtn_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED INOUT P1Handle D_HANDLE)
				arg1,				d_handle
				;;Argument 2 (REQUIRED OUT P2Alpha A20)
				arg2,				a20
			endrecord


		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("params")

			;;Argument 1 (REQUIRED INOUT P1Handle D_HANDLE)
			;TODO: Template needs code for HANDLE arguments!
			arg1 = 

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall twoparmsrtn(arg1,arg2)

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED INOUT P1Handle D_HANDLE)
			
			serializer.ArgumentData(1, arg1, FieldDataType.HandleField, 0, 0, false)
			
			

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT P2Alpha A20)
			
			serializer.ArgumentData(2, %atrim(arg2), FieldDataType.AlphaField)
		endmethod

	endclass

endnamespace