;;*****************************************************************************
;;
;; Title:       SampleXfplEnvMethodDispachers.dbl
;;
;; Description: Dispatcher classes for exposed methods
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Json
import Harmony.TraditionalBridge
import System.Collections
import TraditionalBridge.Test.Models

namespace TraditionalBridge.Test.SampleXfplEnv

	structure strFake
		,a1
	endstructure

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.GetAllCustomers
	;;; </summary>
	public class GetAllCustomers_Dispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method GetAllCustomers_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT Customers ArrayList collection of structure @Customer)
				arg1,				@ArrayList
				;;Argument 2 (REQUIRED OUT ErrorMessage A80)
				arg2,				a80
				returnValue,		METHOD_STATUS
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %get_all_customers(arg1,arg2)
			
			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT Customers ArrayList collection of structure @Customer)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisCustomer, @strCustomer
				foreach thisCustomer in arg1
					DataObjectBase.Serialize(serializer, thisCustomer, "CUSTOMERS", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT ErrorMessage A80)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.GetCustomerArray
	;;; </summary>
	public class GetCustomerArray_Dispatch extends RoutineStub


		public method GetCustomerArray_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT Customers [*]A162)
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
				;;Argument 2 (REQUIRED OUT ErrorMessage A80)
				arg2,				a80
				returnValue,		METHOD_STATUS
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %get_customers_array(^m(strFake(1:162),arg1Handle),arg2)

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT Customers [*]A162)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT ErrorMessage A80)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()


		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.GetAllItems
	;;; </summary>
	public class GetAllItems_Dispatch extends RoutineStub

		private mItemMetadata, @DataObjectMetadataBase

		public method GetAllItems_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mItemMetadata = DataObjectMetadataBase.LookupType("Item")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT Items ArrayList collection of structure @Item)
				arg1,				@ArrayList
				;;Argument 2 (REQUIRED OUT ErrorMessage A80)
				arg2,				a80
				returnValue,		METHOD_STATUS
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %get_all_items(arg1,arg2)

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT Items ArrayList collection of structure @Item)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisItem, @strItem
				foreach thisItem in arg1
					DataObjectBase.Serialize(serializer, thisItem, "ITEMS", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT ErrorMessage A80)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.GetAllOrders
	;;; </summary>
	public class GetAllOrders_Dispatch extends RoutineStub

		private mOrderMetadata, @DataObjectMetadataBase

		public method GetAllOrders_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mOrderMetadata = DataObjectMetadataBase.LookupType("Order")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT Orders ArrayList collection of structure @Order)
				arg1,				@ArrayList
				;;Argument 2 (REQUIRED OUT ErrorMessage A80)
				arg2,				a80
				returnValue,		METHOD_STATUS
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %get_all_orders(arg1,arg2)

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT Orders ArrayList collection of structure @Order)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisOrder, @strOrder
				foreach thisOrder in arg1
					DataObjectBase.Serialize(serializer, thisOrder, "ORDERS", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT ErrorMessage A80)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.GetAllVendors
	;;; </summary>
	public class GetAllVendors_Dispatch extends RoutineStub

		private mVendorMetadata, @DataObjectMetadataBase

		public method GetAllVendors_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mVendorMetadata = DataObjectMetadataBase.LookupType("Vendor")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED OUT Vendors ArrayList collection of structure @Vendor)
				arg1,				@ArrayList
				;;Argument 2 (REQUIRED OUT ErrorMessage A80)
				arg2,				a80
				returnValue,		METHOD_STATUS
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			;;There are no inbound arguments to process

			;;------------------------------------------------------------
			;; Call the underlying routine

			returnValue = %get_all_vendors(arg1,arg2)

			;;Function return value

			serializer.MapOpen()
			serializer.String("Position")
            serializer.Integer(0)
			serializer.String("Value")
			serializer.MapOpen()
			;TODO: Needs to handle all the valid function return types
			serializer.String("DataType")
			serializer.Integer(FieldDataType.EnumField)
            serializer.String("PassedValue")
			serializer.Integer(returnValue)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 1 (REQUIRED OUT Vendors ArrayList collection of structure @Vendor)

			serializer.MapOpen()
			serializer.Pair("Position", 1)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisVendor, @strVendor
				foreach thisVendor in arg1
					DataObjectBase.Serialize(serializer, thisVendor, "VENDORS", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT ErrorMessage A80)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.SimpleParameters
	;;; </summary>
	public class SimpleParameters_Dispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method SimpleParameters_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN p1 A1)
				arg1,				a1
				;;Argument 2 (REQUIRED OUT p2 A1)
				arg2,				a1
				;;Argument 3 (REQUIRED INOUT p3 A1)
				arg3,				a1
				;;Argument 4 (REQUIRED IN p4 D6)
				arg4,				d6
				;;Argument 5 (REQUIRED OUT p5 D6)
				arg5,				d6
				;;Argument 6 (REQUIRED INOUT p6 D6)
				arg6,				d6
				;;Argument 7 (REQUIRED IN p7 D12)
				arg7,				d12
				;;Argument 8 (REQUIRED OUT p8 D12)
				arg8,				d12
				;;Argument 9 (REQUIRED INOUT p9 D12)
				arg9,				d12
				;;Argument 10 (REQUIRED IN p10 D6.2)
				arg10,				d6.2
				;;Argument 11 (REQUIRED OUT p11 D6.2)
				arg11,				d6.2
				;;Argument 12 (REQUIRED INOUT p12 D6.2)
				arg12,				d6.2
				;;Argument 13 (REQUIRED IN p13 I1)
				arg13,				i1
				;;Argument 14 (REQUIRED OUT p14 I1)
				arg14,				i1
				;;Argument 15 (REQUIRED INOUT p15 I1)
				arg15,				i1
				;;Argument 16 (REQUIRED IN p16 I2)
				arg16,				i2
				;;Argument 17 (REQUIRED OUT p17 I2)
				arg17,				i2
				;;Argument 18 (REQUIRED INOUT p18 I2)
				arg18,				i2
				;;Argument 19 (REQUIRED IN p19 I4)
				arg19,				i4
				;;Argument 20 (REQUIRED OUT p20 I4)
				arg20,				i4
				;;Argument 21 (REQUIRED INOUT p21 I4)
				arg21,				i4
				;;Argument 22 (REQUIRED IN p22 I8)
				arg22,				i8
				;;Argument 23 (REQUIRED OUT p23 I8)
				arg23,				i8
				;;Argument 24 (REQUIRED INOUT p24 I8)
				arg24,				i8
				;;Argument 25 (REQUIRED IN p25 structure @Customer)
				arg25DataObject, @DataObjectBase
				arg25, strCustomer
				;;Argument 26 (REQUIRED OUT p26 structure @Customer)
				arg26DataObject, @DataObjectBase
				arg26, strCustomer
				;;Argument 27 (REQUIRED INOUT p27 structure @Customer)
				arg27DataObject, @DataObjectBase
				arg27, strCustomer
				;;Argument 28 (REQUIRED IN p28 D8 YYYYMMDD date)
				arg28,				d8
				;;Argument 29 (REQUIRED OUT p29 D8 YYYYMMDD date)
				arg29,				d8
				;;Argument 30 (REQUIRED INOUT p30 D8 YYYYMMDD date)
				arg30,				d8
				;;Argument 31 (REQUIRED IN p31 D6 YYMMDD date)
				arg31,				d6
				;;Argument 32 (REQUIRED OUT p32 D6 YYMMDD date)
				arg32,				d6
				;;Argument 33 (REQUIRED INOUT p33 D6 YYMMDD date)
				arg33,				d6
				;;Argument 34 (REQUIRED IN p34 D7 YYYYJJJ date)
				arg34,				d7
				;;Argument 35 (REQUIRED OUT p35 D7 YYYYJJJ date)
				arg35,				d7
				;;Argument 36 (REQUIRED INOUT p36 D7 YYYYJJJ date)
				arg36,				d7
				;;Argument 37 (REQUIRED IN p37 D5 YYJJJ date)
				arg37,				d5
				;;Argument 38 (REQUIRED OUT p38 D5 YYJJJ date)
				arg38,				d5
				;;Argument 39 (REQUIRED INOUT p39 D5 YYJJJ date)
				arg39,				d5
				;;Argument 40 (REQUIRED IN p40 D6 HHMM time)
				arg40,				d6
				;;Argument 41 (REQUIRED OUT p41 D6 HHMM time)
				arg41,				d6
				;;Argument 42 (REQUIRED INOUT p42 D6 HHMM time)
				arg42,				d6
				;;Argument 43 (REQUIRED IN p43 D4 HHMM time)
				arg43,				d4
				;;Argument 44 (REQUIRED OUT p44 D4 HHMM time)
				arg44,				d4
				;;Argument 45 (REQUIRED INOUT p45 D4 HHMM time)
				arg45,				d4
				;;Argument 46 (REQUIRED IN p46 D14 YYYYMMDD date)
				arg46,				d14
				;;Argument 47 (REQUIRED OUT p47 D14 HHMM time)
				arg47,				d14
				;;Argument 48 (REQUIRED INOUT p48 D14 HHMM time)
				arg48,				d14
				;;Argument 49 (REQUIRED IN p49 D20 YYYYMMDD date)
				arg49,				d20
				;;Argument 50 (REQUIRED OUT p50 D20 YYYYMMDD date)
				arg50,				d20
				;;Argument 51 (REQUIRED INOUT p51 D20 YYYYMMDD date)
				arg51,				d20
				;;Argument 52 (REQUIRED IN p52 enum METHOD_STATUS)
				arg52,				method_status
				;;Argument 53 (REQUIRED OUT p53 enum METHOD_STATUS)
				arg53,				method_status
				;;Argument 54 (REQUIRED INOUT p54 enum METHOD_STATUS)
				arg54,				method_status
				;;Argument 55 (REQUIRED IN p55 D_HANDLE)
				arg55,				d_handle
				;;Argument 56 (REQUIRED OUT p56 D_HANDLE)
				arg56,				d_handle
				;;Argument 57 (REQUIRED INOUT p57 D_HANDLE)
				arg57,				d_handle
				;;Argument 58 (REQUIRED IN p58 D_HANDLE)
				arg58,				d_handle
				;;Argument 59 (REQUIRED OUT p59 D_HANDLE)
				arg59,				d_handle
				;;Argument 60 (REQUIRED INOUT p60 D_HANDLE)
				arg60,				d_handle
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN p1 A1)
			arg1 = dispatcher.GetText((@JsonObject)arguments.arrayValues[1])

			;;Argument 1 (REQUIRED INOUT p3 A1)
			arg3 = dispatcher.GetText((@JsonObject)arguments.arrayValues[3])

			;;Argument 1 (REQUIRED IN p4 D6)
			arg4 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[4])

			;;Argument 1 (REQUIRED INOUT p6 D6)
			arg6 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[6])

			;;Argument 1 (REQUIRED IN p7 D12)
			arg7 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[7])

			;;Argument 1 (REQUIRED INOUT p9 D12)
			arg9 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[9])

			;;Argument 1 (REQUIRED IN p10 D6.2)
			arg10 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[10])

			;;Argument 1 (REQUIRED INOUT p12 D6.2)
			arg12 = dispatcher.GetImplied((@JsonObject)arguments.arrayValues[12])

			;;Argument 1 (REQUIRED IN p13 I1)
			arg13 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[13])

			;;Argument 1 (REQUIRED INOUT p15 I1)
			arg15 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[15])

			;;Argument 1 (REQUIRED IN p16 I2)
			arg16 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[16])

			;;Argument 1 (REQUIRED INOUT p18 I2)
			arg18 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[18])

			;;Argument 1 (REQUIRED IN p19 I4)
			arg19 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[19])

			;;Argument 1 (REQUIRED INOUT p21 I4)
			arg21 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[21])

			;;Argument 1 (REQUIRED IN p22 I8)
			arg22 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[22])

			;;Argument 1 (REQUIRED INOUT p24 I8)
			arg24 = dispatcher.GetInt((@JsonObject)arguments.arrayValues[24])

			;;Argument 1 (REQUIRED IN p25 structure @Customer)
			;;Structure argument. Get the data object then get the record from it
			arg25DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			arg25 = arg25DataObject.SynergyRecord

			;;Argument 1 (REQUIRED INOUT p27 structure @Customer)
			;;Structure argument. Get the data object then get the record from it
			arg27DataObject = dispatcher.DeserializeObject((@JsonObject)arguments.arrayValues[3],mCustomerMetadata)
			arg27 = arg27DataObject.SynergyRecord

			;;Argument 1 (REQUIRED IN p28 D8 YYYYMMDD date)
			arg28 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[28])

			;;Argument 1 (REQUIRED INOUT p30 D8 YYYYMMDD date)
			arg30 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[30])

			;;Argument 1 (REQUIRED IN p31 D6 YYMMDD date)
			arg31 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[31])

			;;Argument 1 (REQUIRED INOUT p33 D6 YYMMDD date)
			arg33 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[33])

			;;Argument 1 (REQUIRED IN p34 D7 YYYYJJJ date)
			arg34 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[34])

			;;Argument 1 (REQUIRED INOUT p36 D7 YYYYJJJ date)
			arg36 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[36])

			;;Argument 1 (REQUIRED IN p37 D5 YYJJJ date)
			arg37 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[37])

			;;Argument 1 (REQUIRED INOUT p39 D5 YYJJJ date)
			arg39 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[39])

			;;Argument 1 (REQUIRED IN p40 D6 HHMM time)
			arg40 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[40])

			;;Argument 1 (REQUIRED INOUT p42 D6 HHMM time)
			arg42 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[42])

			;;Argument 1 (REQUIRED IN p43 D4 HHMM time)
			arg43 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[43])

			;;Argument 1 (REQUIRED INOUT p45 D4 HHMM time)
			arg45 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[45])

			;;Argument 1 (REQUIRED IN p46 D14 YYYYMMDD date)
			arg46 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[46])

			;;Argument 1 (REQUIRED INOUT p48 D14 HHMM time)
			arg48 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[48])

			;;Argument 1 (REQUIRED IN p49 D20 YYYYMMDD date)
			arg49 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[49])

			;;Argument 1 (REQUIRED INOUT p51 D20 YYYYMMDD date)
			arg51 = dispatcher.GetDecimal((@JsonObject)arguments.arrayValues[51])

			;;Argument 1 (REQUIRED IN p52 enum METHOD_STATUS)
			arg52 = (METHOD_STATUS)dispatcher.GetInt((@JsonObject)arguments.arrayValues[52])

			;;Argument 1 (REQUIRED INOUT p54 enum METHOD_STATUS)
			arg54 = (METHOD_STATUS)dispatcher.GetInt((@JsonObject)arguments.arrayValues[54])

			;;Argument 1 (REQUIRED IN p55 D_HANDLE)
			;TODO: Template needs code for HANDLE arguments!
			arg55 = 

			;;Argument 1 (REQUIRED INOUT p57 D_HANDLE)
			;TODO: Template needs code for HANDLE arguments!
			arg57 = 

			;;Argument 1 (REQUIRED IN p58 D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg58 =

			;;Argument 1 (REQUIRED INOUT p60 D_HANDLE)
			;TODO: Template needs code for BINARY HANDLE arguments!
			arg60 =

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall simple_parameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34,arg35,arg36,arg37,arg38,arg39,arg40,arg41,arg42,arg43,arg44,arg45,arg46,arg47,arg48,arg49,arg50,arg51,arg52,arg53,arg54,arg55,arg56,arg57,arg58,arg59,arg60)

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT p2 A1)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg2))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT p3 A1)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaField)
			serializer.Pair("PassedValue", %atrim(arg3))
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (REQUIRED OUT p5 D6)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg5)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (REQUIRED INOUT p6 D6)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg6)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (REQUIRED OUT p8 D12)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg8)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 9 (REQUIRED INOUT p9 D12)

			serializer.MapOpen()
			serializer.Pair("Position", 9)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg9)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 11 (REQUIRED OUT p11 D6.2)

			serializer.MapOpen()
			serializer.Pair("Position", 11)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg11)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 12 (REQUIRED INOUT p12 D6.2)

			serializer.MapOpen()
			serializer.Pair("Position", 12)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.ImpliedDecimal)
			serializer.Pair("PassedValue", arg12)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 14 (REQUIRED OUT p14 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 14)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg14)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 15 (REQUIRED INOUT p15 I1)

			serializer.MapOpen()
			serializer.Pair("Position", 15)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg15)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 17 (REQUIRED OUT p17 I2)

			serializer.MapOpen()
			serializer.Pair("Position", 17)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg17)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 18 (REQUIRED INOUT p18 I2)

			serializer.MapOpen()
			serializer.Pair("Position", 18)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg18)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 20 (REQUIRED OUT p20 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 20)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg20)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 21 (REQUIRED INOUT p21 I4)

			serializer.MapOpen()
			serializer.Pair("Position", 21)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg21)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 23 (REQUIRED OUT p23 I8)

			serializer.MapOpen()
			serializer.Pair("Position", 23)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg23)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 24 (REQUIRED INOUT p24 I8)

			serializer.MapOpen()
			serializer.Pair("Position", 24)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg24)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 26 (REQUIRED OUT p26 structure @Customer)

			serializer.MapOpen()
			serializer.Pair("Position", 26)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 26: Single Customer record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 27 (REQUIRED INOUT p27 structure @Customer)

			serializer.MapOpen()
			serializer.Pair("Position", 27)
			serializer.String("Value")
			serializer.MapOpen()
			
			;;Argument 27: Single Customer record
			serializer.Pair("DataType", (i)FieldDataType.DataObjectField)
			serializer.String("PassedValue")
			;TODO: Support for single structure is incomplete
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 29 (REQUIRED OUT p29 D8 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 29)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg29)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 30 (REQUIRED INOUT p30 D8 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 30)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg30)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 32 (REQUIRED OUT p32 D6 YYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 32)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg32)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 33 (REQUIRED INOUT p33 D6 YYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 33)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg33)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 35 (REQUIRED OUT p35 D7 YYYYJJJ date)

			serializer.MapOpen()
			serializer.Pair("Position", 35)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg35)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 36 (REQUIRED INOUT p36 D7 YYYYJJJ date)

			serializer.MapOpen()
			serializer.Pair("Position", 36)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg36)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 38 (REQUIRED OUT p38 D5 YYJJJ date)

			serializer.MapOpen()
			serializer.Pair("Position", 38)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg38)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 39 (REQUIRED INOUT p39 D5 YYJJJ date)

			serializer.MapOpen()
			serializer.Pair("Position", 39)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg39)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 41 (REQUIRED OUT p41 D6 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 41)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for time fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg41)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 42 (REQUIRED INOUT p42 D6 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 42)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for time fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg42)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 44 (REQUIRED OUT p44 D4 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 44)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for time fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg44)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 45 (REQUIRED INOUT p45 D4 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 45)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for time fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg45)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 47 (REQUIRED OUT p47 D14 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 47)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for time fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg47)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 48 (REQUIRED INOUT p48 D14 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 48)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for time fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg48)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 50 (REQUIRED OUT p50 D20 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 50)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg50)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 51 (REQUIRED INOUT p51 D20 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 51)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for date fields beyond the decimal value?
			serializer.Pair("DataType", (i)FieldDataType.DecimalField)
			serializer.Pair("PassedValue", arg51)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 53 (REQUIRED OUT p53 enum METHOD_STATUS)

			serializer.MapOpen()
			serializer.Pair("Position", 53)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for enum fields beyond the integer value?
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg53)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 54 (REQUIRED INOUT p54 enum METHOD_STATUS)

			serializer.MapOpen()
			serializer.Pair("Position", 54)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Do we need custom processing for enum fields beyond the integer value?
			serializer.Pair("DataType", (i)FieldDataType.IntegerField)
			serializer.Pair("PassedValue", arg54)
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 56 (REQUIRED OUT p56 D_HANDLE)

			serializer.MapOpen()
			serializer.Pair("Position", 56)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.HandleField)
			serializer.String("PassedValue")
			;TODO: Handle support is incomplete and will FAIL!!!
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 57 (REQUIRED INOUT p57 D_HANDLE)

			serializer.MapOpen()
			serializer.Pair("Position", 57)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.HandleField)
			serializer.String("PassedValue")
			;TODO: Handle support is incomplete and will FAIL!!!
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 59 (REQUIRED OUT p59 D_HANDLE)

			serializer.MapOpen()
			serializer.Pair("Position", 59)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.BinaryHandleField)
			serializer.String("PassedValue")
			;TODO: Binary Handle support is incomplete and will FAIL!!!
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 60 (REQUIRED INOUT p60 D_HANDLE)

			serializer.MapOpen()
			serializer.Pair("Position", 60)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.BinaryHandleField)
			serializer.String("PassedValue")
			;TODO: Binary Handle support is incomplete and will FAIL!!!
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.ArrayParameters
	;;; </summary>
	public class ArrayParameters_Dispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method ArrayParameters_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN p1 [*]A1)
				arg1Array,			@JsonArray
				arg1Handle,			D_HANDLE
				arg1HandlePos,		int
				;;Argument 2 (REQUIRED OUT p2 [*]A1)
				arg2Handle,			D_HANDLE
				arg2HandlePos,		int
				;;Argument 3 (REQUIRED INOUT p3 [*]A1)
				arg3Array,			@JsonArray
				arg3Handle,			D_HANDLE
				arg3HandlePos,		int
				;;Argument 4 (REQUIRED IN p25 [*]structure @Customer)
				arg4Array,			@JsonArray
				arg4Handle,			D_HANDLE
				arg4HandlePos,		int
				;;Argument 5 (REQUIRED OUT p26 [*]structure @Customer)
				arg5Handle,			D_HANDLE
				arg5HandlePos,		int
				;;Argument 6 (REQUIRED INOUT p27 [*]structure @Customer)
				arg6Array,			@JsonArray
				arg6Handle,			D_HANDLE
				arg6HandlePos,		int
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN p1 [*]A1)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[1])
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg1Array.arrayValues.Count)
			arg1HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg1Handle),argumentDefinition,arg1HandlePos,arg1Array)

			;;Argument 1 (REQUIRED INOUT p3 [*]A1)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[3])
			arg3Array = (@JsonArray)((@JsonObject)arguments.arrayValues[3]).GetProperty("PassedValue")
			arg3Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg3Array.arrayValues.Count)
			arg3HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg3Handle),argumentDefinition,arg3HandlePos,arg3Array)

			;;Argument 1 (REQUIRED IN p25 [*]structure @Customer)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[4])
			arg4Array = (@JsonArray)((@JsonObject)arguments.arrayValues[4]).GetProperty("PassedValue")
			arg4Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg4Array.arrayValues.Count)
			arg4HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg4Handle),argumentDefinition,arg4HandlePos,arg4Array)

			;;Argument 1 (REQUIRED INOUT p27 [*]structure @Customer)
			argumentDefinition = dispatcher.GetArgumentDataDefForCollection((@JsonObject)arguments.arrayValues[6])
			arg6Array = (@JsonArray)((@JsonObject)arguments.arrayValues[6]).GetProperty("PassedValue")
			arg6Handle = %mem_proc(DM_ALLOC,argumentDefinition.ElementSize*arg6Array.arrayValues.Count)
			arg6HandlePos = 1
			dispatcher.UnwrapObjectCollection(^m(arg6Handle),argumentDefinition,arg6HandlePos,arg6Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall array_parameters(^m(strFake(1:1),arg1Handle),^m(strFake(1:1),arg2Handle),^m(strFake(1:1),arg3Handle),^m(strCustomer,arg4Handle),^m(strCustomer,arg5Handle),^m(strCustomer,arg6Handle))

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT p2 [*]A1)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 3 (REQUIRED INOUT p3 [*]A1)

			serializer.MapOpen()
			serializer.Pair("Position", 3)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 5 (REQUIRED OUT p26 [*]structure @Customer)

			serializer.MapOpen()
			serializer.Pair("Position", 5)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (REQUIRED INOUT p27 [*]structure @Customer)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			;TODO: Need to add support for array of structure
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

	;;-------------------------------------------------------------------------
	;;; <summary>
	;;; Dispatcher for method SampleXfplEnv.ArrayListParameters
	;;; </summary>
	public class ArrayListParameters_Dispatch extends RoutineStub

		private mCustomerMetadata, @DataObjectMetadataBase

		public method ArrayListParameters_Dispatch
		proc
			;;Initialize the meta data for any data objects that are used by parameters to the method
			mCustomerMetadata = DataObjectMetadataBase.LookupType("Customer")
		endmethod

		protected override method DispatchInternal, void
			required in name,       string
			required in callFrame,  @JsonObject
			required in serializer, @DispatchSerializer
			required in dispatcher, @RoutineDispatcher
			record
				requestId,			int
				arguments,			@JsonArray
				argumentDefinition, @ArgumentDataDefinition

				;;Argument 1 (REQUIRED IN p1 ArrayList collection of A1)
				arg1Array,			@JsonArray
				arg1,				@ArrayList
				;;Argument 2 (REQUIRED OUT p2 ArrayList collection of A1)
				arg2,				@ArrayList
				;;Argument 3 (REQUIRED IN p4 ArrayList collection of D6)
				arg3Array,			@JsonArray
				arg3,				@ArrayList
				;;Argument 4 (REQUIRED OUT p5 ArrayList collection of D6)
				arg4,				@ArrayList
				;;Argument 5 (REQUIRED IN p7 ArrayList collection of D12)
				arg5Array,			@JsonArray
				arg5,				@ArrayList
				;;Argument 6 (REQUIRED OUT p8 ArrayList collection of D12)
				arg6,				@ArrayList
				;;Argument 7 (REQUIRED IN p10 ArrayList collection of D6.2)
				arg7Array,			@JsonArray
				arg7,				@ArrayList
				;;Argument 8 (REQUIRED OUT p11 ArrayList collection of D6.2)
				arg8,				@ArrayList
				;;Argument 9 (REQUIRED IN p13 ArrayList collection of I1)
				arg9Array,			@JsonArray
				arg9,				@ArrayList
				;;Argument 10 (REQUIRED OUT p14 ArrayList collection of I1)
				arg10,				@ArrayList
				;;Argument 11 (REQUIRED IN p16 ArrayList collection of I2)
				arg11Array,			@JsonArray
				arg11,				@ArrayList
				;;Argument 12 (REQUIRED OUT p17 ArrayList collection of I2)
				arg12,				@ArrayList
				;;Argument 13 (REQUIRED IN p19 ArrayList collection of I4)
				arg13Array,			@JsonArray
				arg13,				@ArrayList
				;;Argument 14 (REQUIRED OUT p20 ArrayList collection of I4)
				arg14,				@ArrayList
				;;Argument 15 (REQUIRED IN p22 ArrayList collection of I8)
				arg15Array,			@JsonArray
				arg15,				@ArrayList
				;;Argument 16 (REQUIRED OUT p23 ArrayList collection of I8)
				arg16,				@ArrayList
				;;Argument 17 (REQUIRED IN p25 ArrayList collection of structure @Customer)
				arg17Array,			@JsonArray
				arg17,				@ArrayList
				;;Argument 18 (REQUIRED OUT p26 ArrayList collection of structure @Customer)
				arg18,				@ArrayList
				;;Argument 19 (REQUIRED IN p28 ArrayList collection of D8 YYYYMMDD date)
				arg19Array,			@JsonArray
				arg19,				@ArrayList
				;;Argument 20 (REQUIRED OUT p29 ArrayList collection of D8 YYYYMMDD date)
				arg20,				@ArrayList
				;;Argument 21 (REQUIRED IN p31 ArrayList collection of D6 YYMMDD date)
				arg21Array,			@JsonArray
				arg21,				@ArrayList
				;;Argument 22 (REQUIRED OUT p32 ArrayList collection of D6 YYMMDD date)
				arg22,				@ArrayList
				;;Argument 23 (REQUIRED IN p34 ArrayList collection of D7 YYYYJJJ date)
				arg23Array,			@JsonArray
				arg23,				@ArrayList
				;;Argument 24 (REQUIRED OUT p35 ArrayList collection of D7 YYYYJJJ date)
				arg24,				@ArrayList
				;;Argument 25 (REQUIRED IN p37 ArrayList collection of D5 YYJJJ date)
				arg25Array,			@JsonArray
				arg25,				@ArrayList
				;;Argument 26 (REQUIRED OUT p38 ArrayList collection of D5 YYJJJ date)
				arg26,				@ArrayList
				;;Argument 27 (REQUIRED IN p40 ArrayList collection of D6 HHMM time)
				arg27Array,			@JsonArray
				arg27,				@ArrayList
				;;Argument 28 (REQUIRED OUT p41 ArrayList collection of D6 HHMM time)
				arg28,				@ArrayList
				;;Argument 29 (REQUIRED IN p43 ArrayList collection of D4 HHMM time)
				arg29Array,			@JsonArray
				arg29,				@ArrayList
				;;Argument 30 (REQUIRED OUT p44 ArrayList collection of D4 HHMM time)
				arg30,				@ArrayList
				;;Argument 31 (REQUIRED IN p46 ArrayList collection of D14 YYYYMMDD date)
				arg31Array,			@JsonArray
				arg31,				@ArrayList
				;;Argument 32 (REQUIRED OUT p47 ArrayList collection of D14 YYYYMMDD date)
				arg32,				@ArrayList
				;;Argument 33 (REQUIRED IN p49 ArrayList collection of D20 YYYYMMDD date)
				arg33Array,			@JsonArray
				arg33,				@ArrayList
				;;Argument 34 (REQUIRED OUT p50 ArrayList collection of D20 YYYYMMDD date)
				arg34,				@ArrayList
			endrecord
		proc

			;;------------------------------------------------------------
			;;Process inbound arguments

			arguments = (@JsonArray)callFrame.GetProperty("Arguments")

			;;Argument 1 (REQUIRED IN p1 ArrayList collection of A1)
			arg1Array = (@JsonArray)((@JsonObject)arguments.arrayValues[1]).GetProperty("PassedValue")
			arg1 = dispatcher.UnwrapObjectCollection(arg1Array)

			;;Argument 1 (REQUIRED IN p4 ArrayList collection of D6)
			arg3Array = (@JsonArray)((@JsonObject)arguments.arrayValues[3]).GetProperty("PassedValue")
			arg3 = dispatcher.UnwrapObjectCollection(arg3Array)

			;;Argument 1 (REQUIRED IN p7 ArrayList collection of D12)
			arg5Array = (@JsonArray)((@JsonObject)arguments.arrayValues[5]).GetProperty("PassedValue")
			arg5 = dispatcher.UnwrapObjectCollection(arg5Array)

			;;Argument 1 (REQUIRED IN p10 ArrayList collection of D6.2)
			arg7Array = (@JsonArray)((@JsonObject)arguments.arrayValues[7]).GetProperty("PassedValue")
			arg7 = dispatcher.UnwrapObjectCollection(arg7Array)

			;;Argument 1 (REQUIRED IN p13 ArrayList collection of I1)
			arg9Array = (@JsonArray)((@JsonObject)arguments.arrayValues[9]).GetProperty("PassedValue")
			arg9 = dispatcher.UnwrapObjectCollection(arg9Array)

			;;Argument 1 (REQUIRED IN p16 ArrayList collection of I2)
			arg11Array = (@JsonArray)((@JsonObject)arguments.arrayValues[11]).GetProperty("PassedValue")
			arg11 = dispatcher.UnwrapObjectCollection(arg11Array)

			;;Argument 1 (REQUIRED IN p19 ArrayList collection of I4)
			arg13Array = (@JsonArray)((@JsonObject)arguments.arrayValues[13]).GetProperty("PassedValue")
			arg13 = dispatcher.UnwrapObjectCollection(arg13Array)

			;;Argument 1 (REQUIRED IN p22 ArrayList collection of I8)
			arg15Array = (@JsonArray)((@JsonObject)arguments.arrayValues[15]).GetProperty("PassedValue")
			arg15 = dispatcher.UnwrapObjectCollection(arg15Array)

			;;Argument 1 (REQUIRED IN p25 ArrayList collection of structure @Customer)
			arg17Array = (@JsonArray)((@JsonObject)arguments.arrayValues[17]).GetProperty("PassedValue")
			arg17 = dispatcher.UnwrapObjectCollection(arg17Array)

			;;Argument 1 (REQUIRED IN p28 ArrayList collection of D8 YYYYMMDD date)
			arg19Array = (@JsonArray)((@JsonObject)arguments.arrayValues[19]).GetProperty("PassedValue")
			arg19 = dispatcher.UnwrapObjectCollection(arg19Array)

			;;Argument 1 (REQUIRED IN p31 ArrayList collection of D6 YYMMDD date)
			arg21Array = (@JsonArray)((@JsonObject)arguments.arrayValues[21]).GetProperty("PassedValue")
			arg21 = dispatcher.UnwrapObjectCollection(arg21Array)

			;;Argument 1 (REQUIRED IN p34 ArrayList collection of D7 YYYYJJJ date)
			arg23Array = (@JsonArray)((@JsonObject)arguments.arrayValues[23]).GetProperty("PassedValue")
			arg23 = dispatcher.UnwrapObjectCollection(arg23Array)

			;;Argument 1 (REQUIRED IN p37 ArrayList collection of D5 YYJJJ date)
			arg25Array = (@JsonArray)((@JsonObject)arguments.arrayValues[25]).GetProperty("PassedValue")
			arg25 = dispatcher.UnwrapObjectCollection(arg25Array)

			;;Argument 1 (REQUIRED IN p40 ArrayList collection of D6 HHMM time)
			arg27Array = (@JsonArray)((@JsonObject)arguments.arrayValues[27]).GetProperty("PassedValue")
			arg27 = dispatcher.UnwrapObjectCollection(arg27Array)

			;;Argument 1 (REQUIRED IN p43 ArrayList collection of D4 HHMM time)
			arg29Array = (@JsonArray)((@JsonObject)arguments.arrayValues[29]).GetProperty("PassedValue")
			arg29 = dispatcher.UnwrapObjectCollection(arg29Array)

			;;Argument 1 (REQUIRED IN p46 ArrayList collection of D14 YYYYMMDD date)
			arg31Array = (@JsonArray)((@JsonObject)arguments.arrayValues[31]).GetProperty("PassedValue")
			arg31 = dispatcher.UnwrapObjectCollection(arg31Array)

			;;Argument 1 (REQUIRED IN p49 ArrayList collection of D20 YYYYMMDD date)
			arg33Array = (@JsonArray)((@JsonObject)arguments.arrayValues[33]).GetProperty("PassedValue")
			arg33 = dispatcher.UnwrapObjectCollection(arg33Array)

			;;------------------------------------------------------------
			;; Call the underlying routine

			xcall arraylist_parameters(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22,arg23,arg24,arg25,arg26,arg27,arg28,arg29,arg30,arg31,arg32,arg33,arg34)

			;;--------------------------------------------------------------------------------
			;;Argument 2 (REQUIRED OUT p2 ArrayList collection of A1)

			serializer.MapOpen()
			serializer.Pair("Position", 2)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.AlphaArrayField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()

			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 4 (REQUIRED OUT p5 ArrayList collection of D6)

			serializer.MapOpen()
			serializer.Pair("Position", 4)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of decimal
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 6 (REQUIRED OUT p8 ArrayList collection of D12)

			serializer.MapOpen()
			serializer.Pair("Position", 6)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of decimal
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 8 (REQUIRED OUT p11 ArrayList collection of D6.2)

			serializer.MapOpen()
			serializer.Pair("Position", 8)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of implied decimal
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 10 (REQUIRED OUT p14 ArrayList collection of I1)

			serializer.MapOpen()
			serializer.Pair("Position", 10)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of integer
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 12 (REQUIRED OUT p17 ArrayList collection of I2)

			serializer.MapOpen()
			serializer.Pair("Position", 12)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of integer
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 14 (REQUIRED OUT p20 ArrayList collection of I4)

			serializer.MapOpen()
			serializer.Pair("Position", 14)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of integer
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 16 (REQUIRED OUT p23 ArrayList collection of I8)

			serializer.MapOpen()
			serializer.Pair("Position", 16)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of integer
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 18 (REQUIRED OUT p26 ArrayList collection of structure @Customer)

			serializer.MapOpen()
			serializer.Pair("Position", 18)
			serializer.String("Value")
			serializer.MapOpen()
			
			serializer.Pair("DataType", (i)FieldDataType.DataObjectCollectionField)
			serializer.String("PassedValue")
			serializer.ArrayOpen()
			begin
				data thisCustomer, @strCustomer
				foreach thisCustomer in arg18
					DataObjectBase.Serialize(serializer, thisCustomer, "CUSTOMERS", "", false)
			end
			serializer.ArrayClose()
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 20 (REQUIRED OUT p29 ArrayList collection of D8 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 20)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of date
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 22 (REQUIRED OUT p32 ArrayList collection of D6 YYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 22)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of date
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 24 (REQUIRED OUT p35 ArrayList collection of D7 YYYYJJJ date)

			serializer.MapOpen()
			serializer.Pair("Position", 24)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of date
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 26 (REQUIRED OUT p38 ArrayList collection of D5 YYJJJ date)

			serializer.MapOpen()
			serializer.Pair("Position", 26)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of date
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 28 (REQUIRED OUT p41 ArrayList collection of D6 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 28)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of time
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 30 (REQUIRED OUT p44 ArrayList collection of D4 HHMM time)

			serializer.MapOpen()
			serializer.Pair("Position", 30)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of time
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 32 (REQUIRED OUT p47 ArrayList collection of D14 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 32)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of date
			serializer.MapClose()
			serializer.MapClose()

			;;--------------------------------------------------------------------------------
			;;Argument 34 (REQUIRED OUT p50 ArrayList collection of D20 YYYYMMDD date)

			serializer.MapOpen()
			serializer.Pair("Position", 34)
			serializer.String("Value")
			serializer.MapOpen()
			
			;TODO: Need to add support for collection of date
			serializer.MapClose()
			serializer.MapClose()

		endmethod

	endclass

endnamespace