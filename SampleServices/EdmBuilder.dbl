;;*****************************************************************************
;;
;; Title:       EdmBuilder.dbl
;;
;; Type:        Class
;;
;; Description: OData DbContext class
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.OData
import Microsoft.EntityFrameworkCore
import Microsoft.OData.Edm
import Microsoft.AspNet.OData.Builder
import System.Collections.Generic
import SampleServices.Models

namespace SampleServices

	;;; <summary>
	;;; Builds an entity framework entity data model.
	;;; </summary>
	public class EdmBuilder

		private static mEdmModel, @IEdmModel

		;;; <summary>
		;;; Gets the entity data model.
		;;; </summary>
		public static method GetEdmModel, @IEdmModel
			required in serviceProvider, @IServiceProvider
		proc
			if(mEdmModel == ^null)
			begin
				data builder = new ODataConventionModelBuilder(serviceProvider)

				;;Declare entities
				builder.EntitySet<Customer>("Customers")
				builder.EntitySet<Order>("Orders")
				builder.EntitySet<OrderItem>("OrderItems")
				builder.EntitySet<Plant>("Plants")
				builder.EntitySet<Vendor>("Vendors")

				;;Entities with a single primary key segment have the key declared to EF via a
				;;{Key} attribute on the appropriate property in the data model, but only one {key}
				;;attribute can be used in a class, so keys with multiple segments are defined
				;;using the "Fluent API" here.
				builder.EntityType<OrderItem>().HasKey<OrderItem,int>("OiNumber")
				builder.EntityType<OrderItem>().HasKey<OrderItem,int>("OiLineItem")

				data tempModel = (@EdmModel)builder.GetEdmModel()

				data customerType = (@EdmEntityType)tempModel.FindDeclaredType("SampleServices.Models.Customer")
				tempModel.AddAlternateKeyAnnotation(customerType, new Dictionary<string, IEdmProperty>() {{"CustRtype",customerType.FindProperty("CustRtype")},{"CustKey",customerType.FindProperty("CustKey")}})

				data orderType = (@EdmEntityType)tempModel.FindDeclaredType("SampleServices.Models.Order")
				tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"OrCustomer",orderType.FindProperty("OrCustomer")}})
				tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"OrOrdered",orderType.FindProperty("OrOrdered")}})
				tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"OrCompleted",orderType.FindProperty("OrCompleted")}})

				data orderItemType = (@EdmEntityType)tempModel.FindDeclaredType("SampleServices.Models.OrderItem")
				tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"OiItemOrdered",orderItemType.FindProperty("OiItemOrdered")}})
				tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"OiShipped",orderItemType.FindProperty("OiShipped")}})
				tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"OiInvoice",orderItemType.FindProperty("OiInvoice")}})

				data plantType = (@EdmEntityType)tempModel.FindDeclaredType("SampleServices.Models.Plant")
				tempModel.AddAlternateKeyAnnotation(plantType, new Dictionary<string, IEdmProperty>() {{"InSource",plantType.FindProperty("InSource")}})
				tempModel.AddAlternateKeyAnnotation(plantType, new Dictionary<string, IEdmProperty>() {{"InColor",plantType.FindProperty("InColor")}})
				tempModel.AddAlternateKeyAnnotation(plantType, new Dictionary<string, IEdmProperty>() {{"InSize",plantType.FindProperty("InSize")}})
				tempModel.AddAlternateKeyAnnotation(plantType, new Dictionary<string, IEdmProperty>() {{"InName",plantType.FindProperty("InName")}})

				data vendorType = (@EdmEntityType)tempModel.FindDeclaredType("SampleServices.Models.Vendor")
				tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"VendRtype",vendorType.FindProperty("VendRtype")},{"VendKey",vendorType.FindProperty("VendKey")}})

				mEdmModel = tempModel
			end

			mreturn mEdmModel

		endmethod

	endclass

endnamespace