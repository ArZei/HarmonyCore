;;*****************************************************************************
;;
;; Title:       PlantsController.dbl
;;
;; Type:        Class
;;
;; Description: OData controller for the PLANTS structure.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models

namespace SampleServices.Controllers

	;;; <summary>
	;;; OData controller for Plants
	;;; </summary>
	public class PlantsController extends ODataController
	
		public readwrite property DBContext, @SampleServices.DBContext

		;;; <summary>
		;;; Constructs a new instance of PlantsController
		;;; </summary>
		;;; <param name="dbContext">Database context</param>
		public method PlantsController
			dbContext, @SampleServices.DBContext
		proc
			this.DBContext = dbContext
		endmethod

.region "READ"

		{ODataRoute("Plants")}
		{EnableQuery}
		;{EnableQuery(MaxExpansionDepth=3, MaxSkip=10, MaxTop=5, PageSize=4)}
		;;; <summary>
		;;; Get all Plants
		;;; </summary>
		public method Get, @IActionResult
		proc
			mreturn Ok(DBContext.Plants)
		endmethod

		{EnableQuery}
		{ODataRoute("Plants(InItemid={aInItemid})")}
		;;; <summary>
		;;; Get a single Plant by primary key.
		;;; </summary>
		;;; <param name="aInItemid">Item ID</param>
		;;; <returns></returns>
		public method Get, @IActionResult
			{FromODataUri}
            required in aInItemid, int
		proc
			data result = DBContext.Plants.Find(aInItemid)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod
		
		{EnableQuery}
		{ODataRoute("Plants(InSource={aInSource})")}
		;;; <summary>
		;;; Get a single Plant by key Vendor.
		;;; </summary>
		;;; <param name="aInSource">Vending Source Code</param>
		;;; <returns></returns>
		public method GetByKeyVendor, @IActionResult
			{FromODataUri}
			required in aInSource, int
		proc
			data result = DBContext.Plants.FindAlternate("InSource",aInSource)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod

		{EnableQuery}
		{ODataRoute("Plants(InColor={aInColor})")}
		;;; <summary>
		;;; Get a single Plant by key Color.
		;;; </summary>
		;;; <param name="aInColor">Flower color</param>
		;;; <returns></returns>
		public method GetByKeyColor, @IActionResult
			{FromODataUri}
			required in aInColor, String
		proc
			data result = DBContext.Plants.FindAlternate("InColor",aInColor)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod

		{EnableQuery}
		{ODataRoute("Plants(InSize={aInSize})")}
		;;; <summary>
		;;; Get a single Plant by key Size.
		;;; </summary>
		;;; <param name="aInSize">Size in gallons</param>
		;;; <returns></returns>
		public method GetByKeySize, @IActionResult
			{FromODataUri}
			required in aInSize, int
		proc
			data result = DBContext.Plants.FindAlternate("InSize",aInSize)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod

		{EnableQuery}
		{ODataRoute("Plants(InName={aInName})")}
		;;; <summary>
		;;; Get a single Plant by key Name.
		;;; </summary>
		;;; <param name="aInName">Common name</param>
		;;; <returns></returns>
		public method GetByKeyName, @IActionResult
			{FromODataUri}
			required in aInName, String
		proc
			data result = DBContext.Plants.FindAlternate("InName",aInName)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod

.endregion

.region "CREATE"

		{ODataRoute("Plants(InItemid={aInItemid})")}
		;;; <summary>
		;;; Create (with a client-supplied primary key) or replace a plant.
		;;; </summary>
		;;; <param name="aInItemid">Item ID</param>
		;;; <returns></returns>
		public method Put, @IActionResult
			{FromODataUri}
            required in aInItemid, int
			{FromBody}
			required in aPlant, @Plant
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Ensure that the key values in the URI win over any data that may be in the model object
            aPlant.InItemid = aInItemid

			;;Add the new plant
			try
			begin
				DBContext.Plants.Add(aPlant)
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			;;Commit the change
			DBContext.SaveChanges()

			mreturn NoContent()

		endmethod

.endregion

.region "DELETE"

		{ODataRoute("Plants(InItemid={aInItemid})")}
		;;; <summary>
		;;; Delete a plant.
		;;; </summary>
		;;; <param name="aInItemid">Item ID</param>
		;;; <returns></returns>
		public method Delete, @IActionResult
			{FromODataUri}
            required in aInItemid, int
		proc
			;;Get the plant to be deleted
			data plantToRemove = DBContext.Plants.Find(aInItemid)

			if (plantToRemove == ^null)
				mreturn NotFound()

			;;Mark the plant for removal
			DBContext.Plants.Remove(plantToRemove)

			;;Commit the change
			DBContext.SaveChanges()

			mreturn Ok()

		endmethod

.endregion

	endclass

endnamespace