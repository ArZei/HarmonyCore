;;*****************************************************************************
;;
;; Title:       PlantsController.dbl
;;
;; Type:        Class
;;
;; Description: OData controller for the PLANTS structure.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models

namespace SampleServices.Controllers

	;;; <summary>
	;;; OData controller for Plants
	;;; </summary>
	public class PlantsController extends ODataController
	
		public readwrite property DBContext, @SampleServices.DBContext

		;;; <summary>
		;;; Constructs a new instance of PlantsController
		;;; </summary>
		;;; <param name="dbContext">Database context</param>
		public method PlantsController
			dbContext, @SampleServices.DBContext
		proc
			this.DBContext = dbContext
		endmethod

.region "READ"

		{ODataRoute("Plants")}
		{EnableQuery}
		;{EnableQuery(MaxExpansionDepth=3, MaxSkip=10, MaxTop=5, PageSize=4)}
		;;; <summary>
		;;; Get all Plants
		;;; </summary>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @IActionResult
		proc
			mreturn Ok(DBContext.Plants)
		endmethod

		{ODataRoute("Plants(InItemid={aInItemid})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single Plant by primary key.
		;;; </summary>
		;;; <param name="aInItemid">Item ID</param>
		;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @SingleResult<Plant>
			{FromODataUri}
            required in aInItemid, int
		proc
			mreturn new SingleResult<Plant>(DBContext.Plants.FindQuery<Plant>(aInItemid))
		endmethod
		
		{ODataRoute("Plants(InSource={aInSource})")}
		{EnableQuery}
		;;; <summary>
		;;; Get plants by alternate key key Vendor.
		;;; </summary>
		;;; <param name="aInSource">Vending Source Code</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyVendor, @IActionResult
			{FromODataUri}
			required in aInSource, int
		proc
			data result = DBContext.Plants.FindAlternate("InSource",aInSource)
			if (result == ^null)
				mreturn NotFound()
			mreturn Ok(result)
		endmethod

		{ODataRoute("Plants(InColor={aInColor})")}
		{EnableQuery}
		;;; <summary>
		;;; Get plants by alternate key key Color.
		;;; </summary>
		;;; <param name="aInColor">Flower color</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyColor, @IActionResult
			{FromODataUri}
			required in aInColor, String
		proc
			data result = DBContext.Plants.FindAlternate("InColor",aInColor)
			if (result == ^null)
				mreturn NotFound()
			mreturn Ok(result)
		endmethod

		{ODataRoute("Plants(InSize={aInSize})")}
		{EnableQuery}
		;;; <summary>
		;;; Get plants by alternate key key Size.
		;;; </summary>
		;;; <param name="aInSize">Size in gallons</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeySize, @IActionResult
			{FromODataUri}
			required in aInSize, int
		proc
			data result = DBContext.Plants.FindAlternate("InSize",aInSize)
			if (result == ^null)
				mreturn NotFound()
			mreturn Ok(result)
		endmethod

		{ODataRoute("Plants(InName={aInName})")}
		{EnableQuery}
		;;; <summary>
		;;; Get plants by alternate key key Name.
		;;; </summary>
		;;; <param name="aInName">Common name</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyName, @IActionResult
			{FromODataUri}
			required in aInName, String
		proc
			data result = DBContext.Plants.FindAlternate("InName",aInName)
			if (result == ^null)
				mreturn NotFound()
			mreturn Ok(result)
		endmethod

.endregion

.region "READ Individual Properties"
		{ODataRoute("Plants({key})/InItemid")}
		;;; <summary>
		;;; Get the InItemid property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Item ID</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInItemid, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InItemid)
		endmethod

		{ODataRoute("Plants({key})/InSource")}
		;;; <summary>
		;;; Get the InSource property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Vending Source Code</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInSource, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InSource)
		endmethod

		{ODataRoute("Plants({key})/InSize")}
		;;; <summary>
		;;; Get the InSize property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Size in gallons</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInSize, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InSize)
		endmethod

		{ODataRoute("Plants({key})/InName")}
		;;; <summary>
		;;; Get the InName property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Common name</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInName, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InName)
		endmethod

		{ODataRoute("Plants({key})/InLatin")}
		;;; <summary>
		;;; Get the InLatin property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Latin name</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInLatin, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InLatin)
		endmethod

		{ODataRoute("Plants({key})/InZone")}
		;;; <summary>
		;;; Get the InZone property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Zone</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInZone, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InZone)
		endmethod

		{ODataRoute("Plants({key})/InType")}
		;;; <summary>
		;;; Get the InType property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Type code</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInType, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InType)
		endmethod

		{ODataRoute("Plants({key})/InFlower")}
		;;; <summary>
		;;; Get the InFlower property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Flowering?</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInFlower, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InFlower)
		endmethod

		{ODataRoute("Plants({key})/InColor")}
		;;; <summary>
		;;; Get the InColor property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Flower color</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInColor, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InColor)
		endmethod

		{ODataRoute("Plants({key})/InShape")}
		;;; <summary>
		;;; Get the InShape property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Plant shape</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInShape, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InShape)
		endmethod

		{ODataRoute("Plants({key})/InMaxhigh")}
		;;; <summary>
		;;; Get the InMaxhigh property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Maximum height (in inches)</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInMaxhigh, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InMaxhigh)
		endmethod

		{ODataRoute("Plants({key})/InMaxwide")}
		;;; <summary>
		;;; Get the InMaxwide property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Maximum width (in inches)</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInMaxwide, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InMaxwide)
		endmethod

		{ODataRoute("Plants({key})/InWater")}
		;;; <summary>
		;;; Get the InWater property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Water requirements</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInWater, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InWater)
		endmethod

		{ODataRoute("Plants({key})/InSun")}
		;;; <summary>
		;;; Get the InSun property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Sun requirements</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInSun, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InSun)
		endmethod

		{ODataRoute("Plants({key})/InLocation")}
		;;; <summary>
		;;; Get the InLocation property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Bin/aisle</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetInLocation, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InLocation)
		endmethod

		{ODataRoute("Plants({key})/InOnhand")}
		;;; <summary>
		;;; Get the InOnhand property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Qty on hand</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInOnhand, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InOnhand)
		endmethod

		{ODataRoute("Plants({key})/InAllocated")}
		;;; <summary>
		;;; Get the InAllocated property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Qty allocated</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInAllocated, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InAllocated)
		endmethod

		{ODataRoute("Plants({key})/InOnorder")}
		;;; <summary>
		;;; Get the InOnorder property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Qty on order</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInOnorder, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InOnorder)
		endmethod

		{ODataRoute("Plants({key})/InMinimum")}
		;;; <summary>
		;;; Get the InMinimum property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Reorder point</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetInMinimum, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InMinimum)
		endmethod

		{ODataRoute("Plants({key})/InPrice")}
		;;; <summary>
		;;; Get the InPrice property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Unit Price</param>
		;;; <returns>
		;;; Returns a decimal containing the value of the requested property.
		;;;</returns>
		public method GetInPrice, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InPrice)
		endmethod

		{ODataRoute("Plants({key})/InCost")}
		;;; <summary>
		;;; Get the InCost property of a single Plant, by primary key.
		;;; </summary>
		;;; <param name="key">Item Cost</param>
		;;; <returns>
		;;; Returns a decimal containing the value of the requested property.
		;;;</returns>
		public method GetInCost, @IActionResult
			{FromODataUri}
            required in key, int
		proc
			data result = DBContext.Plants.Find(key)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.InCost)
		endmethod

.endregion

.region "CREATE"

		{ODataRoute("Plants(InItemid={aInItemid})")}
		;;; <summary>
		;;; Create (with a client-supplied primary key) or replace a plant.
		;;; </summary>
		;;; <param name="aInItemid">Item ID</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Put, @IActionResult
			{FromODataUri}
            required in aInItemid, int
			{FromBody}
			required in aPlant, @Plant
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Ensure that the key values in the URI win over any data that may be in the model object
            aPlant.InItemid = aInItemid

			try
			begin
				;;Add and commit
				data existing = DBContext.Plants.Find(aInItemid)
				if(existing != ^null) then
				begin
					DBContext.Plants.Update(aPlant)
				end
				else
				begin
					DBContext.Plants.Add(aPlant)
				end
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "UPDATE"

		{ODataRoute("Plants(InItemid={aInItemid})")}
		;;; <summary>
		;;; Patch  (partial update) a plant.
		;;; </summary>
		;;; <param name="aInItemid">Item ID</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Patch, @IActionResult
			{FromODataUri}
            required in aInItemid, int
			{FromBody}
			required in aPlant, @JsonPatchDocument<Plant>
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Patch the existing plant
			try
			begin
				;;Get the plant to be updated
				data plantToUpdate = DBContext.Plants.Find(aInItemid)

				;;Did we find it?
				if(plantToUpdate == ^null)
					mreturn NotFound()

				;;Apply the changes to the plant we read
				aPlant.ApplyTo(plantToUpdate)

				;;Update and commit
				DBContext.Plants.Update(plantToUpdate)
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "DELETE"

		{ODataRoute("Plants(InItemid={aInItemid})")}
		;;; <summary>
		;;; Delete a plant.
		;;; </summary>
		;;; <param name="aInItemid">Item ID</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Delete, @IActionResult
			{FromODataUri}
            required in aInItemid, int
		proc
			;;Get the plant to be deleted
			data plantToRemove = DBContext.Plants.Find(aInItemid)

			;;Did we find it?
			if (plantToRemove == ^null)
				mreturn NotFound()

			;;Delete and commit
			DBContext.Plants.Remove(plantToRemove)
			DBContext.SaveChanges()

			mreturn NoContent()

		endmethod

.endregion

	endclass

endnamespace