;;*****************************************************************************
;;
;; Title:       OrderItemsController.dbl
;;
;; Type:        Class
;;
;; Description: OData controller for the ORDER_ITEMS structure.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models

namespace SampleServices.Controllers

	;;; <summary>
	;;; OData controller for OrderItems
	;;; </summary>
	public class OrderItemsController extends ODataController
	
		public readwrite property DBContext, @SampleServices.DBContext

		;;; <summary>
		;;; Constructs a new instance of OrderItemsController
		;;; </summary>
		;;; <param name="dbContext">Database context</param>
		public method OrderItemsController
			dbContext, @SampleServices.DBContext
		proc
			this.DBContext = dbContext
		endmethod

.region "READ"

		{ODataRoute("OrderItems")}
		{EnableQuery}
		;{EnableQuery(MaxExpansionDepth=3, MaxSkip=10, MaxTop=5, PageSize=4)}
		;;; <summary>
		;;; Get all OrderItems
		;;; </summary>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @IActionResult
		proc
			mreturn Ok(DBContext.OrderItems)
		endmethod

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single OrderItem by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Order number</param>
		;;; <param name="aOiLineItem">Line item number</param>
		;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @SingleResult<OrderItem>
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			mreturn new SingleResult<OrderItem>(DBContext.OrderItems.FindQuery<OrderItem>(aOiNumber,aOiLineItem))
		endmethod
		
		{ODataRoute("OrderItems(OiItemOrdered={aOiItemOrdered})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single OrderItem by key OiItemOrdered.
		;;; </summary>
		;;; <param name="aOiItemOrdered">Item ordered</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyOiItemOrdered, @IActionResult
			{FromODataUri}
			required in aOiItemOrdered, int
		proc
			data result = DBContext.OrderItems.FindAlternate("OiItemOrdered",aOiItemOrdered)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod

		{ODataRoute("OrderItems(OiShipped={aOiShipped})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single OrderItem by key OiShipped.
		;;; </summary>
		;;; <param name="aOiShipped">Date shipped</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyOiShipped, @IActionResult
			{FromODataUri}
			required in aOiShipped, DateTime
		proc
			data result = DBContext.OrderItems.FindAlternate("OiShipped",aOiShipped)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod

		{ODataRoute("OrderItems(OiInvoice={aOiInvoice})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single OrderItem by key OiInvoice.
		;;; </summary>
		;;; <param name="aOiInvoice">Invoice number</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyOiInvoice, @IActionResult
			{FromODataUri}
			required in aOiInvoice, int
		proc
			data result = DBContext.OrderItems.FindAlternate("OiInvoice",aOiInvoice)

			if (result == ^null)
				mreturn NotFound()

			mreturn Ok(result)

		endmethod

.endregion

.region "READ Individual Properties"
		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})/OiNumber")}
		;;; <summary>
		;;; Get the OiNumber property of a single OrderItem, by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Order number</param>
		;;; <param name="aOiLineItem">Order number</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetOiNumber, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			data result = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.OiNumber)
		endmethod

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})/OiLineItem")}
		;;; <summary>
		;;; Get the OiLineItem property of a single OrderItem, by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Line item number</param>
		;;; <param name="aOiLineItem">Line item number</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetOiLineItem, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			data result = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.OiLineItem)
		endmethod

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})/OiItemOrdered")}
		;;; <summary>
		;;; Get the OiItemOrdered property of a single OrderItem, by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Item ordered</param>
		;;; <param name="aOiLineItem">Item ordered</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetOiItemOrdered, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			data result = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.OiItemOrdered)
		endmethod

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})/OiQty")}
		;;; <summary>
		;;; Get the OiQty property of a single OrderItem, by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Quantity ordered</param>
		;;; <param name="aOiLineItem">Quantity ordered</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetOiQty, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			data result = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.OiQty)
		endmethod

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})/OiUnitPrice")}
		;;; <summary>
		;;; Get the OiUnitPrice property of a single OrderItem, by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Unit price</param>
		;;; <param name="aOiLineItem">Unit price</param>
		;;; <returns>
		;;; Returns a decimal containing the value of the requested property.
		;;;</returns>
		public method GetOiUnitPrice, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			data result = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.OiUnitPrice)
		endmethod

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})/OiShipped")}
		;;; <summary>
		;;; Get the OiShipped property of a single OrderItem, by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Date shipped</param>
		;;; <param name="aOiLineItem">Date shipped</param>
		;;; <returns>
		;;; Returns a DateTime containing the value of the requested property.
		;;;</returns>
		public method GetOiShipped, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			data result = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.OiShipped)
		endmethod

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})/OiInvoice")}
		;;; <summary>
		;;; Get the OiInvoice property of a single OrderItem, by primary key.
		;;; </summary>
		;;; <param name="aOiNumber">Invoice number</param>
		;;; <param name="aOiLineItem">Invoice number</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetOiInvoice, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			data result = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.OiInvoice)
		endmethod

.endregion

.region "CREATE"

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")}
		;;; <summary>
		;;; Create (with a client-supplied primary key) or replace a orderItem.
		;;; </summary>
		;;; <param name="aOiNumber">Order number</param>
		;;; <param name="aOiLineItem">Line item number</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Put, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
			{FromBody}
			required in aOrderItem, @OrderItem
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Ensure that the key values in the URI win over any data that may be in the model object
            aOrderItem.OiNumber = aOiNumber
            aOrderItem.OiLineItem = aOiLineItem

			try
			begin
				;;Add and commit
				data existing = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)
				if(existing != ^null) then
				begin
					DBContext.OrderItems.Update(aOrderItem)
				end
				else
				begin
					DBContext.OrderItems.Add(aOrderItem)
				end
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "UPDATE"

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")}
		;;; <summary>
		;;; Patch  (partial update) a orderItem.
		;;; </summary>
		;;; <param name="aOiNumber">Order number</param>
		;;; <param name="aOiLineItem">Line item number</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Patch, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
			{FromBody}
			required in aOrderItem, @JsonPatchDocument<OrderItem>
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Patch the existing orderItem
			try
			begin
				;;Get the orderItem to be updated
				data orderItemToUpdate = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)

				;;Did we find it?
				if(orderItemToUpdate == ^null)
					mreturn NotFound()

				;;Apply the changes to the orderItem we read
				aOrderItem.ApplyTo(orderItemToUpdate)

				;;Update and commit
				DBContext.OrderItems.Update(orderItemToUpdate)
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "DELETE"

		{ODataRoute("OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")}
		;;; <summary>
		;;; Delete a orderItem.
		;;; </summary>
		;;; <param name="aOiNumber">Order number</param>
		;;; <param name="aOiLineItem">Line item number</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Delete, @IActionResult
			{FromODataUri}
            required in aOiNumber, int
			{FromODataUri}
            required in aOiLineItem, int
		proc
			;;Get the orderItem to be deleted
			data orderItemToRemove = DBContext.OrderItems.Find(aOiNumber,aOiLineItem)

			;;Did we find it?
			if (orderItemToRemove == ^null)
				mreturn NotFound()

			;;Delete and commit
			DBContext.OrderItems.Remove(orderItemToRemove)
			DBContext.SaveChanges()

			mreturn NoContent()

		endmethod

.endregion

	endclass

endnamespace