;;*****************************************************************************
;;
;; Title:       CustomersController.dbl
;;
;; Description: OData controller for the CUSTOMERS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models
import Harmony.Core.Interface

namespace SampleServices.Controllers

    ;;; <summary>
    ;;; OData controller for Customers
    ;;; </summary>
    public class CustomersController extends ODataController
    
        public readwrite property DBContext, @SampleServices.DBContext
        public readwrite property ServiceProvider, @IServiceProvider

        ;;; <summary>
        ;;; Constructs a new instance of CustomersController
        ;;; </summary>
        ;;; <param name="dbContext">Database context</param>
        public method CustomersController
            dbContext, @SampleServices.DBContext
           serviceProvider, @IServiceProvider
        proc
            this.DBContext = dbContext
            this.ServiceProvider = serviceProvider
        endmethod

        {ODataRoute("Customers")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Customers
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetAllCustomers, @IActionResult
        proc
            mreturn Ok(DBContext.Customers)
        endmethod

        {ODataRoute("Customers(CustomerNumber={aCustomerNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Customer by primary key.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomer, @SingleResult<Customer>
            {FromODataUri}
            required in aCustomerNumber, int
        proc
            mreturn new SingleResult<Customer>(DBContext.Customers.FindQuery<Customer>(aCustomerNumber))
        endmethod

        {ODataRoute("Customers(State={aState})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get customers by alternate key key State.
        ;;; </summary>
        ;;; <param name="aState">State</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomersByState, @IActionResult
            {FromODataUri}
            required in aState, String
        proc
            data result = DBContext.Customers.FindAlternate("State",aState)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Customers(ZipCode={aZipCode})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get customers by alternate key key Zip.
        ;;; </summary>
        ;;; <param name="aZipCode">Zip code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomersByZip, @IActionResult
            {FromODataUri}
            required in aZipCode, int
        proc
            data result = DBContext.Customers.FindAlternate("ZipCode",aZipCode)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Customers(PaymentTermsCode={aPaymentTermsCode})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get customers by alternate key key PaymentTerms.
        ;;; </summary>
        ;;; <param name="aPaymentTermsCode">Payment terms code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetCustomersByPaymentTerms, @IActionResult
            {FromODataUri}
            required in aPaymentTermsCode, String
        proc
            data result = DBContext.Customers.FindAlternate("PaymentTermsCode",aPaymentTermsCode)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod


        {ODataRoute("Customers({key})/Name")}
        ;;; <summary>
        ;;; Get the Name property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Customer name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerName, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Name)
        endmethod

        {ODataRoute("Customers({key})/Street")}
        ;;; <summary>
        ;;; Get the Street property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Street address</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerStreet, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Street)
        endmethod

        {ODataRoute("Customers({key})/City")}
        ;;; <summary>
        ;;; Get the City property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">City</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerCity, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.City)
        endmethod

        {ODataRoute("Customers({key})/State")}
        ;;; <summary>
        ;;; Get the State property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">State</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerState, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.State)
        endmethod

        {ODataRoute("Customers({key})/ZipCode")}
        ;;; <summary>
        ;;; Get the ZipCode property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Zip code</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerZipCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ZipCode)
        endmethod

        {ODataRoute("Customers({key})/Contact")}
        ;;; <summary>
        ;;; Get the Contact property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Contact name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerContact, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Contact)
        endmethod

        {ODataRoute("Customers({key})/Phone")}
        ;;; <summary>
        ;;; Get the Phone property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Phone number</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerPhone, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Phone)
        endmethod

        {ODataRoute("Customers({key})/Fax")}
        ;;; <summary>
        ;;; Get the Fax property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Fax number</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerFax, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Fax)
        endmethod

        {ODataRoute("Customers({key})/FavoriteItem")}
        ;;; <summary>
        ;;; Get the FavoriteItem property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Customers favorite item</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerFavoriteItem, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.FavoriteItem)
        endmethod

        {ODataRoute("Customers({key})/PaymentTermsCode")}
        ;;; <summary>
        ;;; Get the PaymentTermsCode property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Payment terms code</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerPaymentTermsCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.PaymentTermsCode)
        endmethod

        {ODataRoute("Customers({key})/TaxId")}
        ;;; <summary>
        ;;; Get the TaxId property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Customers tax ID number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerTaxId, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.TaxId)
        endmethod

        {ODataRoute("Customers({key})/CreditLimit")}
        ;;; <summary>
        ;;; Get the CreditLimit property of a single Customer, by primary key.
        ;;; </summary>
        ;;; <param name="key">Credit limit</param>
        ;;; <returns>
        ;;; Returns a decimal containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerCreditLimit, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Customers.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.CreditLimit)
        endmethod

        {ODataRoute("Customers")}
        ;;; <summary>
        ;;; Create a new customer (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostCustomer, @IActionResult
            {FromBody}
            required in aCustomer, @Customer
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("CustomerNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)
            disposable data keyFactory = (@IPrimaryKeyFactory)ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            ;;Get the next available primary key value
            KeyFactory.AssignPrimaryKey(aCustomer)

            ;;Add the new customer
            DBContext.Customers.Add(aCustomer)
            DBContext.SaveChanges(keyFactory)

            mreturn Created(aCustomer)

        endmethod

        {ODataRoute("Customers(CustomerNumber={aCustomerNumber})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a customer.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutCustomer, @IActionResult
            {FromODataUri}
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomer, @Customer
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aCustomer.CustomerNumber = aCustomerNumber

            try
            begin
                ;;Add and commit
                data existing = DBContext.Customers.Find(aCustomerNumber)
                if(existing == ^null) then
                begin
                    DBContext.Customers.Add(aCustomer)
                    DBContext.SaveChanges()
                    mreturn Created(aCustomer)
                end
                else
                begin
                    aCustomer.CopyTo(existing)
                    DBContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("Customers(CustomerNumber={aCustomerNumber})")}
        ;;; <summary>
        ;;; Patch  (partial update) a customer.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchCustomer, @IActionResult
            {FromODataUri}
            required in aCustomerNumber, int
            {FromBody}
            required in aCustomer, @JsonPatchDocument<Customer>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing customer
            try
            begin
                ;;Get the customer to be updated
                data customerToUpdate = DBContext.Customers.Find(aCustomerNumber)

                ;;Did we find it?
                if(customerToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the customer we read
                aCustomer.ApplyTo(customerToUpdate)

                ;;Update and commit
                DBContext.Customers.Update(customerToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {Authorize(Roles="Manager")}
        {ODataRoute("Customers(CustomerNumber={aCustomerNumber})")}
        ;;; <summary>
        ;;; Delete a customer.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteCustomer, @IActionResult
            {FromODataUri}
            required in aCustomerNumber, int
        proc
            ;;Get the customer to be deleted
            data customerToRemove = DBContext.Customers.Find(aCustomerNumber)

            ;;Did we find it?
            if (customerToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.Customers.Remove(customerToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace