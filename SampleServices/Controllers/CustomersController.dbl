;;*****************************************************************************
;;
;; Title:       CustomersController.dbl
;;
;; Type:        Class
;;
;; Description: OData controller for the CUSTOMERS structure.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models

namespace SampleServices.Controllers

	;;; <summary>
	;;; OData controller for Customers
	;;; </summary>
	public class CustomersController extends ODataController
	
		public readwrite property DBContext, @SampleServices.DBContext

		;;; <summary>
		;;; Constructs a new instance of CustomersController
		;;; </summary>
		;;; <param name="dbContext">Database context</param>
		public method CustomersController
			dbContext, @SampleServices.DBContext
		proc
			this.DBContext = dbContext
		endmethod

.region "READ"

		{ODataRoute("Customers")}
		{EnableQuery}
		;{EnableQuery(MaxExpansionDepth=3, MaxSkip=10, MaxTop=5, PageSize=4)}
		;;; <summary>
		;;; Get all Customers
		;;; </summary>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @IActionResult
		proc
			mreturn Ok(DBContext.Customers)
		endmethod

		{ODataRoute("Customers(CustKey={aCustKey})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single Customer by primary key.
		;;; </summary>
		;;; <param name="aCustKey">Customer id</param>
		;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @SingleResult<Customer>
			{FromODataUri}
            required in aCustKey, int
		proc
			mreturn new SingleResult<Customer>(DBContext.Customers.FindQuery<Customer>(aCustKey))
		endmethod
		
		{ODataRoute("Customers(CustRtype={aCustRtype},CustKey={aCustKey})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single Customer by key TagCustomer.
		;;; </summary>
		;;; <param name="aCustRtype">Record Tag Field</param>
		;;; <param name="aCustKey">Customer id</param>
		;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyTagCustomer, @SingleResult<Customer>
			{FromODataUri}
			required in aCustRtype, int
			{FromODataUri}
			required in aCustKey, int
		proc
			mreturn new SingleResult<Customer>(DBContext.Customers.FindAlternate("CustRtype",aCustRtype,"CustKey",aCustKey))
		endmethod

.endregion
.region "CREATE"

		{ODataRoute("Customers(CustKey={aCustKey})")}
		;;; <summary>
		;;; Create (with a client-supplied primary key) or replace a customer.
		;;; </summary>
		;;; <param name="aCustKey">Customer id</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Put, @IActionResult
			{FromODataUri}
            required in aCustKey, int
			{FromBody}
			required in aCustomer, @Customer
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Ensure that the key values in the URI win over any data that may be in the model object
            aCustomer.CustKey = aCustKey

			try
			begin
				;;Add and commit
				data existing = DBContext.Customers.Find(aCustKey)
				if(existing != ^null) then
				begin
					DBContext.Customers.Update(aCustomer)
				end
				else
				begin
					DBContext.Customers.Add(aCustomer)
				end
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "UPDATE"

		{ODataRoute("Customers(CustKey={aCustKey})")}
		;;; <summary>
		;;; Patch  (partial update) a customer.
		;;; </summary>
		;;; <param name="aCustKey">Customer id</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Patch, @IActionResult
			{FromODataUri}
            required in aCustKey, int
			{FromBody}
			required in aCustomer, @JsonPatchDocument<Customer>
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Patch the existing customer
			try
			begin
				;;Get the customer to be updated
				data customerToUpdate = DBContext.Customers.Find(aCustKey)

				;;Did we find it?
				if(customerToUpdate == ^null)
					mreturn NotFound()

				;;Apply the changes to the customer we read
				aCustomer.ApplyTo(customerToUpdate)

				;;Update and commit
				DBContext.Customers.Update(customerToUpdate)
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "DELETE"

		{ODataRoute("Customers(CustKey={aCustKey})")}
		;;; <summary>
		;;; Delete a customer.
		;;; </summary>
		;;; <param name="aCustKey">Customer id</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Delete, @IActionResult
			{FromODataUri}
            required in aCustKey, int
		proc
			;;Get the customer to be deleted
			data customerToRemove = DBContext.Customers.Find(aCustKey)

			;;Did we find it?
			if (customerToRemove == ^null)
				mreturn NotFound()

			;;Delete and commit
			DBContext.Customers.Remove(customerToRemove)
			DBContext.SaveChanges()

			mreturn NoContent()

		endmethod

.endregion

	endclass

endnamespace