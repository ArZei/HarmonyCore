;;*****************************************************************************
;;
;; Title:       MetadataController.dbl
;;
;; Type:        Class
;;
;; Description: OData controller that exposes available endpoints.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import System.Collections.Generic

namespace SampleServices.Controllers

	;;; <summary>
	;;; OData controller to expose metadata about available endpoints
	;;; </summary>
	public class MetadataController extends ODataController
	
		private static mControllers, @List<string>
		private static mEndpoints,  @List<string>

		;;; <summary>
		;;; Constructs a new instance of CustomersController
		;;; </summary>
		;;; <param name="dbContext">Database context</param>
		public method MetadataController
		proc
			if (mControllers == ^null)
			begin
				mControllers = new List<string>()
				mControllers.Add("Customers")
				mControllers.Add("Orders")
				mControllers.Add("OrderItems")
				mControllers.Add("Plants")
				mControllers.Add("Vendors")
			end

			if (mEndpoints == ^null)
			begin
				mEndpoints = new List<string>()

				;;Operations for CustomersController
				mEndpoints.Add("GET     /Customers")
				mEndpoints.Add("GET     /Customers(CustKey={aCustKey})")
				mEndpoints.Add("GET     /Customers(CustRtype={aCustRtype},CustKey={aCustKey})")
				mEndpoints.Add("POST    /Customers")
				mEndpoints.Add("PUT     /Customers(CustKey={aCustKey})")
				mEndpoints.Add("PATCH   /Customers(CustKey={aCustKey})")
				mEndpoints.Add("DELETE  /Customers(CustKey={aCustKey})")

				;;Operations for OrdersController
				mEndpoints.Add("GET     /Orders")
				mEndpoints.Add("GET     /Orders(OrNumber={aOrNumber})")
				mEndpoints.Add("GET     /Orders(OrCustomer={aOrCustomer})")
				mEndpoints.Add("GET     /Orders(OrOrdered={aOrOrdered})")
				mEndpoints.Add("GET     /Orders(OrCompleted={aOrCompleted})")
				mEndpoints.Add("POST    /Orders")
				mEndpoints.Add("PUT     /Orders(OrNumber={aOrNumber})")
				mEndpoints.Add("PATCH   /Orders(OrNumber={aOrNumber})")
				mEndpoints.Add("DELETE  /Orders(OrNumber={aOrNumber})")

				;;Operations for OrderItemsController
				mEndpoints.Add("GET     /OrderItems")
				mEndpoints.Add("GET     /OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")
				mEndpoints.Add("GET     /OrderItems(OiItemOrdered={aOiItemOrdered})")
				mEndpoints.Add("GET     /OrderItems(OiShipped={aOiShipped})")
				mEndpoints.Add("GET     /OrderItems(OiInvoice={aOiInvoice})")
				mEndpoints.Add("POST    /OrderItems")
				mEndpoints.Add("PUT     /OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")
				mEndpoints.Add("PATCH   /OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")
				mEndpoints.Add("DELETE  /OrderItems(OiNumber={aOiNumber},OiLineItem={aOiLineItem})")

				;;Operations for PlantsController
				mEndpoints.Add("GET     /Plants")
				mEndpoints.Add("GET     /Plants(InItemid={aInItemid})")
				mEndpoints.Add("GET     /Plants(InSource={aInSource})")
				mEndpoints.Add("GET     /Plants(InColor={aInColor})")
				mEndpoints.Add("GET     /Plants(InSize={aInSize})")
				mEndpoints.Add("GET     /Plants(InName={aInName})")
				mEndpoints.Add("POST    /Plants")
				mEndpoints.Add("PUT     /Plants(InItemid={aInItemid})")
				mEndpoints.Add("PATCH   /Plants(InItemid={aInItemid})")
				mEndpoints.Add("DELETE  /Plants(InItemid={aInItemid})")

				;;Operations for VendorsController
				mEndpoints.Add("GET     /Vendors")
				mEndpoints.Add("GET     /Vendors(VendKey={aVendKey})")
				mEndpoints.Add("GET     /Vendors(VendRtype={aVendRtype},VendKey={aVendKey})")
				mEndpoints.Add("POST    /Vendors")
				mEndpoints.Add("PUT     /Vendors(VendKey={aVendKey})")
				mEndpoints.Add("PATCH   /Vendors(VendKey={aVendKey})")
				mEndpoints.Add("DELETE  /Vendors(VendKey={aVendKey})")
			end
		endmethod

		{ODataRoute("Controllers")}
		{EnableQuery}
		;;; <summary>
		;;; Get a list of available controllers
		;;; </summary>
		public method GetControllers, @IActionResult
		proc
			mreturn Ok(mControllers)
		endmethod

		{ODataRoute("Endpoints")}
		{EnableQuery}
		;;; <summary>
		;;; Get a list of available endpoints
		;;; </summary>
		public method GetEndpoints, @IActionResult
		proc
			mreturn Ok(mEndpoints)
		endmethod
	endclass

endnamespace