;;*****************************************************************************
;;
;; Title:       VendorsController.dbl
;;
;; Type:        Class
;;
;; Description: OData controller for the VENDORS structure.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models

namespace SampleServices.Controllers

	;;; <summary>
	;;; OData controller for Vendors
	;;; </summary>
	public class VendorsController extends ODataController
	
		public readwrite property DBContext, @SampleServices.DBContext

		;;; <summary>
		;;; Constructs a new instance of VendorsController
		;;; </summary>
		;;; <param name="dbContext">Database context</param>
		public method VendorsController
			dbContext, @SampleServices.DBContext
		proc
			this.DBContext = dbContext
		endmethod

.region "READ"

		{ODataRoute("Vendors")}
		{EnableQuery}
		;{EnableQuery(MaxExpansionDepth=3, MaxSkip=10, MaxTop=5, PageSize=4)}
		;;; <summary>
		;;; Get all Vendors
		;;; </summary>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @IActionResult
		proc
			mreturn Ok(DBContext.Vendors)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single Vendor by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Vendor ID</param>
		;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Get, @SingleResult<Vendor>
			{FromODataUri}
            required in aVendKey, int
		proc
			mreturn new SingleResult<Vendor>(DBContext.Vendors.FindQuery<Vendor>(aVendKey))
		endmethod
		
		{ODataRoute("Vendors(VendRtype={aVendRtype},VendKey={aVendKey})")}
		{EnableQuery}
		;;; <summary>
		;;; Get a single Vendor by key TagVendor.
		;;; </summary>
		;;; <param name="aVendRtype">Record Type</param>
		;;; <param name="aVendKey">Vendor ID</param>
		;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetByKeyTagVendor, @SingleResult<Vendor>
			{FromODataUri}
			required in aVendRtype, int
			{FromODataUri}
			required in aVendKey, int
		proc
			mreturn new SingleResult<Vendor>(DBContext.Vendors.FindAlternate("VendRtype",aVendRtype,"VendKey",aVendKey))
		endmethod

.endregion

.region "READ Individual Properties"

		{ODataRoute("Vendors(VendKey={aVendKey})/VendKey")}
		;;; <summary>
		;;; Get the VendKey property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Vendor ID</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetVendKey, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendKey)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendRtype")}
		;;; <summary>
		;;; Get the VendRtype property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Record Type</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetVendRtype, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendRtype)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendName")}
		;;; <summary>
		;;; Get the VendName property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Vendor Name</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendName, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendName)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendStreet")}
		;;; <summary>
		;;; Get the VendStreet property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Street Address</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendStreet, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendStreet)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendCity")}
		;;; <summary>
		;;; Get the VendCity property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">City</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendCity, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendCity)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendState")}
		;;; <summary>
		;;; Get the VendState property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">State</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendState, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendState)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendZip")}
		;;; <summary>
		;;; Get the VendZip property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Zip Code</param>
		;;; <returns>
		;;; Returns an int containing the value of the requested property.
		;;;</returns>
		public method GetVendZip, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendZip)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendContact")}
		;;; <summary>
		;;; Get the VendContact property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Contact Person</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendContact, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendContact)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendTelephone")}
		;;; <summary>
		;;; Get the VendTelephone property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Phone number</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendTelephone, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendTelephone)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendFax")}
		;;; <summary>
		;;; Get the VendFax property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Fax Number</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendFax, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendFax)
		endmethod

		{ODataRoute("Vendors(VendKey={aVendKey})/VendTerms")}
		;;; <summary>
		;;; Get the VendTerms property of a single Vendor, by primary key.
		;;; </summary>
		;;; <param name="aVendKey">Terms & Conditions</param>
		;;; <returns>
		;;; Returns a string containing the value of the requested property.
		;;;</returns>
		public method GetVendTerms, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			data result = DBContext.Vendors.Find(aVendKey)
			if (result==^null)
				mreturn NotFound()
			mreturn OK(result.VendTerms)
		endmethod

.endregion

.region "CREATE"

		{ODataRoute("Vendors(VendKey={aVendKey})")}
		;;; <summary>
		;;; Create (with a client-supplied primary key) or replace a vendor.
		;;; </summary>
		;;; <param name="aVendKey">Vendor ID</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Put, @IActionResult
			{FromODataUri}
            required in aVendKey, int
			{FromBody}
			required in aVendor, @Vendor
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Ensure that the key values in the URI win over any data that may be in the model object
            aVendor.VendKey = aVendKey

			try
			begin
				;;Add and commit
				data existing = DBContext.Vendors.Find(aVendKey)
				if(existing != ^null) then
				begin
					DBContext.Vendors.Update(aVendor)
				end
				else
				begin
					DBContext.Vendors.Add(aVendor)
				end
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "UPDATE"

		{ODataRoute("Vendors(VendKey={aVendKey})")}
		;;; <summary>
		;;; Patch  (partial update) a vendor.
		;;; </summary>
		;;; <param name="aVendKey">Vendor ID</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Patch, @IActionResult
			{FromODataUri}
            required in aVendKey, int
			{FromBody}
			required in aVendor, @JsonPatchDocument<Vendor>
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Patch the existing vendor
			try
			begin
				;;Get the vendor to be updated
				data vendorToUpdate = DBContext.Vendors.Find(aVendKey)

				;;Did we find it?
				if(vendorToUpdate == ^null)
					mreturn NotFound()

				;;Apply the changes to the vendor we read
				aVendor.ApplyTo(vendorToUpdate)

				;;Update and commit
				DBContext.Vendors.Update(vendorToUpdate)
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

.endregion

.region "DELETE"

		{ODataRoute("Vendors(VendKey={aVendKey})")}
		;;; <summary>
		;;; Delete a vendor.
		;;; </summary>
		;;; <param name="aVendKey">Vendor ID</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method Delete, @IActionResult
			{FromODataUri}
            required in aVendKey, int
		proc
			;;Get the vendor to be deleted
			data vendorToRemove = DBContext.Vendors.Find(aVendKey)

			;;Did we find it?
			if (vendorToRemove == ^null)
				mreturn NotFound()

			;;Delete and commit
			DBContext.Vendors.Remove(vendorToRemove)
			DBContext.SaveChanges()

			mreturn NoContent()

		endmethod

.endregion

	endclass

endnamespace