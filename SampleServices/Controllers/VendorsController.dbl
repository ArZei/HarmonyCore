;;*****************************************************************************
;;
;; Title:       VendorsController.dbl
;;
;; Type:        Class
;;
;; Description: OData controller for the VENDORS structure.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models

namespace SampleServices.Controllers

    ;;; <summary>
    ;;; OData controller for Vendors
    ;;; </summary>
    public class VendorsController extends ODataController
    
        public readwrite property DBContext, @SampleServices.DBContext

        ;;; <summary>
        ;;; Constructs a new instance of VendorsController
        ;;; </summary>
        ;;; <param name="dbContext">Database context</param>
        public method VendorsController
            dbContext, @SampleServices.DBContext
        proc
            this.DBContext = dbContext
        endmethod

        {ODataRoute("Vendors")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get all Vendors
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get, @IActionResult
        proc
            mreturn Ok(DBContext.Vendors)
        endmethod

        {ODataRoute("Vendors(VendorNumber={aVendorNumber})")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get a single Vendor by primary key.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get, @SingleResult<Vendor>
            {FromODataUri}
            required in aVendorNumber, int
        proc
            mreturn new SingleResult<Vendor>(DBContext.Vendors.FindQuery<Vendor>(aVendorNumber))
        endmethod

        {ODataRoute("Vendors(RecordType={aRecordType},VendorNumber={aVendorNumber})")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get vendor by alternate key TagVendor.
        ;;; </summary>
        ;;; <param name="aRecordType">Record type (1)</param>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetByKeyTagVendor, @SingleResult<Vendor>
            {FromODataUri}
            required in aRecordType, int
            {FromODataUri}
            required in aVendorNumber, int
        proc
            mreturn new SingleResult<Vendor>(DBContext.Vendors.FindAlternate("RecordType",aRecordType,"VendorNumber",aVendorNumber))
        endmethod

        {ODataRoute("Vendors({key})/VendorNumber")}
        ;;; <summary>
        ;;; Get the VendorNumber property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Vendor number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetVendorNumber, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.VendorNumber)
        endmethod

        {ODataRoute("Vendors({key})/RecordType")}
        ;;; <summary>
        ;;; Get the RecordType property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Record type (1)</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetRecordType, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.RecordType)
        endmethod

        {ODataRoute("Vendors({key})/Name")}
        ;;; <summary>
        ;;; Get the Name property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Vendor name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetName, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Name)
        endmethod

        {ODataRoute("Vendors({key})/Street")}
        ;;; <summary>
        ;;; Get the Street property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Street address</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetStreet, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Street)
        endmethod

        {ODataRoute("Vendors({key})/City")}
        ;;; <summary>
        ;;; Get the City property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">City</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCity, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.City)
        endmethod

        {ODataRoute("Vendors({key})/State")}
        ;;; <summary>
        ;;; Get the State property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">State</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetState, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.State)
        endmethod

        {ODataRoute("Vendors({key})/ZipCode")}
        ;;; <summary>
        ;;; Get the ZipCode property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Zip Code</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetZipCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ZipCode)
        endmethod

        {ODataRoute("Vendors({key})/Contact")}
        ;;; <summary>
        ;;; Get the Contact property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Contact name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetContact, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Contact)
        endmethod

        {ODataRoute("Vendors({key})/Phone")}
        ;;; <summary>
        ;;; Get the Phone property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Phone number</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetPhone, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Phone)
        endmethod

        {ODataRoute("Vendors({key})/Fax")}
        ;;; <summary>
        ;;; Get the Fax property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Fax number</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetFax, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Fax)
        endmethod

        {ODataRoute("Vendors({key})/PaymentTermsCode")}
        ;;; <summary>
        ;;; Get the PaymentTermsCode property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Payment terms code</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetPaymentTermsCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.PaymentTermsCode)
        endmethod

        {ODataRoute("Vendors(VendorNumber={aVendorNumber})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a vendor.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Put, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
            {FromBody}
            required in aVendor, @Vendor
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aVendor.VendorNumber = aVendorNumber

            try
            begin
                ;;Add and commit
                data existing = DBContext.Vendors.Find(aVendorNumber)
                if(existing != ^null) then
                begin
                    aVendor.CopyTo(existing)
                end
                else
                begin
                    DBContext.Vendors.Add(aVendor)
                end
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("Vendors(VendorNumber={aVendorNumber})")}
        ;;; <summary>
        ;;; Patch  (partial update) a vendor.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Patch, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
            {FromBody}
            required in aVendor, @JsonPatchDocument<Vendor>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing vendor
            try
            begin
                ;;Get the vendor to be updated
                data vendorToUpdate = DBContext.Vendors.Find(aVendorNumber)

                ;;Did we find it?
                if(vendorToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the vendor we read
                aVendor.ApplyTo(vendorToUpdate)

                ;;Update and commit
                DBContext.Vendors.Update(vendorToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("Vendors(VendorNumber={aVendorNumber})")}
        ;;; <summary>
        ;;; Delete a vendor.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Delete, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
        proc
            ;;Get the vendor to be deleted
            data vendorToRemove = DBContext.Vendors.Find(aVendorNumber)

            ;;Did we find it?
            if (vendorToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.Vendors.Remove(vendorToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace