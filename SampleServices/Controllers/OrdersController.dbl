;;*****************************************************************************
;;
;; Title:       OrdersController.dbl
;;
;; Description: OData controller for the ORDERS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import SampleServices.Models
import Harmony.Core.Interface

namespace SampleServices.Controllers

    ;;; <summary>
    ;;; OData controller for Orders
    ;;; </summary>
    public class OrdersController extends ODataController
    
        public readwrite property DBContext, @SampleServices.DBContext
        public readwrite property KeyFactory, @IPrimaryKeyFactory

        ;;; <summary>
        ;;; Constructs a new instance of OrdersController
        ;;; </summary>
        ;;; <param name="dbContext">Database context</param>
        public method OrdersController
            dbContext, @SampleServices.DBContext
            keyFactory, @IPrimaryKeyFactory
        proc
            this.DBContext = dbContext
            this.KeyFactory = keyFactory
        endmethod

        {ODataRoute("Orders")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get all Orders
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get, @IActionResult
        proc
            mreturn Ok(DBContext.Orders)
        endmethod

        {ODataRoute("Orders(OrderNumber={aOrderNumber})")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get a single Order by primary key.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Get, @SingleResult<Order>
            {FromODataUri}
            required in aOrderNumber, int
        proc
            mreturn new SingleResult<Order>(DBContext.Orders.FindQuery<Order>(aOrderNumber))
        endmethod

        {ODataRoute("Orders(CustomerNumber={aCustomerNumber})")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get orders by alternate key key CustomerNumber.
        ;;; </summary>
        ;;; <param name="aCustomerNumber">Customer number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetByKeyCustomerNumber, @IActionResult
            {FromODataUri}
            required in aCustomerNumber, int
        proc
            data result = DBContext.Orders.FindAlternate("CustomerNumber",aCustomerNumber)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Orders(DateOrdered={aDateOrdered})")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get orders by alternate key key DateOrdered.
        ;;; </summary>
        ;;; <param name="aDateOrdered">Date ordered</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetByKeyDateOrdered, @IActionResult
            {FromODataUri}
            required in aDateOrdered, DateTime
        proc
            data result = DBContext.Orders.FindAlternate("DateOrdered",aDateOrdered)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Orders(DateCompleted={aDateCompleted})")}
        {EnableQuery(MaxExpansionDepth=3)}
        ;;; <summary>
        ;;; Get orders by alternate key key DateCompleted.
        ;;; </summary>
        ;;; <param name="aDateCompleted">Date order completed</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetByKeyDateCompleted, @IActionResult
            {FromODataUri}
            required in aDateCompleted, DateTime
        proc
            data result = DBContext.Orders.FindAlternate("DateCompleted",aDateCompleted)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Orders({key})/CustomerNumber")}
        ;;; <summary>
        ;;; Get the CustomerNumber property of a single Order, by primary key.
        ;;; </summary>
        ;;; <param name="key">Customer number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerNumber, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Orders.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.CustomerNumber)
        endmethod

        {ODataRoute("Orders({key})/PlacedBy")}
        ;;; <summary>
        ;;; Get the PlacedBy property of a single Order, by primary key.
        ;;; </summary>
        ;;; <param name="key">Order placed by</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetPlacedBy, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Orders.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.PlacedBy)
        endmethod

        {ODataRoute("Orders({key})/CustomerReference")}
        ;;; <summary>
        ;;; Get the CustomerReference property of a single Order, by primary key.
        ;;; </summary>
        ;;; <param name="key">Customer order reference</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCustomerReference, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Orders.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.CustomerReference)
        endmethod

        {ODataRoute("Orders({key})/PaymentTermsCode")}
        ;;; <summary>
        ;;; Get the PaymentTermsCode property of a single Order, by primary key.
        ;;; </summary>
        ;;; <param name="key">Payment terms code</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetPaymentTermsCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Orders.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.PaymentTermsCode)
        endmethod

        {ODataRoute("Orders({key})/DateOrdered")}
        ;;; <summary>
        ;;; Get the DateOrdered property of a single Order, by primary key.
        ;;; </summary>
        ;;; <param name="key">Date ordered</param>
        ;;; <returns>
        ;;; Returns a DateTime containing the value of the requested property.
        ;;;</returns>
        public method GetDateOrdered, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Orders.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.DateOrdered)
        endmethod

        {ODataRoute("Orders({key})/DateCompleted")}
        ;;; <summary>
        ;;; Get the DateCompleted property of a single Order, by primary key.
        ;;; </summary>
        ;;; <param name="key">Date order completed</param>
        ;;; <returns>
        ;;; Returns a DateTime containing the value of the requested property.
        ;;;</returns>
        public method GetDateCompleted, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Orders.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.DateCompleted)
        endmethod

        {ODataRoute("Orders({key})/Noname001")}
        ;;; <summary>
        ;;; Get the Noname001 property of a single Order, by primary key.
        ;;; </summary>
        ;;; <param name="key">Spare space</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetNoname001, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Orders.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Noname001)
        endmethod

        {ODataRoute("Orders")}
        ;;; <summary>
        ;;; Create a new order (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Post, @IActionResult
            {FromBody}
            required in aOrder, @Order
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Get the next available primary key value
            KeyFactory.AssignPrimaryKey(aOrder)

            ;;Add the new order
            DBContext.Orders.Add(aOrder)
            DBContext.SaveChanges()

            mreturn Created(aOrder)

        endmethod

        {ODataRoute("Orders(OrderNumber={aOrderNumber})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a order.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Put, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromBody}
            required in aOrder, @Order
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aOrder.OrderNumber = aOrderNumber

            try
            begin
                ;;Add and commit
                data existing = DBContext.Orders.Find(aOrderNumber)
                if(existing == ^null) then
                begin
                    DBContext.Orders.Add(aOrder)
                    DBContext.SaveChanges()
                    mreturn Created(aOrder)
                end
                else
                begin
                    aOrder.CopyTo(existing)
                    DBContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("Orders(OrderNumber={aOrderNumber})")}
        ;;; <summary>
        ;;; Patch  (partial update) a order.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Patch, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
            {FromBody}
            required in aOrder, @JsonPatchDocument<Order>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing order
            try
            begin
                ;;Get the order to be updated
                data orderToUpdate = DBContext.Orders.Find(aOrderNumber)

                ;;Did we find it?
                if(orderToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the order we read
                aOrder.ApplyTo(orderToUpdate)

                ;;Update and commit
                DBContext.Orders.Update(orderToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("Orders(OrderNumber={aOrderNumber})")}
        ;;; <summary>
        ;;; Delete a order.
        ;;; </summary>
        ;;; <param name="aOrderNumber">Order number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method Delete, @IActionResult
            {FromODataUri}
            required in aOrderNumber, int
        proc
            ;;Get the order to be deleted
            data orderToRemove = DBContext.Orders.Find(aOrderNumber)

            ;;Did we find it?
            if (orderToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.Orders.Remove(orderToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace