;;*****************************************************************************
;;
;; Title:       DbContext.dbl
;;
;; Type:        Class
;;
;; Description: OData DbContext class
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Microsoft.EntityFrameworkCore
import System.Linq.Expressions
import SampleServices.Models

namespace SampleServices

	;;; <summary>
	;;; 
	;;; </summary>
	public class DbContext extends Microsoft.EntityFrameworkCore.DbContext
	
		mDataProvider, @IDataObjectProvider

		;;; <summary>
		;;; Construct a new DbContext.
		;;; </summary>
		public method DbContext
			options, @DbContextOptions<DbContext>
			dataProvider, @IDataObjectProvider
			endparams
			parent(options)
		proc
			mDataProvider = dataProvider
		endmethod

		;;; <summary>
		;;; Exposes Customer data.
		;;; </summary>
		public readwrite property Customers, @DbSet<Customer>

		;;; <summary>
		;;; Exposes Order data.
		;;; </summary>
		public readwrite property Orders, @DbSet<Order>

		;;; <summary>
		;;; Exposes Plant data.
		;;; </summary>
		public readwrite property Plants, @DbSet<Plant>

		;;; <summary>
		;;; Exposes Vendor data.
		;;; </summary>
		public readwrite property Vendors, @DbSet<Vendor>

		;;; <summary>
		;;; 
		;;; </summary>
		protected override method OnConfiguring, void
			opts, @DbContextOptionsBuilder
		proc
			HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, mDataProvider, this)
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		protected override method OnModelCreating, void
			parm, @ModelBuilder
		proc
			parm.Ignore(^typeof(AlphaDesc))
			parm.Ignore(^typeof(DataObjectMetadataBase))

.region "Tag filtering"

			;;This will currently only work for single field==value tags.

			data customerParam = Expression.Parameter(^typeof(customer))
			parm.Entity(^typeof(customer)).HasQueryFilter(Expression.Lambda(Expression.Block(Expression.Equal(Expression.Call(^typeof(EF), "Property", new Type[#] { ^typeof(int) }, customerParam, Expression.Constant("CustRtype")), Expression.Constant(0))), new ParameterExpression[#] { customerParam }))

			data vendorParam = Expression.Parameter(^typeof(vendor))
			parm.Entity(^typeof(vendor)).HasQueryFilter(Expression.Lambda(Expression.Block(Expression.Equal(Expression.Call(^typeof(EF), "Property", new Type[#] { ^typeof(int) }, vendorParam, Expression.Constant("VendRtype")), Expression.Constant(1))), new ParameterExpression[#] { vendorParam }))

.endregion

.define INCLUDE_RELATIONS
.ifdef INCLUDE_RELATIONS
.region "Relationships to other structures"

	        ;; One to many relationship from structure Customer key CUSTOMER to structure Orders key CUSTOMER with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Customer)).HasMany(^typeof(Order),"REL_Orders").WithOne("REL_Customer").HasForeignKey("Customer")

	        ;; One to one relationship from structure Customer key ITEM to structure Plants key ITEM without a backward relationship
			;TODO: Code needed here!!!

	        ;; One to one relationship from structure Order key VENDOR to structure Vendors.VENDOR with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Order)).HasOne(^typeof(Vendor),"REL_Vendor").WithMany("REL_Orders").HasForeignKey("Vendor")

	        ;; One to one relationship from structure Order key CUSTOMER to structure Customers.CUSTOMER with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Order)).HasOne(^typeof(Customer),"REL_Customer").WithMany("REL_Orders").HasForeignKey("Customer")

	        ;; One to one relationship from structure Order key ITEM to structure Plants.ITEM with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Order)).HasOne(^typeof(Plant),"REL_Item").WithMany("REL_Orders").HasForeignKey("Item")

	        ;; One to one relationship from structure Order key TAG_CUSTOMER to structure Customers key TAG_CUSTOMER without a backward relationship
			;TODO: Code needed here!!!

	        ;; One to one relationship from structure Order key TAG_VENDOR to structure Vendors key TAG_VENDOR without a backward relationship
			;TODO: Code needed here!!!

	        ;; One to one relationship from structure Plant key VENDOR to structure Vendors.VENDOR with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Plant)).HasOne(^typeof(Vendor),"REL_Vendor").WithMany("REL_Plants").HasForeignKey("Vendor")

	        ;; One to many relationship from structure Plant key ITEM to structure Orders key ITEM with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Plant)).HasMany(^typeof(Order),"REL_Orders").WithOne("REL_Item").HasForeignKey("Item")

	        ;; One to many relationship from structure Vendor key VENDOR to structure Plants key VENDOR with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Vendor)).HasMany(^typeof(Plant),"REL_Plants").WithOne("REL_Vendor").HasForeignKey("Vendor")

	        ;; One to many relationship from structure Vendor key VENDOR to structure Orders key VENDOR with a backward relationship
			;TODO: HasForeignKey needs to be the name of the FIELD associated with the key in the other structure!
			parm.Entity(^typeof(Vendor)).HasMany(^typeof(Order),"REL_Orders").WithOne("REL_Vendor").HasForeignKey("Vendor")

.endregion
.endc
			parent.OnModelCreating(parm)

		endmethod

	endclass

endnamespace