;;*****************************************************************************
;;
;; Title:       DbContext.dbl
;;
;; Type:        Class
;;
;; Description: OData DbContext class
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Microsoft.EntityFrameworkCore
import System.Linq.Expressions
import SampleServices.Models
import Microsoft.Extensions.Logging
import Microsoft.Extensions.Logging.Console

namespace SampleServices

	;;; <summary>
	;;; 
	;;; </summary>
	public class DbContext extends Microsoft.EntityFrameworkCore.DbContext
	
		mDataProvider, @IDataObjectProvider

		;;; <summary>
		;;; Construct a new DbContext.
		;;; </summary>
		public method DbContext
			options, @DbContextOptions<DbContext>
			dataProvider, @IDataObjectProvider
			endparams
			parent(options)
		proc
			mDataProvider = dataProvider
		endmethod

		;;; <summary>
		;;; Exposes Customer data.
		;;; </summary>
		public readwrite property Customers, @DbSet<Customer>

		;;; <summary>
		;;; Exposes Order data.
		;;; </summary>
		public readwrite property Orders, @DbSet<Order>

		;;; <summary>
		;;; Exposes Plant data.
		;;; </summary>
		public readwrite property Plants, @DbSet<Plant>

		;;; <summary>
		;;; Exposes Vendor data.
		;;; </summary>
		public readwrite property Vendors, @DbSet<Vendor>

		private method ShouldItBeLogged, boolean
			str, @string
			level, LogLevel
		proc
			mreturn true
		endmethod
		;;; <summary>
		;;; 
		;;; </summary>
		protected override method OnConfiguring, void
			opts, @DbContextOptionsBuilder
		proc
			HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, mDataProvider, this)
;			lambda ShouldItBeLogged(p1, p2) 
;			begin
;				mreturn true
;			end
			opts.UseLoggerFactory(new LoggerFactory(new ILoggerProvider[#] { new ConsoleLoggerProvider(ShouldItBeLogged, true)}))
		endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		protected override method OnModelCreating, void
			parm, @ModelBuilder
		proc
			parm.Ignore(^typeof(AlphaDesc))
			parm.Ignore(^typeof(DataObjectMetadataBase))

.region "Tag filtering"

			;;This will currently only work for single field==value tags.

			data customerParam = Expression.Parameter(^typeof(customer))

			parm.Entity(^typeof(customer))
			&	.HasQueryFilter
			&	(
			&		Expression.Lambda
			&		(
			&			Expression.Block
			&			(
			&				Expression.Equal
			&				(
			&					Expression.Call
			&					(
			&						^typeof(EF),
			&						"Property",
			&						new Type[#] { ^typeof(int) },
			&						customerParam,
			&						Expression.Constant("CustRtype")
			&					),
			&					Expression.Constant(0)
			&				)
			&			),
			&			new ParameterExpression[#] { customerParam }
			&		)
			&	)

			data vendorParam = Expression.Parameter(^typeof(vendor))

			parm.Entity(^typeof(vendor))
			&	.HasQueryFilter
			&	(
			&		Expression.Lambda
			&		(
			&			Expression.Block
			&			(
			&				Expression.Equal
			&				(
			&					Expression.Call
			&					(
			&						^typeof(EF),
			&						"Property",
			&						new Type[#] { ^typeof(int) },
			&						vendorParam,
			&						Expression.Constant("VendRtype")
			&					),
			&					Expression.Constant(1)
			&				)
			&			),
			&			new ParameterExpression[#] { vendorParam }
			&		)
			&	)

.endregion

.define INCLUDE_RELATIONS
.ifdef INCLUDE_RELATIONS
.region "Entity Relationships"

			;;--------------------------------------
			;; Relationships from CUSTOMER

	        ;; CUSTOMER.CUSTOMER (one) --> (many) --> (one) ORDER.CUSTOMER
			;;    Type          : D
			;;    From segments : CUST_KEY(D6) 
			;;    To segments   : OR_CUSTOMER(D6) 

			parm.Entity(^typeof(Customer))
			&	.HasMany(^typeof(Order),"REL_Orders")
			&	.WithOne("REL_Customer")
			&	.HasForeignKey("OrCustomer")
			&	.HasPrincipalKey("CustKey")

	        ;; CUSTOMER.ITEM (one) --> (one) PLANT.ITEM
			;;    Type          : C
			;;    From segments : CUST_GIFT(D6) 
			;;    To segments   : IN_ITEMID(D6) 

			parm.Entity(^typeof(Customer))
			&	.HasOne(^typeof(Plant),"REL_Item")
			&	.WithOne(^null)
			&	.HasForeignKey(^typeof(Plant),"CustGift")
			&	.HasPrincipalKey(^typeof(Plant), "InItemid")

			;;--------------------------------------
			;; Relationships from ORDER

	        ;; ORDER.VENDOR (one) --> (one) --> (many) VENDOR.VENDOR
			;;    Type          : A
			;;    From segments : OR_VENDOR(D6) 
			;;    To segments   : VEND_KEY(D6) 

			parm.Entity(^typeof(Order))
			&	.HasOne(^typeof(Vendor),"REL_Vendor")
			&	.WithMany("REL_Orders")
			&	.HasForeignKey("OrVendor")
			&	.HasPrincipalKey("VendKey")

	        ;; ORDER.CUSTOMER (one) --> (one) --> (many) CUSTOMER.CUSTOMER
			;;    Type          : A
			;;    From segments : OR_CUSTOMER(D6) 
			;;    To segments   : CUST_KEY(D6) 

			parm.Entity(^typeof(Order))
			&	.HasOne(^typeof(Customer),"REL_Customer")
			&	.WithMany("REL_Orders")
			&	.HasForeignKey("OrCustomer")
			&	.HasPrincipalKey("CustKey")

	        ;; ORDER.ITEM (one) --> (one) --> (many) PLANT.ITEM
			;;    Type          : A
			;;    From segments : OR_ITEM(D6) 
			;;    To segments   : IN_ITEMID(D6) 

			parm.Entity(^typeof(Order))
			&	.HasOne(^typeof(Plant),"REL_Item")
			&	.WithMany("REL_Orders")
			&	.HasForeignKey("OrItem")
			&	.HasPrincipalKey("InItemid")

	        ;; ORDER.TAG_CUSTOMER (one) --> (one) CUSTOMER.TAG_CUSTOMER
			;;    Type          : C
			;;    From segments : Literal(0), OR_CUSTOMER(D6) 
			;;    To segments   : CUST_RTYPE(D1), CUST_KEY(D6) 

			parm.Entity(^typeof(Order))
			&	.HasOne(^typeof(Customer),"REL_TagCustomer")
			&	.WithOne(^null)
			&	.HasForeignKey(^typeof(Customer),"TagCustomerLiteral1","OrCustomer")
			&	.HasPrincipalKey(^typeof(Customer), "CustRtype","CustKey")

	        ;; ORDER.TAG_VENDOR (one) --> (one) VENDOR.TAG_VENDOR
			;;    Type          : C
			;;    From segments : Literal(1), OR_VENDOR(D6) 
			;;    To segments   : VEND_RTYPE(D1), VEND_KEY(D6) 

			parm.Entity(^typeof(Order))
			&	.HasOne(^typeof(Vendor),"REL_TagVendor")
			&	.WithOne(^null)
			&	.HasForeignKey(^typeof(Vendor),"TagVendorLiteral1","OrVendor")
			&	.HasPrincipalKey(^typeof(Vendor), "VendRtype","VendKey")

			;;--------------------------------------
			;; Relationships from PLANT

	        ;; PLANT.VENDOR (one) --> (one) --> (many) VENDOR.VENDOR
			;;    Type          : A
			;;    From segments : IN_SOURCE(D6) 
			;;    To segments   : VEND_KEY(D6) 

			parm.Entity(^typeof(Plant))
			&	.HasOne(^typeof(Vendor),"REL_Vendor")
			&	.WithMany("REL_Plants")
			&	.HasForeignKey("InSource")
			&	.HasPrincipalKey("VendKey")

	        ;; PLANT.ITEM (one) --> (many) --> (one) ORDER.ITEM
			;;    Type          : D
			;;    From segments : IN_ITEMID(D6) 
			;;    To segments   : OR_ITEM(D6) 

			parm.Entity(^typeof(Plant))
			&	.HasMany(^typeof(Order),"REL_Orders")
			&	.WithOne("REL_Item")
			&	.HasForeignKey("OrItem")
			&	.HasPrincipalKey("InItemid")

			;;--------------------------------------
			;; Relationships from VENDOR

	        ;; VENDOR.VENDOR (one) --> (many) --> (one) PLANT.VENDOR
			;;    Type          : D
			;;    From segments : VEND_KEY(D6) 
			;;    To segments   : IN_SOURCE(D6) 

			parm.Entity(^typeof(Vendor))
			&	.HasMany(^typeof(Plant),"REL_Plants")
			&	.WithOne("REL_Vendor")
			&	.HasForeignKey("InSource")
			&	.HasPrincipalKey("VendKey")

	        ;; VENDOR.VENDOR (one) --> (many) --> (one) ORDER.VENDOR
			;;    Type          : D
			;;    From segments : VEND_KEY(D6) 
			;;    To segments   : OR_VENDOR(D6) 

			parm.Entity(^typeof(Vendor))
			&	.HasMany(^typeof(Order),"REL_Orders")
			&	.WithOne("REL_Vendor")
			&	.HasForeignKey("OrVendor")
			&	.HasPrincipalKey("VendKey")

.endregion
.endc
			parent.OnModelCreating(parm)

		endmethod

	endclass

endnamespace