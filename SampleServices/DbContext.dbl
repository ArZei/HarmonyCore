;;*****************************************************************************
;;
;; Title:       DbContext.dbl
;;
;; Type:        Class
;;
;; Description: OData DbContext class
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2018, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Microsoft.EntityFrameworkCore
import System.Linq.Expressions
import SampleServices.Models

namespace SampleServices

	;;; <summary>
	;;; 
	;;; </summary>
	public class DbContext extends Microsoft.EntityFrameworkCore.DbContext

		;;; <summary>
		;;; Construct a new DbContext.
		;;; </summary>
		public method DbContext
			options, @DbContextOptions<DbContext>
			endparams
			parent(options)
		proc

		endmethod

		;;; <summary>
		;;; Exposes Customer data.
		;;; </summary>
		public readwrite property Customers, @DbSet<Customer>

		;;; <summary>
		;;; Exposes Item data.
		;;; </summary>
		public readwrite property Items, @DbSet<Item>

		;;; <summary>
		;;; Exposes Order data.
		;;; </summary>
		public readwrite property Orders, @DbSet<Order>

		;;; <summary>
		;;; Exposes OrderItem data.
		;;; </summary>
		public readwrite property OrderItems, @DbSet<OrderItem>

		;;; <summary>
		;;; Exposes Vendor data.
		;;; </summary>
		public readwrite property Vendors, @DbSet<Vendor>

		;;; <summary>
		;;; 
		;;; </summary>
		protected override method OnModelCreating, void
			parm, @ModelBuilder
		proc
			parm.Ignore(^typeof(AlphaDesc))
			parm.Ignore(^typeof(DataObjectMetadataBase))

.region "Composite key definitions"

			;;Entities with a single primary key segment have the key declared to EF via a
			;;{Key} attribute on the appropriate property in the data model, but only one {key}
			;;attribute can be used in a class, so keys with multiple segments are defined
			;;using the "Fluent API" here.

			parm.Entity<OrderItem>().HasKey("OrderNumber","ItemNumber")

.endregion

.region "Tag filtering"

			;;This will currently only work for single field==value tags.

			data customerParam = Expression.Parameter(^typeof(customer))

			parm.Entity(^typeof(customer))
			&	.HasQueryFilter
			&	(
			&		Expression.Lambda
			&		(
			&			Expression.Block
			&			(
			&				Expression.Equal
			&				(
			&					Expression.Call
			&					(
			&						^typeof(EF),
			&						"Property",
			&						new Type[#] { ^typeof(int) },
			&						customerParam,
			&						Expression.Constant("RecordType")
			&					),
			&					Expression.Constant(0)
			&				)
			&			),
			&			new ParameterExpression[#] { customerParam }
			&		)
			&	)

			data vendorParam = Expression.Parameter(^typeof(vendor))

			parm.Entity(^typeof(vendor))
			&	.HasQueryFilter
			&	(
			&		Expression.Lambda
			&		(
			&			Expression.Block
			&			(
			&				Expression.Equal
			&				(
			&					Expression.Call
			&					(
			&						^typeof(EF),
			&						"Property",
			&						new Type[#] { ^typeof(int) },
			&						vendorParam,
			&						Expression.Constant("RecordType")
			&					),
			&					Expression.Constant(1)
			&				)
			&			),
			&			new ParameterExpression[#] { vendorParam }
			&		)
			&	)

.endregion

.define INCLUDE_RELATIONS
.ifdef INCLUDE_RELATIONS
.region "Entity Relationships"

			;;--------------------------------------
			;; Relationships from CUSTOMER

	        ;; CUSTOMER.CUSTOMER_NUMBER (one) --> (many) --> (one) ORDER.CUSTOMER_NUMBER
			;;    Type          : D
			;;    From segments : CUSTOMER_NUMBER(D6) 
			;;    To segments   : CUSTOMER_NUMBER(D6) 

			parm.Entity(^typeof(Customer))
			&	.HasMany(^typeof(Order),"REL_Orders")
			&	.WithOne("REL_CustomerNumber")
			&	.HasForeignKey("CustomerNumber")
			&	.HasPrincipalKey("CustomerNumber")

	        ;; CUSTOMER.FAVORITE_ITEM (one) --> (one) ITEM.ITEM_NUMBER
			;;    Type          : C
			;;    From segments : FAVORITE_ITEM(D6) 
			;;    To segments   : ITEM_NUMBER(D6) 

			parm.Entity(^typeof(Customer))
			&	.HasOne(^typeof(Item),"REL_FavoriteItem")
			&	.WithOne(^null)
			&	.HasForeignKey(^typeof(Customer),"FavoriteItem")
			&	.HasPrincipalKey(^typeof(Item), "ItemNumber")

			;;--------------------------------------
			;; Relationships from ITEM

	        ;; ITEM.VENDOR_NUMBER (one) --> (one) --> (many) VENDOR.VENDOR_NUMBER
			;;    Type          : A
			;;    From segments : VENDOR_NUMBER(D6) 
			;;    To segments   : VENDOR_NUMBER(D6) 

			parm.Entity(^typeof(Item))
			&	.HasOne(^typeof(Vendor),"REL_VendorNumber")
			&	.WithMany("REL_Items")
			&	.HasForeignKey("VendorNumber")
			&	.HasPrincipalKey("VendorNumber")

	        ;; ITEM.ITEM_NUMBER (one) --> (many) --> (one) ORDER_ITEM.ITEM_ORDERED
			;;    Type          : D
			;;    From segments : ITEM_NUMBER(D6) 
			;;    To segments   : ITEM_ORDERED(D6) 

			parm.Entity(^typeof(Item))
			&	.HasMany(^typeof(OrderItem),"REL_OrderItems")
			&	.WithOne("REL_ItemOrdered")
			&	.HasForeignKey("ItemOrdered")
			&	.HasPrincipalKey("ItemNumber")

			;;--------------------------------------
			;; Relationships from ORDER

	        ;; ORDER.ORDER_NUMBER (one) --> (many) --> (one) ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM
			;;    Type          : D
			;;    From segments : ORDER_NUMBER(D6) 
			;;    To segments   : ORDER_NUMBER(D6) 

			parm.Entity(^typeof(Order))
			&	.HasMany(^typeof(OrderItem),"REL_OrderItems")
			&	.WithOne("REL_OrderNumberAndLineItem")
			&	.HasForeignKey("OrderNumber")
			&	.HasPrincipalKey("OrderNumber")

	        ;; ORDER.CUSTOMER_NUMBER (one) --> (one) --> (many) CUSTOMER.CUSTOMER_NUMBER
			;;    Type          : A
			;;    From segments : CUSTOMER_NUMBER(D6) 
			;;    To segments   : CUSTOMER_NUMBER(D6) 

			parm.Entity(^typeof(Order))
			&	.HasOne(^typeof(Customer),"REL_CustomerNumber")
			&	.WithMany("REL_Orders")
			&	.HasForeignKey("CustomerNumber")
			&	.HasPrincipalKey("CustomerNumber")

			;;--------------------------------------
			;; Relationships from ORDER_ITEM

	        ;; ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM (one) --> (one) --> (many) ORDER.ORDER_NUMBER
			;;    Type          : A
			;;    From segments : ORDER_NUMBER(D6) 
			;;    To segments   : ORDER_NUMBER(D6) 

			parm.Entity(^typeof(OrderItem))
			&	.HasOne(^typeof(Order),"REL_OrderNumberAndLineItem")
			&	.WithMany("REL_OrderItems")
			&	.HasForeignKey("OrderNumber")
			&	.HasPrincipalKey("OrderNumber")

	        ;; ORDER_ITEM.ITEM_ORDERED (one) --> (one) --> (many) ITEM.ITEM_NUMBER
			;;    Type          : A
			;;    From segments : ITEM_ORDERED(D6) 
			;;    To segments   : ITEM_NUMBER(D6) 

			parm.Entity(^typeof(OrderItem))
			&	.HasOne(^typeof(Item),"REL_ItemOrdered")
			&	.WithMany("REL_OrderItems")
			&	.HasForeignKey("ItemOrdered")
			&	.HasPrincipalKey("ItemNumber")

			;;--------------------------------------
			;; Relationships from VENDOR

	        ;; VENDOR.VENDOR_NUMBER (one) --> (many) --> (one) ITEM.VENDOR_NUMBER
			;;    Type          : D
			;;    From segments : VENDOR_NUMBER(D6) 
			;;    To segments   : VENDOR_NUMBER(D6) 

			parm.Entity(^typeof(Vendor))
			&	.HasMany(^typeof(Item),"REL_Items")
			&	.WithOne("REL_VendorNumber")
			&	.HasForeignKey("VendorNumber")
			&	.HasPrincipalKey("VendorNumber")

.endregion
.endc
			parent.OnModelCreating(parm)

		endmethod

	endclass

endnamespace