;;*****************************************************************************
;;
;; Title:       VendorMetaData.dbl
;;
;; Type:        Class
;;
;; Description: Defines meta data associated with a data object Vendor.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

	.include "VENDORS" repository  , structure="strVendor", end

	;;; <summary>
	;;; 
	;;; </summary>
	public partial class VendorMetadata extends DataObjectMetadataBase
		
		;;; <summary>
		;;; Constructs an new VendorMetadata object.
		;;; </summary>
		public method VendorMetadata
		proc
			RPSStructureName = "VENDORS"
			RPSStructureSize = ^size(strVendor)
			AddFieldInfo("VendKey", "DECIMAL", 6, 1, 0, false)
			AddFieldInfo("VendRtype", "DECIMAL", 1, 7, 0, false)
			AddFieldInfo("VendName", "ALPHA", 30, 8, 0, false)
			AddFieldInfo("VendStreet", "ALPHA", 25, 38, 0, false)
			AddFieldInfo("VendCity", "ALPHA", 20, 63, 0, false)
			AddFieldInfo("VendState", "ALPHA", 2, 83, 0, false)
			AddFieldInfo("VendZip", "DECIMAL", 9, 85, 0, false)
			AddFieldInfo("VendContact", "ALPHA", 25, 94, 0, false)
			AddFieldInfo("VendTelephone", "DECIMAL", 10, 119, 0, false)
			AddFieldInfo("VendFax", "DECIMAL", 10, 129, 0, false)
			AddFieldInfo("VendTerms", "ALPHA", 24, 139, 0, false)
		endmethod
	
		;;; <summary>
		;;; Returns a new Vendor object containing data from a record and a GRFA.
		;;; The related data properties (REL_Plants and REL_Orders) will not be populated.
		;;; </summary>
		;;; <param name="dataArea">The record containing the data for the new Vendor object.</param>
		;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
		;;; <returns></returns>
		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
		proc
			mreturn new Vendor((strVendor)dataArea) { GlobalRFA = grfa }
		endmethod

		;;; <summary>
		;;; Returns a new Vendor object containing data from a record and a GRFA.
		;;; The related data properties (REL_Plants and REL_Orders) will be populated.
		;;; </summary>
		;;; <param name="dataArea">The record containing the data for the new Vendor object.</param>
		;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
		;;; <param name="joinedObjects">Data to allow the related data properties (REL_Plants and REL_Orders) to be populated.</param>
		;;; <returns></returns>
		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
			required in joinedObjects, [#]KeyValuePair<String, Object>
		proc
			data newVendor = new Vendor((strVendor)dataArea) { GlobalRFA = grfa }
			data joinedObject, KeyValuePair<String, Object>
			foreach joinedObject in joinedObjects
			begin
				using joinedObject.Key select
				("REL_Plants"), 
					newVendor.REL_Plants = (@ICollection<Plant>)joinedObject.Value
				("REL_Orders"), 
					newVendor.REL_Orders = (@ICollection<Order>)joinedObject.Value
				endusing
			end

			mreturn newVendor

		endmethod
		public override method FormatKeyLiteral, a
			keyNumber, int
			parts, @Dictionary<string, Object>
		proc
			mreturn ""
		endmethod
	endclass

endnamespace

