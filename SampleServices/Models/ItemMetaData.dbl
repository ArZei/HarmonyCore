;;*****************************************************************************
;;
;; Title:       ItemMetaData.dbl
;;
;; Type:        Class
;;
;; Description: Defines meta data associated with a Item model.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

	.include "ITEMS" repository, public structure="strItem", end

	;;; <summary>
	;;; Exposes metadata relating to the Item model class.
	;;; </summary>
	public partial class ItemMetadata extends DataObjectMetadataBase
		
		;;; <summary>
		;;; Constructs an new ItemMetadata object.
		;;; </summary>
		public method ItemMetadata
		proc
			RPSStructureName = "ITEMS"
			RPSStructureSize = ^size(strItem)

			AddFieldInfo("ItemNumber", "DECIMAL", 6, 1, 0, false)
			AddFieldInfo("VendorNumber", "DECIMAL", 6, 7, 0, false)
			AddFieldInfo("Size", "DECIMAL", 3, 13, 0, false)
			AddFieldInfo("CommonName", "ALPHA", 30, 16, 0, false)
			AddFieldInfo("LatinName", "ALPHA", 30, 46, 0, false)
			AddFieldInfo("ZoneCode", "DECIMAL", 1, 76, 0, false)
			AddFieldInfo("Type", "DECIMAL", 1, 77, 0, false)
			AddFieldInfo("Flowering", "ALPHA", 1, 78, 0, false)
			AddFieldInfo("FlowerColor", "ALPHA", 6, 79, 0, false)
			AddFieldInfo("Shape", "ALPHA", 10, 85, 0, false)
			AddFieldInfo("MaxHeight", "DECIMAL", 3, 95, 0, false)
			AddFieldInfo("MaxWidth", "DECIMAL", 3, 98, 0, false)
			AddFieldInfo("WaterRequirement", "ALPHA", 4, 101, 0, false)
			AddFieldInfo("SunRequirement", "ALPHA", 6, 105, 0, false)
			AddFieldInfo("BinLocation", "ALPHA", 3, 111, 0, false)
			AddFieldInfo("QtyOnHand", "DECIMAL", 6, 114, 0, false)
			AddFieldInfo("QtyAllocated", "DECIMAL", 6, 120, 0, false)
			AddFieldInfo("QtyOnOrder", "DECIMAL", 6, 126, 0, false)
			AddFieldInfo("ReorderLevel", "DECIMAL", 6, 132, 0, false)
			AddFieldInfo("UnitPrice", "IMPLIED", 7, 138, 02, false)
			AddFieldInfo("CostPrice", "IMPLIED", 7, 145, 02, false)
			AddFieldInfo("REL_VendorNumber", "DATAOBJECT", 0, 0, 0, false)
			AddFieldInfo("REL_OrderItems", "COLLECTION", 0, 0, 0, false)

			AddKeyInfo(0, "ItemNumber")
			AddKeyInfo(1, "VendorNumber")
			AddKeyInfo(2, "FlowerColor")
			AddKeyInfo(3, "Size")
			AddKeyInfo(4, "CommonName")

		endmethod
	
		;;; <summary>
		;;; Returns a new Item object containing data from a record and a GRFA.
		;;; The related data properties (REL_VendorNumber and REL_OrderItems) will not be populated.
		;;; </summary>
		;;; <param name="dataArea">The record containing the data for the new Item object.</param>
		;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
		;;; <returns></returns>
		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
		proc
			mreturn new Item((strItem)dataArea) { GlobalRFA = grfa }
		endmethod

		;;; <summary>
		;;; Returns a new Item object containing data from a record and a GRFA.
		;;; The related data properties (REL_VendorNumber and REL_OrderItems) will be populated.
		;;; </summary>
		;;; <param name="dataArea">The record containing the data for the new Item object.</param>
		;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
		;;; <param name="joinedObjects">Data to allow the related data properties (REL_VendorNumber and REL_OrderItems) to be populated.</param>
		;;; <returns></returns>
		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
			required in joinedObjects, [#]KeyValuePair<String, Object>
		proc
			data newItem = new Item((strItem)dataArea) { GlobalRFA = grfa }
			data joinedObject, KeyValuePair<String, Object>
			foreach joinedObject in joinedObjects
			begin
				using joinedObject.Key select
				("REL_VendorNumber"), 
					newItem.REL_VendorNumber = (@Vendor)joinedObject.Value
				("REL_OrderItems"), 
					newItem.REL_OrderItems = (@ICollection<OrderItem>)joinedObject.Value
				endusing
			end

			mreturn newItem

		endmethod

		;;; <summary>
		;;; Formats a literal value for a key lookup.
		;;; </summary>
		;;; <param name="keyNumber">Key number.</param>
		;;; <param name="parts">Dictionary containing key segment names and values.</param>
		;;; <returns></returns>
		public override method FormatKeyLiteral, a
			required in keyNumber, int
			required in parts, @Dictionary<String, Object>
			endparams
			stack record key0
				ItemNumber, D6
			endrecord
			stack record key1
				VendorNumber, D6
			endrecord
			stack record key2
				FlowerColor, A6
			endrecord
			stack record key3
				Size, D3
			endrecord
			stack record key4
				CommonName, A30
			endrecord
		proc
			data startPos = 0
			data segValueLength, int
			using keyNumber select
			(0),
			begin
				if((segValueLength=KeyValueHelper(key0.ItemNumber, "ItemNumber", parts))<6)
					mreturn key0(1:startPos+segValueLength)
				mreturn key0
			end
			(1),
			begin
				if((segValueLength=KeyValueHelper(key1.VendorNumber, "VendorNumber", parts))<6)
					mreturn key1(1:startPos+segValueLength)
				mreturn key1
			end
			(2),
			begin
				if((segValueLength=KeyValueHelper(key2.FlowerColor, "FlowerColor", parts))<6)
					mreturn key2(1:startPos+segValueLength)
				mreturn key2
			end
			(3),
			begin
				if((segValueLength=KeyValueHelper(key3.Size, "Size", parts))<3)
					mreturn key3(1:startPos+segValueLength)
				mreturn key3
			end
			(4),
			begin
				if((segValueLength=KeyValueHelper(key4.CommonName, "CommonName", parts))<30)
					mreturn key4(1:startPos+segValueLength)
				mreturn key4
			end
			endusing

			throw new ApplicationException(String.Format("Invalid key number {0} encountered in ItemMetadata.FormatKeyLiteral",keyNumber))

		endmethod

	endclass

endnamespace
