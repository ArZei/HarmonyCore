;;*****************************************************************************
;;
;; Title:       Vendor.dbl
;;
;; Type:        Class
;;
;; Description: Data object representing data defined by the repository
;;              structure VENDORS and from the data file ICSTUT:customer.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

	.include "VENDORS" repository  , structure="strVendor", end

    public partial class Vendor extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strVendor 
		private mOriginalSynergyData, strVendor 
		
		private static sMetadata, @VendorMetadata

.region "Constructors"

		static method Vendor
		proc
			sMetadata = new VendorMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Vendor), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Vendor
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Vendor
			required in inData, strVendor
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

.endregion

.region "Public properties for fields"

		;;; <summary>
		;;; Vendor ID
		;;; </summary>
		{Key}
		public property VendKey, int
			method get
			proc
				mreturn (int)mSynergyData.Vend_key
            endmethod
			method set
			proc
				mSynergyData.Vend_key = value
			endmethod
		endproperty

		;;; <summary>
		;;; Record Type
		;;; </summary>
		public property VendRtype, int
			method get
			proc
				mreturn (int)mSynergyData.Vend_rtype
            endmethod
			method set
			proc
				mSynergyData.Vend_rtype = value
			endmethod
		endproperty

		;;; <summary>
		;;; Vendor Name
		;;; </summary>
		{StringLength(30, ErrorMessage="Vendor Name cannot exceed 30 characters. ")}
		public property VendName, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Vend_name, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Vend_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Street Address
		;;; </summary>
		{StringLength(25, ErrorMessage="Street Address cannot exceed 25 characters. ")}
		public property VendStreet, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Vend_street, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Vend_street = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; City
		;;; </summary>
		{StringLength(20, ErrorMessage="City cannot exceed 20 characters. ")}
		public property VendCity, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Vend_city, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Vend_city = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; State
		;;; </summary>
		{StringLength(2, ErrorMessage="State cannot exceed 2 characters. ")}
		public property VendState, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Vend_state, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Vend_state = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Zip Code
		;;; </summary>
		public property VendZip, int
			method get
			proc
				mreturn (int)mSynergyData.Vend_zip
            endmethod
			method set
			proc
				mSynergyData.Vend_zip = value
			endmethod
		endproperty

		;;; <summary>
		;;; Contact Person
		;;; </summary>
		{StringLength(25, ErrorMessage="Contact Person cannot exceed 25 characters. ")}
		public property VendContact, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Vend_contact, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Vend_contact = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Phone number
		;;; </summary>
		public property VendTelephone, long
			method get
			proc
				mreturn (long)mSynergyData.Vend_telephone
            endmethod
			method set
			proc
				mSynergyData.Vend_telephone = value
			endmethod
		endproperty

		;;; <summary>
		;;; Fax Number
		;;; </summary>
		public property VendFax, long
			method get
			proc
				mreturn (long)mSynergyData.Vend_fax
            endmethod
			method set
			proc
				mSynergyData.Vend_fax = value
			endmethod
		endproperty

		;;; <summary>
		;;; Terms & Conditions
		;;; </summary>
		{StringLength(24, ErrorMessage="Terms & Conditions cannot exceed 24 characters. ")}
		public property VendTerms, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Vend_terms, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Vend_terms = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

.endregion

.define INCLUDE_RELATIONS
.ifdef INCLUDE_RELATIONS
.region "Public properties for relationships to other data"

		;;; <summary>
		;;; One to many relationship from structure Vendor key VENDOR to structure Plants key VENDOR with a backward relationship
		;;; </summary>
		public readwrite property REL_Plants, @ICollection<Plant>

		;;; <summary>
		;;; One to many relationship from structure Vendor key VENDOR to structure Orders key VENDOR with a backward relationship
		;;; </summary>
		public readwrite property REL_Orders, @ICollection<Order>

.endregion
.endc

.region "Other public properties"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

.endregion

.region "Public methods"

		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

.endregion

	endclass
	
endnamespace

