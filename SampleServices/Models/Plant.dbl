;;*****************************************************************************
;;
;; Title:       Plant.dbl
;;
;; Type:        Class
;;
;; Description: Data object representing data defined by the repository
;;              structure PLANTS and from the data file ICSTUT:plitem.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

	.include "PLANTS" repository  , structure="strPlant", end

    public partial class Plant extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strPlant 
		private mOriginalSynergyData, strPlant 
		
		private static sMetadata, @PlantMetadata

		static method Plant
		proc
			sMetadata = new PlantMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Plant), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Plant
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Plant
			required in inData, strPlant
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
        ;;Expose fields as properties for data binding

		{Key}
        ;;In_itemid
		public property In_itemid, int
			method get
			proc
				mreturn (int)mSynergyData.In_itemid
            endmethod
			method set
			proc
				mSynergyData.In_itemid = value
			endmethod
		endproperty
        ;;In_source
		public property In_source, int
			method get
			proc
				mreturn (int)mSynergyData.In_source
            endmethod
			method set
			proc
				mSynergyData.In_source = value
			endmethod
		endproperty
        ;;In_size
		public property In_size, int
			method get
			proc
				mreturn (int)mSynergyData.In_size
            endmethod
			method set
			proc
				mSynergyData.In_size = value
			endmethod
		endproperty
        ;;In_name
		public property In_name, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_name, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_latin
		public property In_latin, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_latin, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_latin = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_zone
		public property In_zone, int
			method get
			proc
				mreturn (int)mSynergyData.In_zone
            endmethod
			method set
			proc
				mSynergyData.In_zone = value
			endmethod
		endproperty
        ;;In_type
		public property In_type, int
			method get
			proc
				mreturn (int)mSynergyData.In_type
            endmethod
			method set
			proc
				mSynergyData.In_type = value
			endmethod
		endproperty
        ;;In_flower
		public property In_flower, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_flower, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_flower = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_color
		public property In_color, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_color, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_color = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_shape
		public property In_shape, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_shape, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_shape = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_maxhigh
		public property In_maxhigh, int
			method get
			proc
				mreturn (int)mSynergyData.In_maxhigh
            endmethod
			method set
			proc
				mSynergyData.In_maxhigh = value
			endmethod
		endproperty
        ;;In_maxwide
		public property In_maxwide, int
			method get
			proc
				mreturn (int)mSynergyData.In_maxwide
            endmethod
			method set
			proc
				mSynergyData.In_maxwide = value
			endmethod
		endproperty
        ;;In_water
		public property In_water, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_water, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_water = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_sun
		public property In_sun, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_sun, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_sun = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_location
		public property In_location, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_location, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_location = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;In_onhand
		public property In_onhand, int
			method get
			proc
				mreturn (int)mSynergyData.In_onhand
            endmethod
			method set
			proc
				mSynergyData.In_onhand = value
			endmethod
		endproperty
        ;;In_allocated
		public property In_allocated, int
			method get
			proc
				mreturn (int)mSynergyData.In_allocated
            endmethod
			method set
			proc
				mSynergyData.In_allocated = value
			endmethod
		endproperty
        ;;In_onorder
		public property In_onorder, int
			method get
			proc
				mreturn (int)mSynergyData.In_onorder
            endmethod
			method set
			proc
				mSynergyData.In_onorder = value
			endmethod
		endproperty
        ;;In_minimum
		public property In_minimum, int
			method get
			proc
				mreturn (int)mSynergyData.In_minimum
            endmethod
			method set
			proc
				mSynergyData.In_minimum = value
			endmethod
		endproperty
        ;;In_price
		public property In_price, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.In_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.In_price = value
			endmethod
		endproperty
        ;;In_cost
		public property In_cost, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.In_cost, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.In_cost = value
			endmethod
		endproperty

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

	endclass
	
endnamespace

