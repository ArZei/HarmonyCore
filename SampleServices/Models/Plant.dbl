;;*****************************************************************************
;;
;; Title:       Plant.dbl
;;
;; Type:        Class
;;
;; Description: Data object representing data defined by the repository
;;              structure PLANTS and from the data file ICSTUT:plants.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

    public partial class Plant extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strPlant 
		private mOriginalSynergyData, strPlant 
		
		private static sMetadata, @PlantMetadata

.region "Constructors"

		static method Plant
		proc
			sMetadata = new PlantMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Plant), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Plant
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Plant
			required in inData, strPlant
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

.endregion

.region "Attributes of this entity"

		;;; <summary>
		;;; Item ID
		;;; </summary>
		{Key}
		{Required(ErrorMessage="Item ID is required. ")}
		public property InItemid, int
			method get
			proc
				mreturn (int)mSynergyData.In_itemid
            endmethod
			method set
			proc
				mSynergyData.In_itemid = value
			endmethod
		endproperty

		;;; <summary>
		;;; Vending Source Code
		;;; </summary>
		public property InSource, int
			method get
			proc
				mreturn (int)mSynergyData.In_source
            endmethod
			method set
			proc
				mSynergyData.In_source = value
			endmethod
		endproperty

		;;; <summary>
		;;; Size in gallons
		;;; </summary>
		{Required(ErrorMessage="Size in gallons is required. ")}
		public property InSize, int
			method get
			proc
				mreturn (int)mSynergyData.In_size
            endmethod
			method set
			proc
				mSynergyData.In_size = value
			endmethod
		endproperty

		;;; <summary>
		;;; Common name
		;;; </summary>
		{StringLength(30, ErrorMessage="Common name cannot exceed 30 characters. ")}
		public property InName, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_name, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Latin name
		;;; </summary>
		{StringLength(30, ErrorMessage="Latin name cannot exceed 30 characters. ")}
		public property InLatin, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_latin, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_latin = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Zone
		;;; </summary>
		public property InZone, int
			method get
			proc
				mreturn (int)mSynergyData.In_zone
            endmethod
			method set
			proc
				mSynergyData.In_zone = value
			endmethod
		endproperty

		;;; <summary>
		;;; Type code
		;;; </summary>
		public property InType, int
			method get
			proc
				mreturn (int)mSynergyData.In_type
            endmethod
			method set
			proc
				mSynergyData.In_type = value
			endmethod
		endproperty

		;;; <summary>
		;;; Flowering?
		;;; </summary>
		{StringLength(1, ErrorMessage="Flowering? cannot exceed 1 characters. ")}
		public property InFlower, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_flower, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_flower = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Flower color
		;;; </summary>
		{StringLength(6, ErrorMessage="Flower color cannot exceed 6 characters. ")}
		public property InColor, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_color, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_color = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Plant shape
		;;; </summary>
		{StringLength(10, ErrorMessage="Plant shape cannot exceed 10 characters. ")}
		public property InShape, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_shape, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_shape = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Maximum height (in inches)
		;;; </summary>
		public property InMaxhigh, int
			method get
			proc
				mreturn (int)mSynergyData.In_maxhigh
            endmethod
			method set
			proc
				mSynergyData.In_maxhigh = value
			endmethod
		endproperty

		;;; <summary>
		;;; Maximum width (in inches)
		;;; </summary>
		public property InMaxwide, int
			method get
			proc
				mreturn (int)mSynergyData.In_maxwide
            endmethod
			method set
			proc
				mSynergyData.In_maxwide = value
			endmethod
		endproperty

		;;; <summary>
		;;; Water requirements
		;;; </summary>
		{StringLength(4, ErrorMessage="Water requirements cannot exceed 4 characters. ")}
		public property InWater, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_water, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_water = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Sun requirements
		;;; </summary>
		{StringLength(6, ErrorMessage="Sun requirements cannot exceed 6 characters. ")}
		public property InSun, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_sun, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_sun = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Bin/aisle
		;;; </summary>
		{StringLength(3, ErrorMessage="Bin/aisle cannot exceed 3 characters. ")}
		public property InLocation, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.In_location, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.In_location = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Qty on hand
		;;; </summary>
		public property InOnhand, int
			method get
			proc
				mreturn (int)mSynergyData.In_onhand
            endmethod
			method set
			proc
				mSynergyData.In_onhand = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty allocated
		;;; </summary>
		public property InAllocated, int
			method get
			proc
				mreturn (int)mSynergyData.In_allocated
            endmethod
			method set
			proc
				mSynergyData.In_allocated = value
			endmethod
		endproperty

		;;; <summary>
		;;; Qty on order
		;;; </summary>
		public property InOnorder, int
			method get
			proc
				mreturn (int)mSynergyData.In_onorder
            endmethod
			method set
			proc
				mSynergyData.In_onorder = value
			endmethod
		endproperty

		;;; <summary>
		;;; Reorder point
		;;; </summary>
		public property InMinimum, int
			method get
			proc
				mreturn (int)mSynergyData.In_minimum
            endmethod
			method set
			proc
				mSynergyData.In_minimum = value
			endmethod
		endproperty

		;;; <summary>
		;;; Unit Price
		;;; </summary>
		public property InPrice, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.In_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.In_price = value
			endmethod
		endproperty

		;;; <summary>
		;;; Item Cost
		;;; </summary>
		public property InCost, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.In_cost, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.In_cost = value
			endmethod
		endproperty

.endregion

.define INCLUDE_RELATIONS
.ifdef INCLUDE_RELATIONS
.region "Relationships to other entities"

		;;; <summary>
		;;; Relationship (Type A)
		;;; PLANT.VENDOR (one) --> (one) --> (many) VENDOR.VENDOR
		;;; </summary>
		public readwrite property REL_Vendor, @Vendor

		;;; <summary>
		;;; Relationship (Type D)
		;;; PLANT.ITEM (one) <-> (many) ORDER.ITEM
		;;; </summary>
		public readwrite property REL_Orders, @ICollection<Order>

.endregion
.endc

.region "Properties to represent literal key segments"

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

.endregion

.region "Public methods"

		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

.endregion

	endclass
	
endnamespace

