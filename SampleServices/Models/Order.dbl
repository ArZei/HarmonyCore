;;*****************************************************************************
;;
;; Title:       Order.dbl
;;
;; Type:        Class
;;
;; Description: Data object representing data defined by the repository
;;              structure ORDERS and from the data file ICSTUT:orders.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

    public partial class Order extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strOrder 
		private mOriginalSynergyData, strOrder 
		
		private static sMetadata, @OrderMetadata

.region "Constructors"

		static method Order
		proc
			sMetadata = new OrderMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Order), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Order
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Order
			required in inData, strOrder
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

.endregion

.region "Public properties for fields"

		;;; <summary>
		;;; Order number
		;;; </summary>
		{Key}
		public property OrNumber, int
			method get
			proc
				mreturn (int)mSynergyData.Or_number
            endmethod
			method set
			proc
				mSynergyData.Or_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Vendorcode
		;;; </summary>
		public property OrVendor, int
			method get
			proc
				mreturn (int)mSynergyData.Or_vendor
            endmethod
			method set
			proc
				mSynergyData.Or_vendor = value
			endmethod
		endproperty

		;;; <summary>
		;;; Item code
		;;; </summary>
		public property OrItem, int
			method get
			proc
				mreturn (int)mSynergyData.Or_item
            endmethod
			method set
			proc
				mSynergyData.Or_item = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer number
		;;; </summary>
		public property OrCustomer, int
			method get
			proc
				mreturn (int)mSynergyData.Or_customer
            endmethod
			method set
			proc
				mSynergyData.Or_customer = value
			endmethod
		endproperty

		;;; <summary>
		;;; Quantity on order
		;;; </summary>
		public property OrQty, int
			method get
			proc
				mreturn (int)mSynergyData.Or_qty
            endmethod
			method set
			proc
				mSynergyData.Or_qty = value
			endmethod
		endproperty

		;;; <summary>
		;;; Order Price
		;;; </summary>
		public property OrPrice, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Or_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_price = value
			endmethod
		endproperty

		;;; <summary>
		;;; Order Terms code
		;;; </summary>
		{StringLength(2, ErrorMessage="Order Terms code cannot exceed 2 characters. ")}
		public property OrTerms, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Or_terms, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_terms = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Order date
		;;; </summary>
		public property OrOdate, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Or_odate, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_odate = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Req ship date
		;;; </summary>
		public property OrSdate, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Or_sdate, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_sdate = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Expiration date
		;;; </summary>
		public property OrEdate, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Or_edate, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_edate = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Invoice Number
		;;; </summary>
		public property OrInvoice, int
			method get
			proc
				mreturn (int)mSynergyData.Or_invoice
            endmethod
			method set
			proc
				mSynergyData.Or_invoice = value
			endmethod
		endproperty

.endregion

.define INCLUDE_RELATIONS
.ifdef INCLUDE_RELATIONS
.region "Public properties for relationships to other data"

		;;; <summary>
		;;; One to one relationship from stucture Order key VENDOR to structure Vendors key VENDOR with a backward relationship
		;;; </summary>
		public readwrite property REL_Vendor, @Vendor

		;;; <summary>
		;;; One to one relationship from stucture Order key CUSTOMER to structure Customers key CUSTOMER with a backward relationship
		;;; </summary>
		public readwrite property REL_Customer, @Customer

		;;; <summary>
		;;; One to one relationship from stucture Order key ITEM to structure Plants key ITEM with a backward relationship
		;;; </summary>
		public readwrite property REL_Item, @Plant

		;;; <summary>
		;;; One to one relationship from stucture Order key TAG_CUSTOMER to structure Customers key TAG_CUSTOMER without a backward relationship
		;;; </summary>
		public readwrite property REL_TagCustomer, @Customer

		;;; <summary>
		;;; One to one relationship from stucture Order key TAG_VENDOR to structure Vendors key TAG_VENDOR without a backward relationship
		;;; </summary>
		public readwrite property REL_TagVendor, @Vendor

.endregion
.endc

.region "Other public properties"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

.endregion

.region "Public methods"

		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[16]
		endmethod

.endregion

	endclass
	
endnamespace

