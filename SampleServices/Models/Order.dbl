;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:   Symphony Framework : DATAOBJECT.tpl
;;
;;***************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

	.include "ORDERS" repository  , structure="strOrder", end

    public partial class Order extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strOrder 
		private mOriginalSynergyData, strOrder 
		
		private static sMetadata, @OrderMetadata

		static method Order
		proc
			sMetadata = new OrderMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Order), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Order
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Order
			required in inData, strOrder
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
        ;;Expose fields as properties for data binding

		{Key}
        ;;Or_number
		public property Or_number, int
			method get
			proc
				mreturn (int)mSynergyData.Or_number
            endmethod
			method set
			proc
				mSynergyData.Or_number = value
			endmethod
		endproperty
        ;;Or_vendor
		public property Or_vendor, int
			method get
			proc
				mreturn (int)mSynergyData.Or_vendor
            endmethod
			method set
			proc
				mSynergyData.Or_vendor = value
			endmethod
		endproperty
        ;;Or_item
		public property Or_item, int
			method get
			proc
				mreturn (int)mSynergyData.Or_item
            endmethod
			method set
			proc
				mSynergyData.Or_item = value
			endmethod
		endproperty
        ;;Or_customer
		public property Or_customer, int
			method get
			proc
				mreturn (int)mSynergyData.Or_customer
            endmethod
			method set
			proc
				mSynergyData.Or_customer = value
			endmethod
		endproperty
        ;;Or_qty
		public property Or_qty, int
			method get
			proc
				mreturn (int)mSynergyData.Or_qty
            endmethod
			method set
			proc
				mSynergyData.Or_qty = value
			endmethod
		endproperty
        ;;Or_price
		public property Or_price, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Or_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_price = value
			endmethod
		endproperty
        ;;Or_terms
		public property Or_terms, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Or_terms, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_terms = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;Or_odate
		public property Or_odate, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Or_odate, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_odate = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;Or_sdate
		public property Or_sdate, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Or_sdate, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_sdate = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;Or_edate
		public property Or_edate, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Or_edate, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Or_edate = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
        ;;Or_invoice
		public property Or_invoice, int
			method get
			proc
				mreturn (int)mSynergyData.Or_invoice
            endmethod
			method set
			proc
				mSynergyData.Or_invoice = value
			endmethod
		endproperty

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

	endclass
	
endnamespace

