;;*****************************************************************************
;;
;; Title:       Order.dbl
;;
;; Type:        Class
;;
;; Description: Data model representing data defined by the repository
;;              structure ORDERS and from the data file ICSTUT:orders.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

    public partial class Order extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strOrder 
		private mOriginalSynergyData, strOrder 
		
		private static sMetadata, @OrderMetadata

.region "Constructors"

		static method Order
		proc
			sMetadata = new OrderMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Order), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Order
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Order
			required in inData, strOrder
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

.endregion

.region "Attributes of this entity"

		;;; <summary>
		;;; Order number
		;;; </summary>
		{Key}
		{Required(ErrorMessage="Order number is required. ")}
		public property OrderNumber, int
			method get
			proc
				mreturn (int)mSynergyData.Order_number
            endmethod
			method set
			proc
				mSynergyData.Order_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer number
		;;; </summary>
		{Required(ErrorMessage="Customer number is required. ")}
		public property CustomerNumber, int
			method get
			proc
				mreturn (int)mSynergyData.Customer_number
            endmethod
			method set
			proc
				mSynergyData.Customer_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Order placed by
		;;; </summary>
		{Required(ErrorMessage="Order placed by is required. ")}
		{StringLength(25, ErrorMessage="Order placed by cannot exceed 25 characters. ")}
		public property PlacedBy, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Placed_by, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Placed_by = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Customer order reference
		;;; </summary>
		{StringLength(25, ErrorMessage="Customer order reference cannot exceed 25 characters. ")}
		public property CustomerReference, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Customer_reference, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Customer_reference = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Payment terms code
		;;; </summary>
		{StringLength(2, ErrorMessage="Payment terms code cannot exceed 2 characters. ")}
		public property PaymentTermsCode, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Payment_terms_code, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Payment_terms_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Date ordered
		;;; </summary>
		{Required(ErrorMessage="Date ordered is required. ")}
		public property DateOrdered, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Date_ordered, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Date_ordered = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Date order completed
		;;; </summary>
		public property DateCompleted, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Date_completed, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Date_completed = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Spare space
		;;; </summary>
		{StringLength(20, ErrorMessage="Spare space cannot exceed 20 characters. ")}
		public property Noname001, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Noname_001, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Noname_001 = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

.endregion

.region "Relationships to other entities"

		;;; <summary>
		;;; Relationship (Type D)
		;;; ORDER.ORDER_NUMBER (one) <-> (many) ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM
		;;; </summary>
		public readwrite property REL_OrderItems, @ICollection<OrderItem>

		;;; <summary>
		;;; Relationship (Type A)
		;;; ORDER.CUSTOMER_NUMBER (one) --> (one) --> (many) CUSTOMER.CUSTOMER_NUMBER
		;;; </summary>
		public readwrite property REL_CustomerNumber, @Customer

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

.endregion

.region "Public methods"

		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

.endregion

	endclass
	
endnamespace
