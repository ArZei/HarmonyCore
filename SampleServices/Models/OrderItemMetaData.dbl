;;*****************************************************************************
;;
;; Title:       OrderItemMetaData.dbl
;;
;; Description: Defines meta data associated with a OrderItem model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

    .include "ORDER_ITEMS" repository, public structure="strOrderItem", end

    ;;; <summary>
    ;;; Exposes metadata relating to the OrderItem model class.
    ;;; </summary>
    public partial class OrderItemMetadata extends DataObjectMetadataBase
        
        ;;; <summary>
        ;;; Constructs an new OrderItemMetadata object.
        ;;; </summary>
        public method OrderItemMetadata
        proc
            RPSStructureName = "ORDER_ITEMS"
            RPSStructureSize = ^size(strOrderItem)

            AddFieldInfo("OrderNumber", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("ItemNumber", "DECIMAL", 2, 7, 0, false)
            AddFieldInfo("ItemOrdered", "DECIMAL", 6, 9, 0, false)
            AddFieldInfo("QuantityOrdered", "DECIMAL", 6, 15, 0, false)
            AddFieldInfo("UnitPrice", "IMPLIED", 7, 21, 02, false)
            AddFieldInfo("DateShipped", "DATE", 8, 28, 0, false, new SynergyDecimalDateConverter.LiteralFormatter("FORMAT:YYYYMMDD"))
            AddFieldInfo("InvoiceNumber", "DECIMAL", 7, 36, 0, false)
            AddFieldInfo("REL_OrderNumberAndLineItem", "DATAOBJECT", 0, 0, 0, false)
            AddFieldInfo("REL_ItemOrdered", "DATAOBJECT", 0, 0, 0, false)

            AddKeyInfo(0, "OrderNumber")
            AddKeyInfo(0, "ItemNumber")
            AddKeyInfo(1, "ItemOrdered")
            AddKeyInfo(2, "DateShipped")
            AddKeyInfo(3, "InvoiceNumber")

        endmethod
    
        ;;; <summary>
        ;;; Returns a new OrderItem object containing data from a record and a GRFA.
        ;;; The related data properties (REL_OrderNumberAndLineItem and REL_ItemOrdered) will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new OrderItem object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new OrderItem((strOrderItem)dataArea) { GlobalRFA = grfa }
        endmethod

        ;;; <summary>
        ;;; Returns a new OrderItem object containing data from a record and a GRFA.
        ;;; The related data properties (REL_OrderNumberAndLineItem and REL_ItemOrdered) will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new OrderItem object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties (REL_OrderNumberAndLineItem and REL_ItemOrdered) to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newOrderItem = new OrderItem((strOrderItem)dataArea) { GlobalRFA = grfa }
            data joinedObject, KeyValuePair<String, Object>
            foreach joinedObject in joinedObjects
            begin
                using joinedObject.Key select
                ("REL_OrderNumberAndLineItem"), 
                    newOrderItem.REL_OrderNumberAndLineItem = (@Order)joinedObject.Value
                ("REL_ItemOrdered"), 
                    newOrderItem.REL_ItemOrdered = (@Item)joinedObject.Value
                endusing
            end

            mreturn newOrderItem

        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                OrderNumber, D6
                ItemNumber, D2
            endrecord
            stack record key1
                ItemOrdered, D6
            endrecord
            stack record key2
                DateShipped, D8
            endrecord
            stack record key3
                InvoiceNumber, D7
            endrecord
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.OrderNumber, "OrderNumber", parts))<6)
                    mreturn key0(1:startPos+segValueLength)
                startPos += 6
                if((segValueLength=KeyValueHelper(key0.ItemNumber, "ItemNumber", parts))<2)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            (1),
            begin
                if((segValueLength=KeyValueHelper(key1.ItemOrdered, "ItemOrdered", parts))<6)
                    mreturn key1(1:startPos+segValueLength)
                mreturn key1
            end
            (2),
            begin
                if((segValueLength=KeyValueHelper(key2.DateShipped, "DateShipped", parts))<8)
                    mreturn key2(1:startPos+segValueLength)
                mreturn key2
            end
            (3),
            begin
                if((segValueLength=KeyValueHelper(key3.InvoiceNumber, "InvoiceNumber", parts))<7)
                    mreturn key3(1:startPos+segValueLength)
                mreturn key3
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in OrderItemMetadata.FormatKeyLiteral",keyNumber))

        endmethod

    endclass

endnamespace
