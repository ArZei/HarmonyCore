;;*****************************************************************************
;;
;; Title:       OrderItemMetaData.dbl
;;
;; Type:        Class
;;
;; Description: Defines meta data associated with a OrderItem model.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

	.include "ORDER_ITEMS" repository  , public structure="strOrderItem", end

	;;; <summary>
	;;; Exposes metadata relating to the OrderItem model class.
	;;; </summary>
	public partial class OrderItemMetadata extends DataObjectMetadataBase
		
		;;; <summary>
		;;; Constructs an new OrderItemMetadata object.
		;;; </summary>
		public method OrderItemMetadata
		proc
			RPSStructureName = "ORDER_ITEMS"
			RPSStructureSize = ^size(strOrderItem)

			AddFieldInfo("OiNumber", "DECIMAL", 6, 1, 0, false)
			AddFieldInfo("OiLineItem", "DECIMAL", 2, 7, 0, false)
			AddFieldInfo("OiItemOrdered", "DECIMAL", 6, 9, 0, false)
			AddFieldInfo("OiQty", "DECIMAL", 6, 15, 0, false)
			AddFieldInfo("OiUnitPrice", "IMPLIED", 7, 21, 02, false)
			AddFieldInfo("OiShipped", "DATE", 8, 28, 0, false)
			AddFieldInfo("OiInvoice", "DECIMAL", 7, 36, 0, false)
			AddFieldInfo("REL_OiNumberLineItem", "DATAOBJECT", 0, 0, 0, false)
			AddFieldInfo("REL_OiItemOrdered", "DATAOBJECT", 0, 0, 0, false)

			AddKeyInfo(0, "OiNumber")
			AddKeyInfo(0, "OiLineItem")
			AddKeyInfo(1, "OiItemOrdered")
			AddKeyInfo(2, "OiShipped")
			AddKeyInfo(3, "OiInvoice")

		endmethod
	
		;;; <summary>
		;;; Returns a new OrderItem object containing data from a record and a GRFA.
		;;; The related data properties (REL_OiNumberLineItem and REL_OiItemOrdered) will not be populated.
		;;; </summary>
		;;; <param name="dataArea">The record containing the data for the new OrderItem object.</param>
		;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
		;;; <returns></returns>
		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
		proc
			mreturn new OrderItem((strOrderItem)dataArea) { GlobalRFA = grfa }
		endmethod

		;;; <summary>
		;;; Returns a new OrderItem object containing data from a record and a GRFA.
		;;; The related data properties (REL_OiNumberLineItem and REL_OiItemOrdered) will be populated.
		;;; </summary>
		;;; <param name="dataArea">The record containing the data for the new OrderItem object.</param>
		;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
		;;; <param name="joinedObjects">Data to allow the related data properties (REL_OiNumberLineItem and REL_OiItemOrdered) to be populated.</param>
		;;; <returns></returns>
		public override method MakeNew, @DataObjectBase
			required in dataArea, a
			required in grfa, a
			required in joinedObjects, [#]KeyValuePair<String, Object>
		proc
			data newOrderItem = new OrderItem((strOrderItem)dataArea) { GlobalRFA = grfa }
			data joinedObject, KeyValuePair<String, Object>
			foreach joinedObject in joinedObjects
			begin
				using joinedObject.Key select
				("REL_OiNumberLineItem"), 
					newOrderItem.REL_OiNumberLineItem = (@Order)joinedObject.Value
				("REL_OiItemOrdered"), 
					newOrderItem.REL_OiItemOrdered = (@Plant)joinedObject.Value
				endusing
			end

			mreturn newOrderItem

		endmethod

		;;; <summary>
		;;; Formats a literal value for a key lookup.
		;;; </summary>
		;;; <param name="keyNumber">Key number.</param>
		;;; <param name="parts">Dictionary containing key segment names and values.</param>
		;;; <returns></returns>
		public override method FormatKeyLiteral, a
			required in keyNumber, int
			required in parts, @Dictionary<String, Object>
			endparams
			stack record key0
				OiNumber, D6
				OiLineItem, D2
			endrecord
			stack record key1
				OiItemOrdered, D6
			endrecord
			stack record key2
				OiShipped, D8
			endrecord
			stack record key3
				OiInvoice, D7
			endrecord
		proc
			data startPos = 0
			data segValueLength, int
			using keyNumber select
			(0),
			begin
				if((segValueLength=KeyValueHelper(key0.OiNumber, "OiNumber", parts))<6)
					mreturn key0(1:startPos+segValueLength)
				startPos += 6
				if((segValueLength=KeyValueHelper(key0.OiLineItem, "OiLineItem", parts))<2)
					mreturn key0(1:startPos+segValueLength)
				mreturn key0
			end
			(1),
			begin
				if((segValueLength=KeyValueHelper(key1.OiItemOrdered, "OiItemOrdered", parts))<6)
					mreturn key1(1:startPos+segValueLength)
				mreturn key1
			end
			(2),
			begin
				if((segValueLength=KeyValueHelper(key2.OiShipped, "OiShipped", parts))<8)
					mreturn key2(1:startPos+segValueLength)
				mreturn key2
			end
			(3),
			begin
				if((segValueLength=KeyValueHelper(key3.OiInvoice, "OiInvoice", parts))<7)
					mreturn key3(1:startPos+segValueLength)
				mreturn key3
			end
			endusing

			throw new ApplicationException(String.Format("Invalid key number {0} encountered in OrderItemMetadata.FormatKeyLiteral",keyNumber))

		endmethod

	endclass

endnamespace
