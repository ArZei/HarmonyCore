;;*****************************************************************************
;;
;; Title:       OrderItem.dbl
;;
;; Type:        Class
;;
;; Description: Data model representing data defined by the repository
;;              structure ORDER_ITEMS and from the data file ICSTUT:order_items.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

    public partial class OrderItem extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strOrderItem 
		private mOriginalSynergyData, strOrderItem 
		
		private static sMetadata, @OrderItemMetadata

.region "Constructors"

		static method OrderItem
		proc
			sMetadata = new OrderItemMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(OrderItem), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method OrderItem
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method OrderItem
			required in inData, strOrderItem
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

.endregion

.region "Attributes of this entity"

		;;; <summary>
		;;; Order number
		;;; </summary>
		{Required(ErrorMessage="Order number is required. ")}
		public property OiNumber, int
			method get
			proc
				mreturn (int)mSynergyData.Oi_number
            endmethod
			method set
			proc
				mSynergyData.Oi_number = value
			endmethod
		endproperty

		;;; <summary>
		;;; Line item number
		;;; </summary>
		{Required(ErrorMessage="Line item number is required. ")}
		public property OiLineItem, int
			method get
			proc
				mreturn (int)mSynergyData.Oi_line_item
            endmethod
			method set
			proc
				mSynergyData.Oi_line_item = value
			endmethod
		endproperty

		;;; <summary>
		;;; Item ordered
		;;; </summary>
		{Required(ErrorMessage="Item ordered is required. ")}
		public property OiItemOrdered, int
			method get
			proc
				mreturn (int)mSynergyData.Oi_item_ordered
            endmethod
			method set
			proc
				mSynergyData.Oi_item_ordered = value
			endmethod
		endproperty

		;;; <summary>
		;;; Quantity ordered
		;;; </summary>
		{Required(ErrorMessage="Quantity ordered is required. ")}
		public property OiQty, int
			method get
			proc
				mreturn (int)mSynergyData.Oi_qty
            endmethod
			method set
			proc
				mSynergyData.Oi_qty = value
			endmethod
		endproperty

		;;; <summary>
		;;; Unit price
		;;; </summary>
		{Required(ErrorMessage="Unit price is required. ")}
		public property OiUnitPrice, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Oi_unit_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.Oi_unit_price = value
			endmethod
		endproperty

		;;; <summary>
		;;; Date shipped
		;;; </summary>
		public property OiShipped, DateTime
			method get
			proc
				mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Oi_shipped, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Oi_shipped = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Invoice number
		;;; </summary>
		public property OiInvoice, int
			method get
			proc
				mreturn (int)mSynergyData.Oi_invoice
            endmethod
			method set
			proc
				mSynergyData.Oi_invoice = value
			endmethod
		endproperty

.endregion

.region "Relationships to other entities"

		;;; <summary>
		;;; Relationship (Type A)
		;;; ORDER_ITEM.OI_NUMBER_LINE_ITEM (one) --> (one) --> (many) ORDER.OR_NUMBER
		;;; </summary>
		public readwrite property REL_OiNumberLineItem, @Order

		;;; <summary>
		;;; Relationship (Type A)
		;;; ORDER_ITEM.OI_ITEM_ORDERED (one) --> (one) --> (many) PLANT.ITEM
		;;; </summary>
		public readwrite property REL_OiItemOrdered, @Plant

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

.endregion

.region "Public methods"

		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

.endregion

	endclass
	
endnamespace
