;;*****************************************************************************
;;
;; Title:       Customer.dbl
;;
;; Type:        Class
;;
;; Description: Data object representing data defined by the repository
;;              structure CUSTOMERS and from the data file ICSTUT:customer.ism.
;;
;;*****************************************************************************
;; WARNING
;;
;; This file was code generated. Avoid editing this file, as any changes that
;; you make will be lost of the file is re-generated.
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

	.include "CUSTOMERS" repository  , structure="strCustomer", end

    public partial class Customer extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strCustomer 
		private mOriginalSynergyData, strCustomer 
		
		private static sMetadata, @CustomerMetadata

.region "Constructors"

		static method Customer
		proc
			sMetadata = new CustomerMetadata()
			DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Customer), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Customer
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Customer
			required in inData, strCustomer
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

.endregion

.region "Public properties for fields"

		;;; <summary>
		;;; Customer id
		;;; </summary>
		{Key}
		public property CustKey, int
			method get
			proc
				mreturn (int)mSynergyData.Cust_key
            endmethod
			method set
			proc
				mSynergyData.Cust_key = value
			endmethod
		endproperty

		;;; <summary>
		;;; Record Tag Field
		;;; </summary>
		public property CustRtype, int
			method get
			proc
				mreturn (int)mSynergyData.Cust_rtype
            endmethod
			method set
			proc
				mSynergyData.Cust_rtype = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer Name
		;;; </summary>
		{StringLength(30, ErrorMessage="Customer Name cannot exceed 30 characters. ")}
		public property CustName, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Cust_name, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Cust_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Street Address
		;;; </summary>
		{StringLength(25, ErrorMessage="Street Address cannot exceed 25 characters. ")}
		public property CustStreet, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Cust_street, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Cust_street = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; City
		;;; </summary>
		{StringLength(20, ErrorMessage="City cannot exceed 20 characters. ")}
		public property CustCity, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Cust_city, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Cust_city = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; State
		;;; </summary>
		{StringLength(2, ErrorMessage="State cannot exceed 2 characters. ")}
		public property CustState, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Cust_state, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Cust_state = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Zip code
		;;; </summary>
		public property CustZip, int
			method get
			proc
				mreturn (int)mSynergyData.Cust_zip
            endmethod
			method set
			proc
				mSynergyData.Cust_zip = value
			endmethod
		endproperty

		;;; <summary>
		;;; Contact
		;;; </summary>
		{StringLength(25, ErrorMessage="Contact cannot exceed 25 characters. ")}
		public property CustContact, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Cust_contact, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Cust_contact = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Phone number
		;;; </summary>
		public property CustPhone, long
			method get
			proc
				mreturn (long)mSynergyData.Cust_phone
            endmethod
			method set
			proc
				mSynergyData.Cust_phone = value
			endmethod
		endproperty

		;;; <summary>
		;;; FAX number
		;;; </summary>
		public property CustFax, long
			method get
			proc
				mreturn (long)mSynergyData.Cust_fax
            endmethod
			method set
			proc
				mSynergyData.Cust_fax = value
			endmethod
		endproperty

		;;; <summary>
		;;; Customer Premium Gift
		;;; </summary>
		public property CustGift, int
			method get
			proc
				mreturn (int)mSynergyData.Cust_gift
            endmethod
			method set
			proc
				mSynergyData.Cust_gift = value
			endmethod
		endproperty

		;;; <summary>
		;;; Terms code
		;;; </summary>
		{StringLength(2, ErrorMessage="Terms code cannot exceed 2 characters. ")}
		public property CustTcode, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Cust_tcode, ^null, ^null, ^null)
            endmethod
			method set
			proc
				mSynergyData.Cust_tcode = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty

		;;; <summary>
		;;; Customer Tax Number
		;;; </summary>
		public property CustTaxno, int
			method get
			proc
				mreturn (int)mSynergyData.Cust_taxno
            endmethod
			method set
			proc
				mSynergyData.Cust_taxno = value
			endmethod
		endproperty

		;;; <summary>
		;;; Credit limit
		;;; </summary>
		public property CustLimit, decimal
			method get
			proc
				mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Cust_limit, ^null, "DECIMALPLACES#2", ^null)
            endmethod
			method set
			proc
				mSynergyData.Cust_limit = value
			endmethod
		endproperty

.endregion

;.region "Public properties for relationships to other data"
;
;;;;;;        ;;; <summary>
;        ;;; One to many relationship from structure Customer key CUST_KEY to structure Orders key CUSTOMER with a backward relationship
;        ;;; </summary>
;		public readwrite property Orders, @ICollection<Order>
;;;
;;;;        ;;; <summary>
;        ;;; One to one relationship from stucture Customer key ITEM to structure Plants key KEY0 without a backward relationship
;        ;;; </summary>
;		public readwrite property ItemData, @Plant
;;;;
;;;.endregion

.region "Other public properties"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

.endregion

.region "Public methods"

		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalSynergyRecord, void
			targetMethod, @AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
		proc
		endmethod
		
		;;; <summary>
		;;; 
		;;; </summary>
		public override method InternalGetValues, [#]@object
		proc
			;;TODO: This should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

.endregion

	endclass
	
endnamespace

