;;*****************************************************************************
;;
;; Title:       Item.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure ITEMS and from the data file ICSTUT:ITEMS.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace SampleServices.Models

    public partial class Item extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strItem 
        private mOriginalSynergyData, strItem 
        
        private static sMetadata, @ItemMetadata

.region "Constructors"

        static method Item
        proc
            sMetadata = new ItemMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Item), sMetadata)
        endmethod
        
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Item
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Item
            required in inData, strItem
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Item number
        ;;; </summary>
        {Key}
        {Required(ErrorMessage="Item number is required. ")}
        public property ItemNumber, int
            method get
            proc
                mreturn (int)mSynergyData.Item_number
            endmethod
            method set
            proc
                mSynergyData.Item_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Vendor number
        ;;; </summary>
        public property VendorNumber, int
            method get
            proc
                mreturn (int)mSynergyData.Vendor_number
            endmethod
            method set
            proc
                mSynergyData.Vendor_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Size in gallons
        ;;; </summary>
        {Required(ErrorMessage="Size in gallons is required. ")}
        public property Size, int
            method get
            proc
                mreturn (int)mSynergyData.Size
            endmethod
            method set
            proc
                mSynergyData.Size = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Common name
        ;;; </summary>
        {StringLength(30, ErrorMessage="Common name cannot exceed 30 characters. ")}
        public property CommonName, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Common_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Common_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Latin name
        ;;; </summary>
        {StringLength(30, ErrorMessage="Latin name cannot exceed 30 characters. ")}
        public property LatinName, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Latin_name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Latin_name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Hardiness zone code
        ;;; </summary>
        public property ZoneCode, int
            method get
            proc
                mreturn (int)mSynergyData.Zone_code
            endmethod
            method set
            proc
                mSynergyData.Zone_code = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Type code
        ;;; </summary>
        public property Type, int
            method get
            proc
                mreturn (int)mSynergyData.Type
            endmethod
            method set
            proc
                mSynergyData.Type = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Flowering?
        ;;; </summary>
        {StringLength(1, ErrorMessage="Flowering? cannot exceed 1 characters. ")}
        public property Flowering, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Flowering, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Flowering = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Flower color
        ;;; </summary>
        {StringLength(6, ErrorMessage="Flower color cannot exceed 6 characters. ")}
        public property FlowerColor, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Flower_color, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Flower_color = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Shape
        ;;; </summary>
        {StringLength(10, ErrorMessage="Shape cannot exceed 10 characters. ")}
        public property Shape, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Shape, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Shape = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Maximum height (in inches)
        ;;; </summary>
        public property MaxHeight, int
            method get
            proc
                mreturn (int)mSynergyData.Max_height
            endmethod
            method set
            proc
                mSynergyData.Max_height = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Maximum width (in inches)
        ;;; </summary>
        public property MaxWidth, int
            method get
            proc
                mreturn (int)mSynergyData.Max_width
            endmethod
            method set
            proc
                mSynergyData.Max_width = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Water requirements
        ;;; </summary>
        {StringLength(4, ErrorMessage="Water requirements cannot exceed 4 characters. ")}
        public property WaterRequirement, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Water_requirement, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Water_requirement = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Sun requirements
        ;;; </summary>
        {StringLength(6, ErrorMessage="Sun requirements cannot exceed 6 characters. ")}
        public property SunRequirement, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Sun_requirement, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Sun_requirement = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Bin/aisle
        ;;; </summary>
        {StringLength(3, ErrorMessage="Bin/aisle cannot exceed 3 characters. ")}
        public property BinLocation, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Bin_location, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Bin_location = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Qty on hand
        ;;; </summary>
        public property QtyOnHand, int
            method get
            proc
                mreturn (int)mSynergyData.Qty_on_hand
            endmethod
            method set
            proc
                mSynergyData.Qty_on_hand = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Qty allocated
        ;;; </summary>
        public property QtyAllocated, int
            method get
            proc
                mreturn (int)mSynergyData.Qty_allocated
            endmethod
            method set
            proc
                mSynergyData.Qty_allocated = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Qty on order
        ;;; </summary>
        public property QtyOnOrder, int
            method get
            proc
                mreturn (int)mSynergyData.Qty_on_order
            endmethod
            method set
            proc
                mSynergyData.Qty_on_order = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Reorder point
        ;;; </summary>
        public property ReorderLevel, int
            method get
            proc
                mreturn (int)mSynergyData.Reorder_level
            endmethod
            method set
            proc
                mSynergyData.Reorder_level = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Unit price
        ;;; </summary>
        public property UnitPrice, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Unit_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.Unit_price = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Item cost
        ;;; </summary>
        public property CostPrice, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Cost_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.Cost_price = value
            endmethod
        endproperty

.endregion

.region "Relationships to other entities"

        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; ITEM.VENDOR_NUMBER (one) --> (one) --> (many) VENDOR.VENDOR_NUMBER
        ;;; </summary>
        public readwrite property REL_VendorNumber, @Vendor

        ;;; <summary>
        ;;; Relationship (Type D)
        ;;; ITEM.ITEM_NUMBER (one) <-> (many) ORDER_ITEM.ITEM_ORDERED
        ;;; </summary>
        public readwrite property REL_OrderItems, @ICollection<OrderItem>

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod
        
        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod
        
        ;;; <summary>
        ;;; 
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[0]
        endmethod

.endregion

    endclass
    
endnamespace
