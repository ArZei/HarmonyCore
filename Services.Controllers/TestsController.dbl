;;*****************************************************************************
;;
;; Title:       TestsController.dbl
;;
;; Description: OData controller for the TEST structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Services.Models

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for Tests
    ;;; </summary>
    public partial class TestsController extends ODataController
    
        public readwrite property DBContext, @Services.Models.DBContext
        public readwrite property ServiceProvider, @IServiceProvider

        ;;; <summary>
        ;;; Constructs a new instance of TestsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        public method TestsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
        proc
            this.DBContext = aDbContext
            this.ServiceProvider = aServiceProvider
        endmethod

        {ODataRoute("Tests")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Tests
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetTests, @IActionResult
        proc
            mreturn Ok(DBContext.Tests)
        endmethod

        {ODataRoute("Tests(Id={aId})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Test by primary key.
        ;;; </summary>
        ;;; <param name="aId">ID</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetTest, @SingleResult<Test>
            {FromODataUri}
            required in aId, long
        proc
            mreturn new SingleResult<Test>(DBContext.Tests.FindQuery<Test>(aId))
        endmethod


        {ODataRoute("Tests({key})/YesNo")}
        ;;; <summary>
        ;;; Get the YesNo property of a single Test, by primary key.
        ;;; </summary>
        ;;; <param name="key">Alpha Y/N field (boolean)</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetYesNo, @IActionResult
            {FromODataUri}
            required in key, long
        proc
            data result = DBContext.Tests.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.YesNo)
        endmethod

        {ODataRoute("Tests")}
        ;;; <summary>
        ;;; Create a new test (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostTest, @IActionResult
            {FromBody}
            required in aTest, @Test
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("Id")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)
            disposable data keyFactory = (@IPrimaryKeyFactory)ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            ;;Get the next available primary key value
            KeyFactory.AssignPrimaryKey(aTest)

            ;;Add the new test
            DBContext.Tests.Add(aTest)
            DBContext.SaveChanges(keyFactory)

            mreturn Created(aTest)

        endmethod

        {ODataRoute("Tests(Id={aId})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a test.
        ;;; </summary>
        ;;; <param name="aId">ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutTest, @IActionResult
            {FromODataUri}
            required in aId, long
            {FromBody}
            required in aTest, @Test
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aTest.Id = aId

            try
            begin
                ;;Add and commit
                data existing = DBContext.Tests.Find(aId)
                if(existing == ^null) then
                begin
                    DBContext.Tests.Add(aTest)
                    DBContext.SaveChanges()
                    mreturn Created(aTest)
                end
                else
                begin
                    aTest.CopyTo(existing)
                    DBContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("Tests(Id={aId})")}
        ;;; <summary>
        ;;; Patch  (partial update) a test.
        ;;; </summary>
        ;;; <param name="aId">ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchTest, @IActionResult
            {FromODataUri}
            required in aId, long
            {FromBody}
            required in aTest, @JsonPatchDocument<Test>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing test
            try
            begin
                ;;Get the test to be updated
                data testToUpdate = DBContext.Tests.Find(aId)

                ;;Did we find it?
                if(testToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the test we read
                aTest.ApplyTo(testToUpdate)

                ;;Update and commit
                DBContext.Tests.Update(testToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("Tests(Id={aId})")}
        ;;; <summary>
        ;;; Delete a test.
        ;;; </summary>
        ;;; <param name="aId">ID</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteTest, @IActionResult
            {FromODataUri}
            required in aId, long
        proc
            ;;Get the test to be deleted
            data testToRemove = DBContext.Tests.Find(aId)

            ;;Did we find it?
            if (testToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.Tests.Remove(testToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace