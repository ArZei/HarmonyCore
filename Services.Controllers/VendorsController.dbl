;;*****************************************************************************
;;
;; Title:       VendorsController.dbl
;;
;; Description: OData controller for the VENDORS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Services.Models

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for Vendors
    ;;; </summary>
    public partial class VendorsController extends ODataController
    
        public readwrite property DBContext, @Services.Models.DBContext
        public readwrite property ServiceProvider, @IServiceProvider

        ;;; <summary>
        ;;; Constructs a new instance of VendorsController
        ;;; </summary>
        ;;; <param name="dbContext">Database context</param>
        public method VendorsController
            dbContext, @Services.Models.DBContext
           serviceProvider, @IServiceProvider
        proc
            this.DBContext = dbContext
            this.ServiceProvider = serviceProvider
        endmethod

        {ODataRoute("Vendors")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Vendors
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetVendors, @IActionResult
        proc
            mreturn Ok(DBContext.Vendors)
        endmethod

        {ODataRoute("Vendors({aVendorNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Vendor by primary key.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetVendor, @SingleResult<Vendor>
            {FromODataUri}
            required in aVendorNumber, int
        proc
            mreturn new SingleResult<Vendor>(DBContext.Vendors.FindQuery<Vendor>(aVendorNumber))
        endmethod

        {ODataRoute("Vendors(State={aState})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get vendors by alternate key key State.
        ;;; </summary>
        ;;; <param name="aState">State</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetVendorsByState, @IActionResult
            {FromODataUri}
            required in aState, String
        proc
            data result = DBContext.Vendors.FindAlternate("State",aState)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Vendors(ZipCode={aZipCode})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get vendors by alternate key key Zip.
        ;;; </summary>
        ;;; <param name="aZipCode">Zip Code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetVendorsByZip, @IActionResult
            {FromODataUri}
            required in aZipCode, int
        proc
            data result = DBContext.Vendors.FindAlternate("ZipCode",aZipCode)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Vendors(PaymentTermsCode={aPaymentTermsCode})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get vendors by alternate key key PaymentTerms.
        ;;; </summary>
        ;;; <param name="aPaymentTermsCode">Payment terms code</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetVendorsByPaymentTerms, @IActionResult
            {FromODataUri}
            required in aPaymentTermsCode, String
        proc
            data result = DBContext.Vendors.FindAlternate("PaymentTermsCode",aPaymentTermsCode)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod


        {ODataRoute("Vendors({key})/Name")}
        ;;; <summary>
        ;;; Get the Name property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Vendor name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetName, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Name)
        endmethod

        {ODataRoute("Vendors({key})/Street")}
        ;;; <summary>
        ;;; Get the Street property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Street address</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetStreet, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Street)
        endmethod

        {ODataRoute("Vendors({key})/City")}
        ;;; <summary>
        ;;; Get the City property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">City</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetCity, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.City)
        endmethod

        {ODataRoute("Vendors({key})/State")}
        ;;; <summary>
        ;;; Get the State property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">State</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetState, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.State)
        endmethod

        {ODataRoute("Vendors({key})/ZipCode")}
        ;;; <summary>
        ;;; Get the ZipCode property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Zip Code</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetZipCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ZipCode)
        endmethod

        {ODataRoute("Vendors({key})/Contact")}
        ;;; <summary>
        ;;; Get the Contact property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Contact name</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetContact, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Contact)
        endmethod

        {ODataRoute("Vendors({key})/Phone")}
        ;;; <summary>
        ;;; Get the Phone property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Phone number</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetPhone, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Phone)
        endmethod

        {ODataRoute("Vendors({key})/Fax")}
        ;;; <summary>
        ;;; Get the Fax property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Fax number</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetFax, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.Fax)
        endmethod

        {ODataRoute("Vendors({key})/PaymentTermsCode")}
        ;;; <summary>
        ;;; Get the PaymentTermsCode property of a single Vendor, by primary key.
        ;;; </summary>
        ;;; <param name="key">Payment terms code</param>
        ;;; <returns>
        ;;; Returns a string containing the value of the requested property.
        ;;;</returns>
        public method GetPaymentTermsCode, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.Vendors.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.PaymentTermsCode)
        endmethod

        {ODataRoute("Vendors")}
        ;;; <summary>
        ;;; Create a new vendor (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostVendor, @IActionResult
            {FromBody}
            required in aVendor, @Vendor
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("VendorNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)
            disposable data keyFactory = (@IPrimaryKeyFactory)ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            ;;Get the next available primary key value
            KeyFactory.AssignPrimaryKey(aVendor)

            ;;Add the new vendor
            DBContext.Vendors.Add(aVendor)
            DBContext.SaveChanges(keyFactory)

            mreturn Created(aVendor)

        endmethod

        {ODataRoute("Vendors({aVendorNumber})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a vendor.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutVendor, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
            {FromBody}
            required in aVendor, @Vendor
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aVendor.VendorNumber = aVendorNumber

            try
            begin
                ;;Add and commit
                data existing = DBContext.Vendors.Find(aVendorNumber)
                if(existing == ^null) then
                begin
                    DBContext.Vendors.Add(aVendor)
                    DBContext.SaveChanges()
                    mreturn Created(aVendor)
                end
                else
                begin
                    aVendor.CopyTo(existing)
                    DBContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("Vendors({aVendorNumber})")}
        ;;; <summary>
        ;;; Patch  (partial update) a vendor.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchVendor, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
            {FromBody}
            required in aVendor, @JsonPatchDocument<Vendor>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing vendor
            try
            begin
                ;;Get the vendor to be updated
                data vendorToUpdate = DBContext.Vendors.Find(aVendorNumber)

                ;;Did we find it?
                if(vendorToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the vendor we read
                aVendor.ApplyTo(vendorToUpdate)

                ;;Update and commit
                DBContext.Vendors.Update(vendorToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("Vendors({aVendorNumber})")}
        ;;; <summary>
        ;;; Delete a vendor.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteVendor, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
        proc
            ;;Get the vendor to be deleted
            data vendorToRemove = DBContext.Vendors.Find(aVendorNumber)

            ;;Did we find it?
            if (vendorToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.Vendors.Remove(vendorToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace