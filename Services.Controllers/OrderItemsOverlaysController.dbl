;;*****************************************************************************
;;
;; Title:       OrderItemsOverlaysController.dbl
;;
;; Description: OData controller for the ORDER_ITEMS_OVERLAY structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import Services.Models
import Harmony.Core.Interface

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for OrderItemsOverlays
    ;;; </summary>
    public partial class OrderItemsOverlaysController extends ODataController
    
        public readwrite property DBContext, @Services.Models.DBContext
        public readwrite property ServiceProvider, @IServiceProvider

        ;;; <summary>
        ;;; Constructs a new instance of OrderItemsOverlaysController
        ;;; </summary>
        ;;; <param name="dbContext">Database context</param>
        public method OrderItemsOverlaysController
            dbContext, @Services.Models.DBContext
           serviceProvider, @IServiceProvider
        proc
            this.DBContext = dbContext
            this.ServiceProvider = serviceProvider
        endmethod

        {ODataRoute("OrderItemsOverlays")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all OrderItemsOverlays
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsOverlays, @IActionResult
        proc
            mreturn Ok(DBContext.OrderItemsOverlays)
        endmethod

        {ODataRoute("OrderItemsOverlays(OrderItemKey={aOrderItemKey})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single OrderItemsOverlay by primary key.
        ;;; </summary>
        ;;; <param name="aOrderItemKey">Order number and item number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsOverlay, @SingleResult<OrderItemsOverlay>
            {FromODataUri}
            required in aOrderItemKey, int
        proc
            mreturn new SingleResult<OrderItemsOverlay>(DBContext.OrderItemsOverlays.FindQuery<OrderItemsOverlay>(aOrderItemKey))
        endmethod

        {ODataRoute("OrderItemsOverlays(ItemOrdered={aItemOrdered})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItemsOverlays by alternate key key ItemOrdered.
        ;;; </summary>
        ;;; <param name="aItemOrdered">Item ordered</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsOverlaysByItemOrdered, @IActionResult
            {FromODataUri}
            required in aItemOrdered, int
        proc
            data result = DBContext.OrderItemsOverlays.FindAlternate("ItemOrdered",aItemOrdered)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("OrderItemsOverlays(DateShipped={aDateShipped})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItemsOverlays by alternate key key DateShipped.
        ;;; </summary>
        ;;; <param name="aDateShipped">Date shipped</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsOverlaysByDateShipped, @IActionResult
            {FromODataUri}
            required in aDateShipped, DateTime
        proc
            data result = DBContext.OrderItemsOverlays.FindAlternate("DateShipped",aDateShipped)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("OrderItemsOverlays(InvoiceNumber={aInvoiceNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get orderItemsOverlays by alternate key key InvoiceNumber.
        ;;; </summary>
        ;;; <param name="aInvoiceNumber">Invoice number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetOrderItemsOverlaysByInvoiceNumber, @IActionResult
            {FromODataUri}
            required in aInvoiceNumber, int
        proc
            data result = DBContext.OrderItemsOverlays.FindAlternate("InvoiceNumber",aInvoiceNumber)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("OrderItemsOverlays({key})/OrderNumber")}
        ;;; <summary>
        ;;; Get the OrderNumber property of a single OrderItemsOverlay, by primary key.
        ;;; </summary>
        ;;; <param name="key">Order number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetOrderItemsOverlayOrderNumber, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.OrderItemsOverlays.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.OrderNumber)
        endmethod

        {ODataRoute("OrderItemsOverlays({key})/ItemNumber")}
        ;;; <summary>
        ;;; Get the ItemNumber property of a single OrderItemsOverlay, by primary key.
        ;;; </summary>
        ;;; <param name="key">Line item number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetOrderItemsOverlayItemNumber, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.OrderItemsOverlays.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ItemNumber)
        endmethod


        {ODataRoute("OrderItemsOverlays({key})/ItemOrdered")}
        ;;; <summary>
        ;;; Get the ItemOrdered property of a single OrderItemsOverlay, by primary key.
        ;;; </summary>
        ;;; <param name="key">Item ordered</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetOrderItemsOverlayItemOrdered, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.OrderItemsOverlays.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.ItemOrdered)
        endmethod

        {ODataRoute("OrderItemsOverlays({key})/QuantityOrdered")}
        ;;; <summary>
        ;;; Get the QuantityOrdered property of a single OrderItemsOverlay, by primary key.
        ;;; </summary>
        ;;; <param name="key">Quantity ordered</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetOrderItemsOverlayQuantityOrdered, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.OrderItemsOverlays.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.QuantityOrdered)
        endmethod

        {ODataRoute("OrderItemsOverlays({key})/UnitPrice")}
        ;;; <summary>
        ;;; Get the UnitPrice property of a single OrderItemsOverlay, by primary key.
        ;;; </summary>
        ;;; <param name="key">Unit price</param>
        ;;; <returns>
        ;;; Returns a decimal containing the value of the requested property.
        ;;;</returns>
        public method GetOrderItemsOverlayUnitPrice, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.OrderItemsOverlays.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.UnitPrice)
        endmethod

        {ODataRoute("OrderItemsOverlays({key})/DateShipped")}
        ;;; <summary>
        ;;; Get the DateShipped property of a single OrderItemsOverlay, by primary key.
        ;;; </summary>
        ;;; <param name="key">Date shipped</param>
        ;;; <returns>
        ;;; Returns a DateTime containing the value of the requested property.
        ;;;</returns>
        public method GetOrderItemsOverlayDateShipped, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.OrderItemsOverlays.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.DateShipped)
        endmethod

        {ODataRoute("OrderItemsOverlays({key})/InvoiceNumber")}
        ;;; <summary>
        ;;; Get the InvoiceNumber property of a single OrderItemsOverlay, by primary key.
        ;;; </summary>
        ;;; <param name="key">Invoice number</param>
        ;;; <returns>
        ;;; Returns an int containing the value of the requested property.
        ;;;</returns>
        public method GetOrderItemsOverlayInvoiceNumber, @IActionResult
            {FromODataUri}
            required in key, int
        proc
            data result = DBContext.OrderItemsOverlays.Find(key)
            if (result==^null)
                mreturn NotFound()
            mreturn OK(result.InvoiceNumber)
        endmethod

        {ODataRoute("OrderItemsOverlays")}
        ;;; <summary>
        ;;; Create a new orderItemsOverlay (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostOrderItemsOverlay, @IActionResult
            {FromBody}
            required in aOrderItemsOverlay, @OrderItemsOverlay
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("OrderItemKey")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)
            disposable data keyFactory = (@IPrimaryKeyFactory)ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            ;;Get the next available primary key value
            KeyFactory.AssignPrimaryKey(aOrderItemsOverlay)

            ;;Add the new orderItemsOverlay
            DBContext.OrderItemsOverlays.Add(aOrderItemsOverlay)
            DBContext.SaveChanges(keyFactory)

            mreturn Created(aOrderItemsOverlay)

        endmethod

        {ODataRoute("OrderItemsOverlays(OrderItemKey={aOrderItemKey})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a orderItemsOverlay.
        ;;; </summary>
        ;;; <param name="aOrderItemKey">Order number and item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutOrderItemsOverlay, @IActionResult
            {FromODataUri}
            required in aOrderItemKey, int
            {FromBody}
            required in aOrderItemsOverlay, @OrderItemsOverlay
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aOrderItemsOverlay.OrderItemKey = aOrderItemKey

            try
            begin
                ;;Add and commit
                data existing = DBContext.OrderItemsOverlays.Find(aOrderItemKey)
                if(existing == ^null) then
                begin
                    DBContext.OrderItemsOverlays.Add(aOrderItemsOverlay)
                    DBContext.SaveChanges()
                    mreturn Created(aOrderItemsOverlay)
                end
                else
                begin
                    aOrderItemsOverlay.CopyTo(existing)
                    DBContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("OrderItemsOverlays(OrderItemKey={aOrderItemKey})")}
        ;;; <summary>
        ;;; Patch  (partial update) a orderItemsOverlay.
        ;;; </summary>
        ;;; <param name="aOrderItemKey">Order number and item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchOrderItemsOverlay, @IActionResult
            {FromODataUri}
            required in aOrderItemKey, int
            {FromBody}
            required in aOrderItemsOverlay, @JsonPatchDocument<OrderItemsOverlay>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing orderItemsOverlay
            try
            begin
                ;;Get the orderItemsOverlay to be updated
                data orderItemsOverlayToUpdate = DBContext.OrderItemsOverlays.Find(aOrderItemKey)

                ;;Did we find it?
                if(orderItemsOverlayToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the orderItemsOverlay we read
                aOrderItemsOverlay.ApplyTo(orderItemsOverlayToUpdate)

                ;;Update and commit
                DBContext.OrderItemsOverlays.Update(orderItemsOverlayToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("OrderItemsOverlays(OrderItemKey={aOrderItemKey})")}
        ;;; <summary>
        ;;; Delete a orderItemsOverlay.
        ;;; </summary>
        ;;; <param name="aOrderItemKey">Order number and item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteOrderItemsOverlay, @IActionResult
            {FromODataUri}
            required in aOrderItemKey, int
        proc
            ;;Get the orderItemsOverlay to be deleted
            data orderItemsOverlayToRemove = DBContext.OrderItemsOverlays.Find(aOrderItemKey)

            ;;Did we find it?
            if (orderItemsOverlayToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.OrderItemsOverlays.Remove(orderItemsOverlayToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace