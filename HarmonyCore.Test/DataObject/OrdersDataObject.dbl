;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:   Symphony Framework : DATAOBJECT.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text
import Harmony.Core.Converters
import Microsoft.AspNet.OData.Builder

namespace Harmony.Core.Test

	.include 'orders' repository  , structure = 'STROrders', end

    public partial class Orders extends Harmony.Core.DataObjectBase
        ;;make the record available and a copy
        private mSynergyData, STROrders 
		private mOriginalSynergyData, STROrders 
		
		private static sMetadata, @OrdersMetadata
		static method Orders
		proc
			sMetadata = new OrdersMetadata()
			Harmony.Core.DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Orders), sMetadata)
		endmethod
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Orders
            endparams
            parent()
        proc
			init mSynergyData, mOriginalSynergyData
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method Orders
			in req inData			,STROrders
			endparams
			parent()
		proc
			mSynergyData = mOriginalSynergyData = inData
		endmethod

		public override method InternalSynergyRecord, void
			targetMethod, @Harmony.Core.AlphaAction
		proc
			targetMethod(mSynergyData, mGlobalRFA)
		endmethod
		
		;;{Contained}
		;;public readwrite property VinylRecords, @ICollection<Orders>

        ;;Expose fields as properties for data binding
		;;Or_number
		{System.ComponentModel.DataAnnotations.Key}
		public property Or_number, int
			method get
			proc
				mreturn (int)mSynergyData.Or_number
				
            endmethod
			method set
			proc
				mSynergyData.Or_number = value
			endmethod
		endproperty
		;;Or_customer
		public property Or_customer, int
			method get
			proc
				mreturn (int)mSynergyData.Or_customer
				
			endmethod
			method set
			proc
				mSynergyData.Or_customer = value
			endmethod
		endproperty
		;;Or_placed_by
		public property Or_placed_by, string
			method get
			proc
				mreturn (string)mSynergyData.OR_PLACED_BY
				
			endmethod
			method set
			proc
				mSynergyData.OR_PLACED_BY = value
			endmethod
		endproperty
		;;Or_customer_ref
		public property Or_customer_ref, string
			method get
			proc
				mreturn (string)mSynergyData.OR_CUSTOMER_REF
				
			endmethod
			method set
			proc
				mSynergyData.OR_CUSTOMER_REF = value
			endmethod
		endproperty
		;;Or_terms
		public property Or_terms, string
			method get
			proc
				mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Or_terms, ^null, ^null, ^null)
				
			endmethod
			method set
			proc
				mSynergyData.Or_terms = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
			endmethod
		endproperty
		;;Or_odate
		public property Or_ordered, DateTime
			method get
			proc
				data dt, DateTime
				DateTime.TryParse((string)mSynergyData.OR_ORDERED, dt)
				mreturn dt
			endmethod
			method set
			proc
			endmethod
		endproperty
		;;Or_sdate
		public property Or_completed, DateTime
			method get
			proc
				data dt, DateTime
				DateTime.TryParse((string)mSynergyData.OR_COMPLETED, dt)
				mreturn dt
			endmethod
			method set
			proc
			endmethod
		endproperty

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
		
		;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
		public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
			endparams
		proc
		endmethod
		
		public override property Metadata, @DataObjectMetadataBase
			method get
			proc
				mreturn sMetadata
			endmethod
		endproperty

		public override method InternalGetValues, [#]@object
		proc
			;;this should be returning boxed values for each of our fields
			mreturn new Object[0]
		endmethod

	endclass
	
	public partial class OrdersMetadata extends Harmony.Core.DataObjectMetadataBase
		
		public method OrdersMetadata
		proc
			RPSStructureName = "ORDERS"
			RPSStructureSize = ^size(STROrders)
			;;fill in all of the field defs and other type level info here
			AddFieldInfo("Or_number", "DECIMAL", 6, 1, 0, false)
			AddFieldInfo("Or_customer", "DECIMAL", 6, 7, 0, false)
			AddFieldInfo("Or_placed_by", "ALPHA", 25, 13, 0, false)
			AddFieldInfo("Or_customer_ref", "ALPHA", 25, 38, 0, false)
			AddFieldInfo("Or_terms", "ALPHA", 2, 63, 0, false)
			AddFieldInfo("Or_ordered", "DATE", 6, 65, 0, false)
			AddFieldInfo("Or_completed", "DATE", 6, 73, 0, false)
		endmethod
	
		public override method MakeNew, @DataObjectBase
			req in dataArea, a
			req in grfa, a
		proc
			mreturn new Orders((STROrders)dataArea) { GlobalRFA = grfa }
		endmethod

		public override method MakeNew, @DataObjectBase
			in req recordData, a
			in req grfaData, a
			in req joinedData, [#]KeyValuePair<string, Object>
		proc
			mreturn new Orders((STROrders)recordData) { GlobalRFA = grfaData }
		endmethod
		public override method FormatKeyLiteral, a
			keyNumber, int
			parts, @Dictionary<string, Object>
		proc
			mreturn ""
		endmethod
	endclass
endnamespace

