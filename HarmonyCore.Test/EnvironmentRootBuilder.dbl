import System
import System.Collections.Generic
import System.Text
import System.IO


namespace HarmonyCore.Test

	public class EnvironmentRootBuilder
		public static method Configure, void
		proc
			;Encoding.RegisterProvider(CodePagesEncodingProvider.Instance)
			setLogicals()
			deleteFiles()
			createFiles()
		endmethod

		public static method Cleanup, void
		proc
			deleteFiles()
		endmethod

		private static method setLogicals, void
		proc
			data sampleDataFolder = findRelativeFolderForAssembly("SampleData")
			data logicals = new List<string>()
			data logical = String.Empty
			data fileSpec = String.Empty

			fileSpec = "ICSTUT:customer.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[1].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			fileSpec = "ICSTUT:orders.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[1].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			fileSpec = "ICSTUT:items.ism"
			if (fileSpec.Contains(":"))
			begin
				logical = fileSpec.Split(":")[1].ToUpper()
				if (!logicals.Contains(logical))
					logicals.Add(logical)
			end

			foreach logical in logicals
			begin
				data sts, int
				xcall setlog(logical,sampleDataFolder,sts)
			end

		endmethod

		private static method createFiles, void
			.include "CUSTOMERS" repository, stack record="customer", nofields, end
			.include "ORDERS" repository, stack record="order", nofields, end
			.include "ITEMS" repository, stack record="item", nofields, end
		proc
			data chout, int
			data chin, int
			data dataFile, string
			data xdlFile, string
			data textFile, string

			;;Create and load the customers file

			dataFile = "ICSTUT:customer.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")
			textFile = dataFile.ToLower().Replace(".ism",".txt")

			try
			begin
				open(chout=0,o:i,dataFile,FDL:xdlFile)
				open(chin,i,textFile)
				repeat
				begin
					reads(chin,customer)
					store(chout,customer)
				end
			end
			catch (ex, @EndOfFileException)
			begin
				close chin
				close chout
			end
			endtry

			;;Create and load the orders file

			dataFile = "ICSTUT:orders.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")
			textFile = dataFile.ToLower().Replace(".ism",".txt")

			try
			begin
				open(chout=0,o:i,dataFile,FDL:xdlFile)
				open(chin,i,textFile)
				repeat
				begin
					reads(chin,order)
					store(chout,order)
				end
			end
			catch (ex, @EndOfFileException)
			begin
				close chin
				close chout
			end
			endtry

			;;Create and load the items file

			dataFile = "ICSTUT:items.ism"
			xdlFile = "@" + dataFile.ToLower().Replace(".ism",".xdl")
			textFile = dataFile.ToLower().Replace(".ism",".txt")

			try
			begin
				open(chout=0,o:i,dataFile,FDL:xdlFile)
				open(chin,i,textFile)
				repeat
				begin
					reads(chin,item)
					store(chout,item)
				end
			end
			catch (ex, @EndOfFileException)
			begin
				close chin
				close chout
			end
			endtry

		endmethod

		private static method deleteFiles, void
		proc
			;;Delete the customers file
			try
			begin
				xcall delet("ICSTUT:customer.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

			;;Delete the orders file
			try
			begin
				xcall delet("ICSTUT:orders.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

			;;Delete the items file
			try
			begin
				xcall delet("ICSTUT:items.ism")
			end
			catch (e, @NoFileFoundException)
			begin
				nop
			end
			endtry

		endmethod


		public static method FindRelativeFolderForAssembly, @string
			folderName, @string
		proc
			data assemblyLocation = ^typeof(EnvironmentRootBuilder).Assembly.Location
			data currentFolder = Path.GetDirectoryName(assemblyLocation)
			data rootPath = Path.GetPathRoot(currentFolder)
			while(currentFolder != rootPath)
			begin
				if(Directory.Exists(Path.Combine(currentFolder, folderName))) then
					mreturn Path.Combine(currentFolder, folderName)
				else
					currentFolder = Path.GetFullPath(currentFolder + "..\")
			end
			mreturn ^null
		endmethod

	endclass

endnamespace
