import System
import System.Collections.Generic
import System.Text
import Microsoft.VisualStudio.TestTools.UnitTesting
import System.Threading.Tasks
import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.TestHost
import Microsoft.AspNet.OData
import Microsoft.AspNetCore.Builder
import Microsoft.AspNet.OData.Routing
import Microsoft.AspNetCore.Mvc
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.Configuration
import Microsoft.AspNet.OData.Extensions
import Microsoft.AspNet.OData.Builder
import Microsoft.OData.Edm
import Microsoft.OData
import Harmony.Core.Test
import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.FileIO.Queryable
import System.Linq
import System.Net.Http
import Harmony.AspNetCore.Context

namespace HarmonyCore.Test.EndToEnd

	{TestClass}
	public class XfServerController
		server, @TestServer 
		public method XfServerController
		proc
			server = new TestServer(new WebHostBuilder().UseStartup<XfServerControllerTestStartup>())
		endmethod

		{TestMethod}
		public method SimpleTest, void
		proc
			data client = server.CreateClient()
			data request = "/odata/XfOrders"
			data response = client.GetAsync(request).Result
			response.EnsureSuccessStatusCode()

			data result = response.Content.ReadAsStringAsync().Result
		endmethod
	endclass

	public class XfServerContext extends ThreadedContextBase
		public readwrite property DBContext, @XfServerControllerDBContext

		public method XfServerContext
			dbContext, @XfServerControllerDBContext
			dispatcher, @BackgroundDispatcher
			endparams
			parent(dispatcher)
		proc
			this.DBContext = dbContext
		endmethod
	endclass

	
	public class XfServerControllerTestStartup
		public method ConfigureServices, void
			services, @IServiceCollection 
		proc
			services.AddOData()
			services.AddMvcCore()
		endmethod

		public method Configure, void
			app, @IApplicationBuilder
			env, @IHostingEnvironment
		proc
			data model = XfServerControllerTestEdmModelBuilder.GetEdmModel()
			data requestServiceProviderFactory = new SimpleRequestServiceProviderFactory()
			lambda MakeObjectProvider(sp) 
			begin
				data objectProvider = new DataObjectProvider(sp.GetService<FileChannelManager>())
				objectProvider.AddDataObjectMapping<Orders>("DAT:orders.ddf", FileOpenMode.UpdateRelative)
				mreturn objectProvider
			end
			requestServiceProviderFactory.Services.AddSingleton<FileChannelManager, FileChannelManager>()

			data typedMakeObjectProvider, @Func<IServiceProvider, IDataObjectProvider>, MakeObjectProvider
			ServiceCollectionServiceExtensions.AddSingleton<IDataObjectProvider>(requestServiceProviderFactory.Services, typedMakeObjectProvider)
			requestServiceProviderFactory.Services.AddSingleton<DbContextOptions<XfServerControllerDBContext>>(new DbContextOptions<XfServerControllerDBContext>())
			requestServiceProviderFactory.Services.AddSingleton<XfServerControllerDBContext, XfServerControllerDBContext>()

			data contextPool = new ThreadedContextPool<XfServerContext>(4, true, requestServiceProviderFactory)
			app.UseEagerContext<XfServerContext>(contextPool)

			lambda MVCBuilder(builder)
			begin
				builder.Select().Expand().Filter().OrderBy().MaxTop(100).Count()
				builder.MapODataServiceRoute("odata", "odata", model)
			end
			app.UseMvc(MVCBuilder)
		endmethod
	endclass

	public class XfServerControllerDBContext extends DbContext
	
		mDataProvider, @IDataObjectProvider
		public method XfServerControllerDBContext
			options, @DbContextOptions<XfServerControllerDBContext>
			dataProvider, @IDataObjectProvider
			endparams
			parent(options)
		proc
			mDataProvider = dataProvider
		endmethod


		public readwrite property Orders, @DbSet<Orders>

		protected override method OnConfiguring, void
			opts, @DbContextOptionsBuilder
		proc
			HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, mDataProvider)
		endmethod

		protected override method OnModelCreating, void
			parm, @ModelBuilder
		proc
			parm.Ignore(^typeof(AlphaDesc))
			parm.Ignore(^typeof(DataObjectMetadataBase))
			;modelBuilder.Entity<Orders>().Ignore(lambda(t) { t. })
			parent.OnModelCreating(parm);
		endmethod

	endclass

	public class XfOrdersController extends ODataController
	
		public readwrite property Context, @XfServerContext

		public method XfOrdersController
			context, @XfServerContext
		proc
			this.Context = context
		endmethod

		{ODataRoute("XfOrders")}
		{EnableQuery(MaxExpansionDepth=3, MaxSkip=10, MaxTop=5, PageSize=4)}
		public method Get, @IActionResult
		proc
			mreturn Ok(Context.DBContext.Orders)
		endmethod

		{ODataRoute("XfOrders({id})")}
		public method Get, @IActionResult
			{FromODataUri}
			id, int
		proc
			data foundOrder = Context.DBContext.Orders.Find(id)
			mreturn Ok(foundOrder)
		endmethod

		{ODataRoute("XfOrders({id})")}
		public method Post, @IActionResult
			{FromODataUri}
			id, int
		proc
			data foundOrder = Context.DBContext.Orders.Find(id)
			Context.DBContext.SaveChanges()
			mreturn Ok(foundOrder)
		endmethod
	endclass

	public class XfServerControllerTestEdmModelBuilder
		private static mEdmModel, @IEdmModel
		public static method GetEdmModel, @IEdmModel
		proc
			if(mEdmModel == ^null)
			begin
				data builder = new ODataConventionModelBuilder()
				data entitySet = builder.EntitySet<Orders>("XfOrders")
				mEdmModel = builder.GetEdmModel()
			end

			mreturn mEdmModel
		endmethod

	endclass
endnamespace
