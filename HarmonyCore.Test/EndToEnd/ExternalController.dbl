import System
import System.Collections.Generic
import System.Text
import Microsoft.VisualStudio.TestTools.UnitTesting
import System.Threading.Tasks
import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.TestHost
import Microsoft.AspNet.OData
import Microsoft.AspNetCore.Builder
import Microsoft.AspNet.OData.Routing
import Microsoft.AspNetCore.Mvc
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.Configuration
import Microsoft.AspNet.OData.Extensions
import Microsoft.AspNet.OData.Builder
import Microsoft.OData.Edm
import Microsoft.OData
import Harmony.Core.Test
import Harmony.Core
import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.FileIO.Queryable
import System.Linq
import System.Net.Http
import Harmony.AspNetCore.Context
import System.IO
import Renci.SshNet

namespace HarmonyCore.Test.EndToEnd

	{TestClass}
	public class ExternalController
		server, @TestServer 
		public method ExternalController
		proc
			data status, i4
			setlog("DAT", EnvironmentRootBuilder.FindRelativeFolderForAssembly("Dat"), status)
			server = new TestServer(new WebHostBuilder().UseStartup<ExternalControllerTestStartup>())
		endmethod

		{TestMethod}
		public method SimpleTest, void
		proc
			data client = server.CreateClient()
			data request = "/odata/ExtOrders(3)"
			data response = client.PostAsync(request, new StringContent("")).Result
			response.EnsureSuccessStatusCode()

			data result = response.Content.ReadAsStringAsync().Result
		endmethod
	endclass

	public class ExternalCallContext extends DynamicCallProvider
		public method ExternalCallContext
			connection, @IDynamicCallConnection
			endparams
			parent(connection)
		proc
		endmethod
	endclass
	
	public class ExternalControllerTestStartup
		public method ConfigureServices, void
			services, @IServiceCollection 
		proc
			data channelManager = new FileChannelManager() 
			data objectProvider = new DataObjectProvider(channelManager)
			objectProvider.AddDataObjectMapping<Orders>("DAT:orders.ddf", FileOpenMode.UpdateRelative)
			services.AddSingleton<FileChannelManager>(channelManager)
			services.AddSingleton<IDataObjectProvider>(objectProvider)
			services.AddSingleton<DbContextOptions<ExtControllerDBContext>>(new DbContextOptions<ExtControllerDBContext>())
			services.AddScoped<ExtControllerDBContext, ExtControllerDBContext>()

			services.AddOData()
			services.AddMvcCore()
		endmethod

		public method Configure, void
			app, @IApplicationBuilder
			env, @IHostingEnvironment
		proc
			data model = ExternalControllerTestEdmModelBuilder.GetEdmModel()
			;;data contextPool, @ExternalContextPool<ExternalCallContext>, new ExternalContextPool<ExternalCallContext>(Environment.GetEnvironmentVariable("SYNERGYDE32") + "dbl\bin\dbs.exe", 'TraditionalBridge.Test.dbr', Path.GetFullPath(Path.Combine(Environment.CurrentDirectory, "..\..\..\..\Debug\x86")), ^null, 4) 
			data contextPool, @RemoteExternalContextPool<ExternalCallContext>, new RemoteExternalContextPool<ExternalCallContext>(Environment.GetEnvironmentVariable("HARMONY_TEST_MACHINE"), Environment.GetEnvironmentVariable("HARMONY_TEST_USER"), new Renci.SshNet.PasswordAuthenticationMethod(Environment.GetEnvironmentVariable("HARMONY_TEST_USER"), Environment.GetEnvironmentVariable("HARMONY_TEST_PASSWORD")), "stty -echo && . /usr2/test1033e_32/synergyde/setsde && DAT=~/dat/ &&dbr TraditionalBridge.Test.dbr" , 4) 
			app.UseEagerContext<ExternalCallContext>(contextPool)

			lambda MVCBuilder(builder)
			begin
				builder.Select().Expand().Filter().OrderBy().MaxTop(100).Count()
				builder.MapODataServiceRoute("odata", "odata", model)
			end
			app.UseMvc(MVCBuilder)
		endmethod
	endclass

	public class ExtControllerDBContext extends DbContext
	
		mDataProvider, @IDataObjectProvider
		public method ExtControllerDBContext
			options, @DbContextOptions<ExtControllerDBContext>
			dataProvider, @IDataObjectProvider
			endparams
			parent(options)
		proc
			mDataProvider = dataProvider
		endmethod


		public readwrite property Orders, @DbSet<Orders>

		protected override method OnConfiguring, void
			opts, @DbContextOptionsBuilder
		proc
			HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, mDataProvider)
		endmethod

		protected override method OnModelCreating, void
			parm, @ModelBuilder
		proc
			parm.Ignore(^typeof(AlphaDesc))
			parm.Ignore(^typeof(DataObjectMetadataBase))
			;modelBuilder.Entity<Orders>().Ignore(lambda(t) { t. })
			parent.OnModelCreating(parm);
		endmethod

	endclass

	public class ExtOrdersController extends ODataController
	
		public readwrite property Context, @ExternalCallContext
		public readwrite property DBContext, @ExtControllerDBContext

		public method ExtOrdersController
			context, @ExternalCallContext
			dbContext, @ExtControllerDBContext
		proc
			this.Context = context
			this.DBContext = dbContext
		endmethod

		{ODataRoute("ExtOrders({id})")}
		public method Post, @IActionResult
			{FromODataUri}
			id, int
		proc
			data order = DBContext.Orders.Find(id)
			data orders = DBContext.Orders.ToArray()
			Context.CallMethodV("fred", "hello", 55, 23, order, orders)
			mreturn Ok(order)
		endmethod
	endclass

	public class ExternalControllerTestEdmModelBuilder
		private static mEdmModel, @IEdmModel
		public static method GetEdmModel, @IEdmModel
		proc
			if(mEdmModel == ^null)
			begin
				data builder = new ODataConventionModelBuilder()
				data entitySet = builder.EntitySet<Orders>("ExtOrders")
				mEdmModel = builder.GetEdmModel()
			end

			mreturn mEdmModel
		endmethod

	endclass
endnamespace
