import System
import Microsoft.VisualStudio.TestTools.UnitTesting
import Harmony.Core
import Harmony.Core.FileIO
import HarmonyCore.Test

namespace Harmony.Core.Test
	{TestClass}
	public class BasicFileIO
		{TestMethod}
		public method ReadInputRelative, void
		proc
			data status, i4
			EnvironmentRootBuilder.Configure()
			disposable data channelManager = new FileChannelManager()
			disposable data fileIO = new IsamDataObjectIO<Orders>(channelManager, "DAT:orders.ism", FileOpenMode.InputIndexed)
			data firstOrder, @Orders
			data lastOrder, @Orders
			data nextOrder, @Orders
			data shouldBeFirstOrder, @Orders
			data shouldBeFirstOrder2, @Orders
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadFirstRecord(firstOrder))
			firstOrder.InternalSynergyRecord(lambda(recordData, grfaData) { Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.FindRecord(-1, grfaData)) })
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadRecord(shouldBeFirstOrder))
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.FindFirstRecord())
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadRecord(shouldBeFirstOrder2))
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadNextRecord(nextOrder))
			Assert.AreEqual(Harmony.Core.FileIO.FileAccessResults.Success, fileIO.ReadLastRecord(lastOrder))


			Assert.AreEqual(firstOrder.Order_number, shouldBeFirstOrder.Order_number)
			Assert.AreEqual(firstOrder.Order_number, shouldBeFirstOrder2.Order_number)
			Assert.IsTrue(firstOrder.Order_number < nextOrder.Order_number)
			Assert.IsTrue(nextOrder.Order_number < lastOrder.Order_number)
		endmethod
	endclass
endnamespace
