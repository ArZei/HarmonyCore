;;*****************************************************************************
;;
;; Title:       TestTests.dbl
;;
;; Description: Unit tests for the operations defined in TestsController.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.VisualStudio.TestTools.UnitTesting
import Newtonsoft.Json
import System.Collections.Generic
import System.Net.Http
import Services
import Services.Test.Models

namespace Services.Test.UnitTests

    {TestClass}
    public partial class TestTests

        ;;------------------------------------------------------------
        ;;Get all Tests

        {TestMethod}
        {TestCategory("Test Tests - Read All")}
        public method GetTests, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()
            disposable data response = client.GetAsync("/odata/Tests").Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data tests, @ODataTests, JsonConvert.DeserializeObject<ODataTests>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Get a single Test by primary key

        {TestMethod}
        {TestCategory("Test Tests - Read by Primary Key")}
        public method GetTest, void
        proc
            data client = UnitTestEnvironment.Server.CreateClient()
            data request = String.Format("/odata/Tests(Id={1})","",TestConstants.GetTest_Id)
            data response = client.GetAsync(request).Result
            data result = response.Content.ReadAsStringAsync().Result
            response.EnsureSuccessStatusCode()
            data test, @ODataTest, JsonConvert.DeserializeObject<ODataTest>(result)
        endmethod

        ;;------------------------------------------------------------
        ;;Create new Test (client specified key)

        {TestMethod}
        {TestCategory("Test Tests - Create, Update & Delete")}
        public method UpdateTest, void
        proc
            disposable data client = UnitTestEnvironment.Server.CreateClient()

            ;;Get one test from the file
            data getRequest = String.Format("/odata/Tests({1})","",TestConstants.GetTest_Id)
            data getResponse = client.GetAsync(getRequest).Result
            data getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Test object
            data doTest, @Test, JsonConvert.DeserializeObject<Test>(getResult)

            doTest.Id = TestConstants.UpdateTest_Id

            ;TODO: Also need to ensure any nodups alternate keys get unique values

            ;;Create new item
            disposable data requestBody = new StringContent(JsonConvert.SerializeObject(doTest),System.Text.Encoding.UTF8, "application/json")
            data request = String.Format("/odata/Tests({1})","",TestConstants.UpdateTest_Id)
            disposable data response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Test object
            doTest = JsonConvert.DeserializeObject<Test>(getResult)

            ;;Change the first non key field to test full update
            doTest.YesNo = "Y"

            ;;Update full item
            requestBody = new StringContent(JsonConvert.SerializeObject(doTest),System.Text.Encoding.UTF8, "application/json")
            request = String.Format("/odata/Tests({1})","",TestConstants.UpdateTest_Id)
            response = client.PutAsync(request, requestBody).Result

            ;;Check that we got a successful response from the web service
            response.EnsureSuccessStatusCode()

            ;;Get the inserted record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Test object
            doTest = JsonConvert.DeserializeObject<Test>(getResult)

            Assert.AreEqual(doTest.YesNo, "Y")

            ;;Update one property in the test
            data patchDoc = new JsonPatchDocument()
            patchDoc.Replace("YesNo", "Z")

            ;;Serialize the patch to JSON
            data serializedPatch = JsonConvert.SerializeObject(patchDoc)

            ;;Apply the patch
            disposable data patchRequestBody = new StringContent(serializedPatch,System.Text.Encoding.UTF8, "application/json-patch+json")
            disposable data patchResponse = client.PatchAsync(request, patchRequestBody).Result

            ;;Check that we got a successful response from the web service
            patchResponse.EnsureSuccessStatusCode()

            ;;Get the updated test record
            getResponse = client.GetAsync(request).Result
            getResult = getResponse.Content.ReadAsStringAsync().Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Deserialize the JSON into a Test object
            doTest = JsonConvert.DeserializeObject<Test>(getResult)

            ;;Verify that the property was changed
            Assert.AreEqual(doTest.YesNo, "Z")

            ;;Delete It
            disposable data deleteResponse = client.DeleteAsync(request).Result

            ;;Check that we got a successful response from the web service
            getResponse.EnsureSuccessStatusCode()

            ;;Attempt to get the deleted record
            getResponse = client.GetAsync(request).Result

            ;;Check we got a fail state from the web service
            Assert.AreEqual(getResponse.IsSuccessStatusCode, false)

        endmethod

    endclass

endnamespace
