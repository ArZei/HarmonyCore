;;*****************************************************************************
;;
;; Title:       EdmBuilder.dbl
;;
;; Description: Builds a Harmony Core Enterprise Data Model (EDM)
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Harmony.Core
import Harmony.Core.Context
import Harmony.OData
import Microsoft.EntityFrameworkCore
import Microsoft.OData.Edm
import Microsoft.AspNet.OData.Builder
import System.Collections.Generic
import Services.Models

namespace Services

    ;;; <summary>
    ;;; Builds an entity framework entity data model.
    ;;; </summary>
    public class EdmBuilder

        private static mEdmModel, @IEdmModel

        ;;; <summary>
        ;;; Gets the entity data model.
        ;;; </summary>
        public static method GetEdmModel, @IEdmModel
            required in serviceProvider, @IServiceProvider
        proc
            if(mEdmModel == ^null)
            begin
                data builder = new ODataConventionModelBuilder(serviceProvider)

                ;;Declare entities
                builder.EntitySet<Customer>("Customers")
                builder.EntitySet<Item>("Items")
                builder.EntitySet<Order>("Orders")
                builder.EntitySet<OrderItem>("OrderItems")
                builder.EntitySet<Vendor>("Vendors")

                ;;Entities with a single primary key segment have the key declared to EF via a
                ;;{Key} attribute on the appropriate property in the data model, but only one {key}
                ;;attribute can be used in a class, so keys with multiple segments are defined
                ;;using the "Fluent API" here.
                builder.EntityType<OrderItem>().HasKey<OrderItem,int>("OrderNumber")
                builder.EntityType<OrderItem>().HasKey<OrderItem,int>("ItemNumber")

                data tempModel = (@EdmModel)builder.GetEdmModel()

                data customerType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Customer")
                tempModel.AddAlternateKeyAnnotation(customerType, new Dictionary<string, IEdmProperty>() {{"State",customerType.FindProperty("State")}})
                tempModel.AddAlternateKeyAnnotation(customerType, new Dictionary<string, IEdmProperty>() {{"ZipCode",customerType.FindProperty("ZipCode")}})
                tempModel.AddAlternateKeyAnnotation(customerType, new Dictionary<string, IEdmProperty>() {{"PaymentTermsCode",customerType.FindProperty("PaymentTermsCode")}})

                data itemType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Item")
                tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"VendorNumber",itemType.FindProperty("VendorNumber")}})
                tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"FlowerColor",itemType.FindProperty("FlowerColor")}})
                tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"Size",itemType.FindProperty("Size")}})
                tempModel.AddAlternateKeyAnnotation(itemType, new Dictionary<string, IEdmProperty>() {{"CommonName",itemType.FindProperty("CommonName")}})

                data orderType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Order")
                tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"CustomerNumber",orderType.FindProperty("CustomerNumber")}})
                tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"DateOrdered",orderType.FindProperty("DateOrdered")}})
                tempModel.AddAlternateKeyAnnotation(orderType, new Dictionary<string, IEdmProperty>() {{"DateCompleted",orderType.FindProperty("DateCompleted")}})

                data orderItemType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.OrderItem")
                tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"ItemOrdered",orderItemType.FindProperty("ItemOrdered")}})
                tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"DateShipped",orderItemType.FindProperty("DateShipped")}})
                tempModel.AddAlternateKeyAnnotation(orderItemType, new Dictionary<string, IEdmProperty>() {{"InvoiceNumber",orderItemType.FindProperty("InvoiceNumber")}})

                data vendorType = (@EdmEntityType)tempModel.FindDeclaredType("Services.Models.Vendor")
                tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"State",vendorType.FindProperty("State")}})
                tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"ZipCode",vendorType.FindProperty("ZipCode")}})
                tempModel.AddAlternateKeyAnnotation(vendorType, new Dictionary<string, IEdmProperty>() {{"PaymentTermsCode",vendorType.FindProperty("PaymentTermsCode")}})

                mEdmModel = tempModel
            end

            mreturn mEdmModel

        endmethod

    endclass

endnamespace