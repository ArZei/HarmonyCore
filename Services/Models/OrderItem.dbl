;;*****************************************************************************
;;
;; Title:       OrderItem.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure ORDER_ITEMS and from the data file DAT:order_items.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.OData

namespace Services.Models

    public partial class OrderItem extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strOrderItem 
        private mOriginalSynergyData, strOrderItem 
        
        private static sMetadata, @OrderItemMetadata

.region "Constructors"

        static method OrderItem
        proc
            sMetadata = new OrderItemMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(OrderItem), sMetadata)
        endmethod
        
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method OrderItem
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method OrderItem
            required in inData, strOrderItem
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Order number
        ;;; </summary>
        {Required(ErrorMessage="Order number is required. ")}
        public property OrderNumber, int
            method get
            proc
                mreturn (int)mSynergyData.Order_number
            endmethod
            method set
            proc
                mSynergyData.Order_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Line item number
        ;;; </summary>
        {Required(ErrorMessage="Line item number is required. ")}
        public property ItemNumber, int
            method get
            proc
                mreturn (int)mSynergyData.Item_number
            endmethod
            method set
            proc
                mSynergyData.Item_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Item ordered
        ;;; </summary>
        {Required(ErrorMessage="Item ordered is required. ")}
        public property ItemOrdered, int
            method get
            proc
                mreturn (int)mSynergyData.Item_ordered
            endmethod
            method set
            proc
                mSynergyData.Item_ordered = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Quantity ordered
        ;;; </summary>
        {Required(ErrorMessage="Quantity ordered is required. ")}
        public property QuantityOrdered, int
            method get
            proc
                mreturn (int)mSynergyData.Quantity_ordered
            endmethod
            method set
            proc
                mSynergyData.Quantity_ordered = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Unit price
        ;;; </summary>
        {Required(ErrorMessage="Unit price is required. ")}
        public property UnitPrice, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Unit_price, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.Unit_price = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Date shipped
        ;;; </summary>
        public property DateShipped, DateTime
            method get
            proc
                mreturn (DateTime)SynergyDecimalDateConverter.Convert(mSynergyData.Date_shipped, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Date_shipped = (D)SynergyDecimalDateConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Invoice number
        ;;; </summary>
        public property InvoiceNumber, int
            method get
            proc
                mreturn (int)mSynergyData.Invoice_number
            endmethod
            method set
            proc
                mSynergyData.Invoice_number = value
            endmethod
        endproperty

.endregion

.region "Relationships to other entities"

        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; ORDER_ITEM.ORDER_NUMBER_AND_LINE_ITEM (one) --> (one) --> (many) ORDER.ORDER_NUMBER
        ;;; </summary>
        public readwrite property REL_OrderNumberAndLineItem, @Order

        ;;; <summary>
        ;;; Relationship (Type A)
        ;;; ORDER_ITEM.ITEM_ORDERED (one) --> (one) --> (many) ITEM.ITEM_NUMBER
        ;;; </summary>
        public readwrite property REL_ItemOrdered, @Item

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod
        
        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod
        
        ;;; <summary>
        ;;; 
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[0]
        endmethod

.endregion

    endclass
    
endnamespace
