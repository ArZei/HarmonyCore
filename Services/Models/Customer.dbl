;;*****************************************************************************
;;
;; Title:       Customer.dbl
;;
;; Description: Data model representing data defined by the repository
;;              structure CUSTOMERS and from the data file DAT:customers.ism.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel.DataAnnotations
import System.Text
import Harmony.Core
import Harmony.Core.Converters
import Harmony.OData

namespace Services.Models

    public partial class Customer extends DataObjectBase

        ;;make the record available and a copy
        private mSynergyData, strCustomer 
        private mOriginalSynergyData, strCustomer 
        
        private static sMetadata, @CustomerMetadata

.region "Constructors"

        static method Customer
        proc
            sMetadata = new CustomerMetadata()
            DataObjectMetadataBase.MetadataLookup.TryAdd(^typeof(Customer), sMetadata)
        endmethod
        
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Customer
            parent()
        proc
            init mSynergyData, mOriginalSynergyData
        endmethod

        ;;; <summary>
        ;;;  Alternate Constructor, accepts the structured data
        ;;; </summary>
        public method Customer
            required in inData, strCustomer
            parent()
        proc
            mSynergyData = mOriginalSynergyData = inData
        endmethod

.endregion

.region "Attributes of this entity"

        ;;; <summary>
        ;;; Customer number
        ;;; </summary>
        {Key}
        public property CustomerNumber, int
            method get
            proc
                mreturn (int)mSynergyData.Customer_number
            endmethod
            method set
            proc
                mSynergyData.Customer_number = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customer name
        ;;; </summary>
        {StringLength(30, ErrorMessage="Customer name cannot exceed 30 characters. ")}
        public property Name, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Name, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Name = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Street address
        ;;; </summary>
        {StringLength(25, ErrorMessage="Street address cannot exceed 25 characters. ")}
        public property Street, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Street, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Street = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; City
        ;;; </summary>
        {StringLength(20, ErrorMessage="City cannot exceed 20 characters. ")}
        {AuthorizeField("User,Manager")}
        public property City, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.City, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.City = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; State
        ;;; </summary>
        {StringLength(2, ErrorMessage="State cannot exceed 2 characters. ")}
        public property State, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.State, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.State = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Zip code
        ;;; </summary>
        public property ZipCode, int
            method get
            proc
                mreturn (int)mSynergyData.Zip_code
            endmethod
            method set
            proc
                mSynergyData.Zip_code = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Contact name
        ;;; </summary>
        {StringLength(25, ErrorMessage="Contact name cannot exceed 25 characters. ")}
        public property Contact, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Contact, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Contact = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Phone number
        ;;; </summary>
        public property Phone, String
            method get
            proc
                mreturn %string(mSynergyData.Phone,"(XXX) XXX-XXXX")
            endmethod
            method set
            proc
                mSynergyData.Phone = SynergyDecimalConverter.ConvertBack(value,"(XXX) XXX-XXXX")
            endmethod
        endproperty

        ;;; <summary>
        ;;; Fax number
        ;;; </summary>
        public property Fax, String
            method get
            proc
                mreturn %string(mSynergyData.Fax,"(XXX) XXX-XXXX")
            endmethod
            method set
            proc
                mSynergyData.Fax = SynergyDecimalConverter.ConvertBack(value,"(XXX) XXX-XXXX")
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customers favorite item
        ;;; </summary>
        public property FavoriteItem, int
            method get
            proc
                mreturn (int)mSynergyData.Favorite_item
            endmethod
            method set
            proc
                mSynergyData.Favorite_item = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Payment terms code
        ;;; </summary>
        {StringLength(2, ErrorMessage="Payment terms code cannot exceed 2 characters. ")}
        public property PaymentTermsCode, string
            method get
            proc
                mreturn (string)SynergyAlphaConverter.Convert(mSynergyData.Payment_terms_code, ^null, ^null, ^null)
            endmethod
            method set
            proc
                mSynergyData.Payment_terms_code = (A)SynergyAlphaConverter.ConvertBack(value, ^null, ^null, ^null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Customers tax ID number
        ;;; </summary>
        public property TaxId, int
            method get
            proc
                mreturn (int)mSynergyData.Tax_id
            endmethod
            method set
            proc
                mSynergyData.Tax_id = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Credit limit
        ;;; </summary>
        public property CreditLimit, decimal
            method get
            proc
                mreturn (decimal)SynergyImpliedDecimalConverter.Convert(mSynergyData.Credit_limit, ^null, "DECIMALPLACES#2", ^null)
            endmethod
            method set
            proc
                mSynergyData.Credit_limit = value
            endmethod
        endproperty

.endregion

.region "Relationships to other entities"

        ;;; <summary>
        ;;; Relationship (Type D)
        ;;; CUSTOMER.CUSTOMER_NUMBER (one) <-> (many) ORDER.CUSTOMER_NUMBER
        ;;; </summary>
        public readwrite property REL_Orders, @ICollection<Order>

        ;;; <summary>
        ;;; Relationship (Type C)
        ;;; CUSTOMER.FAVORITE_ITEM (one) --> (one) ITEM.ITEM_NUMBER
        ;;; </summary>
        public readwrite property REL_FavoriteItem, @Item

.endregion

.region "Other attributes"

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
        public override property SynergyRecord, a
            method get
            proc
                mreturn mSynergyData
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Expose the complete original synergy record
        ;;; </summary>
        public override property OriginalSynergyRecord, a
            method get
            proc
                mreturn mOriginalSynergyData
            endmethod
        endproperty

        ;;; <summary>
        ;;; Metadata describing the public field properties
        ;;; </summary>
        public override property Metadata, @DataObjectMetadataBase
            method get
            proc
                mreturn sMetadata
            endmethod
        endproperty

.endregion

.region "Public methods"

        ;;; <summary>
        ;;; 
        ;;; </summary>
        public override method InternalSynergyRecord, void
            targetMethod, @AlphaAction
        proc
            targetMethod(mSynergyData, mGlobalRFA)
        endmethod
        
        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
        proc
        endmethod
        
        ;;; <summary>
        ;;; 
        ;;; </summary>
        public override method InternalGetValues, [#]@object
        proc
            ;;TODO: This should be returning boxed values for each of our fields
            mreturn new Object[0]
        endmethod

.endregion

    endclass
    
endnamespace
