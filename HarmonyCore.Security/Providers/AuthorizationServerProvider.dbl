
import Microsoft.Owin.Security
import Microsoft.Owin.Security.OAuth
import System.Collections.Generic
import System.Security.Claims
import System.Threading.Tasks

.array 0

namespace HarmonyCore.Security.Providers

	;; This is a local implementation of a simple "self hosted" authentication server.
	;; It implements the OAuth "Resource owner password credential flow."
	;; Typically used where the user "trusts" the application, and is willing to enter
	;; their credentials directly into the application. The application then uses those credentials
	;; one time to obtain an access token, which it can then use repeatedly to access resources.
	;; When the access token expires then the app can either "refresh" the token (if suopported)
	;; or re-prompts the user for their credentials and starts over.
    
	public class AuthorizationServerProvider extends OAuthAuthorizationServerProvider
        
		public override async method ValidateClientAuthentication, @Task
			context, @OAuthValidateClientAuthenticationContext 
		proc
			;;  OAuth2 supports the notion of client (application) authentication
			;;  This is not used here
			context.Validated()
		endmethod
        
		public override async method GrantResourceOwnerCredentials, @Task
			context, @OAuthGrantResourceOwnerCredentialsContext 
		proc
			;;  Validate user credentials (demo!)
			;;  Maybe go to a database to validate credentials?
			;;  User credentials should be stored securely (salted, iterated, hashed, yada!)
			if (context.UserName != context.Password)
			begin
				context.Rejected()
				mreturn
			end

			;; Mock up an identity for the user
			data id = new ClaimsIdentity(context.Options.AuthenticationType)
			id.AddClaim(new Claim("sub", context.UserName))

			;; Everyone gets the "user" role
			id.AddClaim(new Claim("role", "user"))

			;; And some users get additional roles
			using (context.UserName) select
			("john"),
			begin
				id.AddClaim(new Claim("role", "manager"))
				exit
			end
			("jane"),
			begin
				id.AddClaim(new Claim("role", "aruser"))
				exit
			end
			endusing

			context.Validated(id)

		endmethod

	endclass

endnamespace
